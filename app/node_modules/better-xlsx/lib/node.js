"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.props = props;
exports.Node = exports.HEAD = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function attrEscape(str) {
  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/\t/g, '&#x9;').replace(/\n/g, '&#xA;').replace(/\r/g, '&#xD;');
}

function escape(str) {
  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
}

var HEAD = Symbol('head');
exports.HEAD = HEAD;

function props() {
  for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {
    keys[_key] = arguments[_key];
  }

  return function (target) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      var _loop = function _loop() {
        var key = _step.value;
        target.elements.push({
          key,
          kind: 'method',
          placement: 'prototype',
          descriptor: {
            get() {
              if (this.attributes) {
                return this.attributes[key];
              }
            },

            set(value) {
              if (this.attributes === undefined) {
                this.attributes = {};
              }

              this.attributes[key] = value;
            },

            configurable: true,
            enumerable: true
          }
        });
      };

      for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        _loop();
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return target;
  };
}

var Node =
/*#__PURE__*/
function () {
  function Node() {
    var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var name = arguments.length > 2 ? arguments[2] : undefined;
    (0, _classCallCheck2.default)(this, Node);

    for (var _i = 0, _Object$keys = Object.keys(attributes); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];
      this[key] = attributes[key];
    }

    this.children = children;
    this.__name = name || this.constructor.name.substring(1);
  }

  (0, _createClass2.default)(Node, [{
    key: "render",
    value: function render() {
      function walk(tree) {
        var name = tree.__name;
        var attributes = tree.attributes,
            children = tree.children;
        var tokens = [];

        if (tree[HEAD]) {
          tokens.push(tree[HEAD]);
        }

        tokens.push(`<${name}`);

        for (var _i2 = 0, _Object$keys2 = Object.keys(attributes || {}); _i2 < _Object$keys2.length; _i2++) {
          var key = _Object$keys2[_i2];
          var v = attributes[key];
          if (v === undefined) continue;

          if (typeof v === 'string') {
            v = attrEscape(v);
          }

          if (typeof v === 'boolean') {
            v = v ? 1 : 0;
          }

          tokens.push(` ${key}="${v}"`);
        }

        if (!children.length) {
          tokens.push('/>');
          return tokens;
        }

        tokens.push('>');
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var child = _step2.value;

            if (child instanceof Node) {
              tokens.push(child.render());
            } else if (typeof child === 'string') {
              tokens.push(escape(child));
            } else {
              tokens.push(child.toString());
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        tokens.push(`</${name}>`);
        return tokens;
      }

      return walk(this).join('');
    }
  }]);
  return Node;
}();

exports.Node = Node;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RefTable = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _xmlSharedStrings = require("./xmlSharedStrings");

var RefTable =
/*#__PURE__*/
function () {
  function RefTable() {
    (0, _classCallCheck2.default)(this, RefTable);
    this.strings = [];
    this.known = {};
  }

  (0, _createClass2.default)(RefTable, [{
    key: "makeXsst",
    value: function makeXsst() {
      var len = this.strings.length;
      var sst = new _xmlSharedStrings.Xsst({
        count: len,
        uniqueCount: len
      });
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.strings[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var str = _step.value;
          var si = new _xmlSharedStrings.Xsi({}, [new _xmlSharedStrings.Xt({}, [str])]);
          sst.children.push(si);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return sst;
    }
  }, {
    key: "addString",
    value: function addString(str) {
      if (this.known[str] === undefined) {
        var index = this.strings.length;
        this.strings.push(str);
        this.known[str] = index;
        return index;
      }

      return this.known[str];
    }
  }, {
    key: "getString",
    value: function getString(index) {
      return this.strings[index];
    }
  }, {
    key: "length",
    value: function length() {
      return this.strings.length;
    }
  }]);
  return RefTable;
}();

exports.RefTable = RefTable;
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.File = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _sheet = require("./sheet");

var templates = _interopRequireWildcard(require("./templates"));

var _reftable = require("./reftable");

var _xmlWorkbook = require("./xmlWorkbook");

var _xmlContentTypes = require("./xmlContentTypes");

var _xmlStyle = require("./xmlStyle");

var _jszip = _interopRequireDefault(require("jszip"));

/**
 * This is the main class, use it:
 *
 * ```js
 * import { File } from 'better-xlsx';
 * const file = new File();
 * const sheet = file.addSheet('Sheet-1');
 * ```
 *
 * @class File
 */
var File =
/*#__PURE__*/
function () {
  /**
   * @private
   */

  /**
   * @private
   */

  /**
   * @private
   */
  function File() {
    (0, _classCallCheck2.default)(this, File);
    (0, _defineProperty2.default)(this, "sheet", {});
    (0, _defineProperty2.default)(this, "sheets", []);
    (0, _defineProperty2.default)(this, "definedNames", []);

    /**
     * @private
     */
    this.styles = new _xmlStyle.XstyleSheet({});
  }
  /**
   * Add a new Sheet, with the provided name, to a File
   * @param {String} name Name of the Sheet
   * @return {Sheet}
   */


  (0, _createClass2.default)(File, [{
    key: "addSheet",
    value: function addSheet(name) {
      if (this.sheet[name]) {
        throw new Error(`duplicate sheet name ${name}.`);
      }

      var sheet = new _sheet.Sheet({
        name,
        file: this,
        selected: this.sheets.length === 0
      });
      this.sheet[name] = sheet;
      this.sheets.push(sheet);
      return sheet;
    }
    /**
     * Save the File to an xlsx file.
     * @param  {String} [type='nodebuffer'] For Node.js use `nodebuffer` and browser use `blob` or `base64`.
     * @param {Boolean} [compress=false] For file compression.
     * @return {Promise|stream} For Node.js return `stream` and browser return Promise.
     */

  }, {
    key: "saveAs",
    value: function saveAs() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'nodebuffer';
      var compress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var parts = this.makeParts();
      var zip = new _jszip.default();

      for (var _i = 0, _Object$keys = Object.keys(parts); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];
        zip.file(key, parts[key]);
      }

      var compression = compress ? 'DEFLATE' : 'STORE';

      if (type === 'blob' || type === 'base64') {
        return zip.generateAsync({
          type,
          compression
        });
      } else {
        return zip.generateNodeStream({
          type: 'nodebuffer',
          compression
        });
      }
    }
    /**
     * @private
     * @return {Object} XML files mapping object
     */

  }, {
    key: "makeParts",
    value: function makeParts() {
      var parts = {};
      var refTable = new _reftable.RefTable();
      var types = (0, _xmlContentTypes.makeXTypes)();
      var workbook = (0, _xmlWorkbook.makeXworkbook)();
      this.styles.reset();
      var i = 1;
      var sheets = new _xmlWorkbook.Xsheets();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.sheets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var sheet = _step.value;
          var xSheet = sheet.makeXSheet(refTable, this.styles);
          types.children.push(new _xmlContentTypes.XOverride({
            PartName: `/xl/worksheets/sheet${i}.xml`,
            ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'
          }));
          sheets.children.push(new _xmlWorkbook.Xsheet({
            name: sheet.name,
            sheetId: i,
            'r:id': `rId${i}`,
            state: 'visible'
          }));
          parts[`xl/worksheets/sheet${i}.xml`] = xSheet.render();
          i++;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      workbook.sheets = sheets;
      parts['xl/workbook.xml'] = workbook.render();
      parts['_rels/.rels'] = templates.DOT_RELS;
      parts['docProps/app.xml'] = templates.DOCPROPS_APP;
      parts['docProps/core.xml'] = templates.DOCPROPS_CORE;
      parts['xl/theme/theme1.xml'] = templates.XL_THEME_THEME;
      parts['xl/sharedStrings.xml'] = refTable.makeXsst().render();
      parts['xl/_rels/workbook.xml.rels'] = (0, _xmlWorkbook.makeWorkbookRels)(this.sheets.length).render();
      parts['[Content_Types].xml'] = types.render();
      parts['xl/styles.xml'] = this.styles.render();
      return parts;
    }
  }]);
  return File;
}();

exports.File = File;
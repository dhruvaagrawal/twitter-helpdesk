{"ast":null,"code":"var _jsxFileName = \"/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/universal-search/index.js\";\nimport React, { useState } from 'react';\nimport { Input, Card, Typography, Form, Tag, Table } from 'antd';\nimport utils from 'utils';\nimport { getLangColor, getCustomerColor, getProductColor, getTransactionColor, getUserColor, getCategoryColor, getTypeColor, getSegmentColor } from 'constants/TagColor';\nimport axios from 'axios'; // import { fetchSearchData } from 'assets/functions/FetchData'\n\nconst {\n  Search\n} = Input;\nconst {\n  Title,\n  Paragraph\n} = Typography;\n\nconst fetchSearchData = value => {};\n\nexport default function UniversalSearch() {\n  const [esData, setEsData] = useState([]);\n  const [isChecked, setIsChecked] = useState(false);\n\n  const onSearch = async value => {\n    let emptyArray = [];\n    await axios({\n      method: 'get',\n      url: `https://68ef17ae206a41b485fa164d62a92012.us-east-1.aws.found.io:9243/sc_transaction_demo_v2/_search?q=${value}&size=10000`,\n      auth: {\n        username: 'sp_es_write',\n        password: 'JxpZzs8hRV4X7'\n      }\n    }).then(res => {\n      res.data.hits.hits.map(row => emptyArray.push(row._source));\n      console.log(emptyArray);\n      console.log(isChecked);\n      setEsData([]);\n      setEsData(emptyArray);\n    });\n    setIsChecked(true);\n  };\n\n  const tableColumns = [{\n    title: 'Customer Name',\n    key: 'customer_name',\n    dataIndex: 'customer_name',\n    render: (_, record) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Tag, {\n      color: getCustomerColor(record.customer_name),\n      style: {\n        letterSpacing: '1px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 6\n      }\n    }, record.customer_name)),\n    sorter: (a, b) => utils.antdTableSorter(a, b, 'customer_name'),\n    colSpan: 1,\n    width: '5%'\n  }, {\n    title: 'Content Name',\n    key: 'content_name',\n    dataIndex: 'content_name',\n    render: (_, record) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontSize: '0.75rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 6\n      }\n    }, record.content_name)),\n    sorter: (a, b) => utils.antdTableSorter(a, b, 'content_name'),\n    colSpan: 1,\n    width: '8.5%'\n  }, {\n    title: 'Product',\n    key: 'product',\n    dataIndex: 'product',\n    render: (_, record) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tag, {\n      color: getProductColor(record.product),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, record.product)),\n    sorter: (a, b) => utils.antdTableSorter(a, b, 'product'),\n    colSpan: 1\n  }, {\n    title: 'Segment',\n    key: 'segment',\n    dataIndex: 'segment',\n    render: (_, record) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tag, {\n      color: getSegmentColor(record.segment),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, record.segment)),\n    sorter: (a, b) => utils.antdTableSorter(a, b, 'segment'),\n    colSpan: 1\n  }, {\n    title: 'Type',\n    key: 'type',\n    dataIndex: 'type',\n    render: (_, record) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tag, {\n      color: getTypeColor(record.type),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, record.type)),\n    sorter: (a, b) => utils.antdTableSorter(a, b, 'type'),\n    colSpan: 1\n  }, {\n    title: 'Level',\n    key: 'level',\n    dataIndex: 'level',\n    render: (_, record) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tag, {\n      color: record.level === 1 ? 'gold' : record.level === 2 ? 'orange' : 'red',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, record.level)),\n    sorter: (a, b) => Number(a.level) - Number(b.level),\n    colSpan: 1\n  }, {\n    title: 'Category',\n    key: 'category',\n    dataIndex: 'category',\n    render: (_, record) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tag, {\n      color: getCategoryColor(record.category),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, record.category)),\n    sorter: (a, b) => utils.antdTableSorter(a, b, 'category'),\n    colSpan: 1\n  }, {\n    title: 'Language',\n    key: 'language',\n    dataIndex: 'language',\n    render: (_, record) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tag, {\n      color: getLangColor(record.language),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }\n    }, record.language)),\n    sorter: (a, b) => utils.antdTableSorter(a, b, 'language'),\n    colSpan: 1\n  }, {\n    title: 'Content',\n    key: 'content',\n    dataIndex: 'content',\n    render: (_, record) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontSize: '0.75rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 5\n      }\n    }, record.content)),\n    sorter: (a, b) => utils.antdTableSorter(a, b, 'content'),\n    colSpan: 1,\n    width: '15%'\n  }, {\n    title: 'Translated Content',\n    key: 'translated_content',\n    dataIndex: 'translated_content',\n    render: (_, record) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 5\n      }\n    }, record.translated_content)),\n    sorter: (a, b) => utils.antdTableSorter(a, b, 'translated_content'),\n    colSpan: 1\n  }, {\n    title: 'Version',\n    dataIndex: 'version',\n    key: 'version',\n    render: (_, record) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tag, {\n      color: record.version === 1 ? 'geekblue' : 'success',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 7\n      }\n    }, record.version)),\n    sorter: (a, b) => a.version - b.version,\n    colSpan: 1\n  }, {\n    title: 'Transaction Status',\n    key: 'status',\n    dataIndex: 'status',\n    render: (_, record) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tag, {\n      color: getTransactionColor(record.status),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 7\n      }\n    }, record.status)),\n    sorter: (a, b) => utils.antdTableSorter(a, b, 'status'),\n    colSpan: 1\n  }, {\n    title: 'Last Updated',\n    key: 'last_updated_on',\n    dataIndex: 'last_updated_on',\n    render: (_, record) => /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 5\n      }\n    }, record.last_updated_on.split(' GMT')[0]),\n    sorter: (a, b) => utils.antdTableSorter(a, b, 'last_updated_on'),\n    colSpan: 1\n  }, {\n    title: 'Last Updated By',\n    key: 'last_updated_by',\n    dataIndex: 'last_updated_by',\n    render: (_, record) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tag, {\n      color: getUserColor(record.last_updated_by),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 7\n      }\n    }, record.last_updated_by)),\n    sorter: (a, b) => utils.antdTableSorter(a, b, 'last_updated_by'),\n    colSpan: 1\n  }, {\n    title: 'Recording Link',\n    key: 'recording_link',\n    dataIndex: 'recording_link',\n    render: (_, record) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 5\n      }\n    }, record.recording_link)),\n    sorter: (a, b) => utils.antdTableSorter(a, b, 'recording_link'),\n    colSpan: 1\n  }];\n\n  const showTable = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-responsive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      bordered: true,\n      columns: tableColumns,\n      dataSource: esData,\n      rowKey: \"content_name\",\n      scroll: {\n        x: 2500\n      },\n      pagination: {\n        pageSize: 10\n      },\n      showQuickJumper: true,\n      responsive: true,\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    justify: \"center\",\n    style: {\n      textAlign: 'center',\n      marginTop: '1.5%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 21\n    }\n  }, \"Spocto Content Search\")), /*#__PURE__*/React.createElement(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    placeholder: \"Input Search Text\",\n    onSearch: onSearch,\n    style: {\n      width: '100%'\n    },\n    allowClear: true,\n    enterButton: true,\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Paragraph, {\n    className: \"mt-2 ml-2\",\n    style: {\n      fontSize: '0.7rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 21\n    }\n  }, \"Type Client Name, Language, Product, Category etc... e.g. ICICI Bank, Axis Bank or English, Hindi or Loan, Credit Card or Basic, Detailed\"))), isChecked && showTable(), console.log(esData));\n}","map":{"version":3,"sources":["/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/universal-search/index.js"],"names":["React","useState","Input","Card","Typography","Form","Tag","Table","utils","getLangColor","getCustomerColor","getProductColor","getTransactionColor","getUserColor","getCategoryColor","getTypeColor","getSegmentColor","axios","Search","Title","Paragraph","fetchSearchData","value","UniversalSearch","esData","setEsData","isChecked","setIsChecked","onSearch","emptyArray","method","url","auth","username","password","then","res","data","hits","map","row","push","_source","console","log","tableColumns","title","key","dataIndex","render","_","record","customer_name","letterSpacing","sorter","a","b","antdTableSorter","colSpan","width","fontSize","content_name","product","segment","type","level","Number","category","language","content","translated_content","version","status","last_updated_on","split","last_updated_by","recording_link","showTable","x","pageSize","textAlign","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Input, Card, Typography, Form, Tag, Table } from 'antd'\nimport utils from 'utils'\nimport { getLangColor, getCustomerColor, getProductColor, getTransactionColor, getUserColor, getCategoryColor, getTypeColor, getSegmentColor } from 'constants/TagColor'\nimport axios from 'axios'\n// import { fetchSearchData } from 'assets/functions/FetchData'\n\nconst { Search } = Input\nconst { Title, Paragraph } = Typography\n\nconst fetchSearchData = value => {\n\n}\n\nexport default function UniversalSearch() {\n\n    const [ esData, setEsData ] = useState([])\n    const [ isChecked, setIsChecked ] = useState(false)\n\n    const onSearch = async value => {\n        \n        let emptyArray = []\n\n        await axios({\n            method: 'get',\n            url: `https://68ef17ae206a41b485fa164d62a92012.us-east-1.aws.found.io:9243/sc_transaction_demo_v2/_search?q=${value}&size=10000`,\n            auth: {\n                username: 'sp_es_write',\n                password: 'JxpZzs8hRV4X7'\n            }\n        })\n        .then( res => { \n            res.data.hits.hits.map( row => emptyArray.push(row._source) )\n            console.log(emptyArray)\n            console.log(isChecked)\n            setEsData([])\n            setEsData(emptyArray)\n        })\n\n        setIsChecked(true)\n    }\n\n    const tableColumns = [\n\t\t{\n\t\t\ttitle: 'Customer Name',\n\t\t\tkey: 'customer_name',\n\t\t\tdataIndex: 'customer_name',\n\t\t\trender: (_, record) => (\n\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t\t<Tag color={ getCustomerColor(record.customer_name) } style={{ letterSpacing: '1px' }}>{ record.customer_name }</Tag>\n\t\t\t\t</div>\n\t\t\t),\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'customer_name'),\n\t\t\tcolSpan: 1,\n\t\t\twidth: '5%'\n        },\n\t\t{\n\t\t\ttitle: 'Content Name',\n\t\t\tkey: 'content_name',\n\t\t\tdataIndex: 'content_name',\n\t\t\trender: (_, record) => (\n\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t\t<span style={{ fontSize: '0.75rem'}}>{ record.content_name }</span>\n\t\t\t\t</div>\n\t\t\t),\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'content_name'),\n\t\t\tcolSpan: 1,\n\t\t\twidth: '8.5%'\n        },\n        {\n\t\t\ttitle: 'Product',\n\t\t\tkey: 'product',\n\t\t\tdataIndex: 'product',\n            render: (_, record) => (\n\t\t\t\t<><Tag color={ getProductColor(record.product) }>{ record.product }</Tag></>\n\t\t\t),\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'product'),\n\t\t\tcolSpan: 1\n        },\n        {\n\t\t\ttitle: 'Segment',\n\t\t\tkey: 'segment',\n\t\t\tdataIndex: 'segment',\n            render: (_, record) => (\n\t\t\t\t<><Tag color={ getSegmentColor(record.segment) }>{ record.segment }</Tag></>\t\n\t\t\t),\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'segment'),\n\t\t\tcolSpan: 1\n        },\n        {\n\t\t\ttitle: 'Type',\n\t\t\tkey: 'type',\n\t\t\tdataIndex: 'type',\n            render: (_, record) => (\n\t\t\t\t<><Tag color={ getTypeColor(record.type) }>{ record.type }</Tag></>\t\n\t\t\t),\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'type'),\n\t\t\tcolSpan: 1\n        },\n        {\n\t\t\ttitle: 'Level',\n\t\t\tkey: 'level',\n\t\t\tdataIndex: 'level',\n            render: (_, record) => (\n\t\t\t\t<><Tag color={ record.level === 1 ? 'gold' : record.level === 2 ? 'orange' : 'red' }>{ record.level }</Tag></>\t\n\t\t\t),\n\t\t\tsorter: (a, b) => Number(a.level) - Number(b.level),\n\t\t\tcolSpan: 1\n        },\n        {\n\t\t\ttitle: 'Category',\n\t\t\tkey: 'category',\n\t\t\tdataIndex: 'category',\n            render: (_, record) => (\n\t\t\t\t<><Tag color={ getCategoryColor(record.category) }>{ record.category }</Tag></>\t\n\t\t\t),\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'category'),\n\t\t\tcolSpan: 1\n\t\t},\n\t\t{\n\t\t\ttitle: 'Language',\n\t\t\tkey: 'language',\n\t\t\tdataIndex: 'language',\n            render: (_, record) => (\n\t\t\t\t<><Tag color={ getLangColor(record.language) }>{ record.language }</Tag></>\n\t\t\t),\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'language'),\n\t\t\tcolSpan: 1\n\t\t},\n\t\t{\n\t\t\ttitle: 'Content',\n\t\t\tkey: 'content',\n\t\t\tdataIndex: 'content',\n            render: (_, record) => (\n\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t<span style={{ fontSize: '0.75rem'}}>{ record.content }</span>\n\t\t\t</div>\n\t\t\t),\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'content'),\n\t\t\tcolSpan: 1,\n\t\t\twidth: '15%'\n\t\t},\n\t\t{\n\t\t\ttitle: 'Translated Content',\n\t\t\tkey: 'translated_content',\n\t\t\tdataIndex: 'translated_content',\n\t\t\trender: (_, record) => (\n\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t<span>{ record.translated_content }</span>\n\t\t\t</div>\n\t\t\t),\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'translated_content'),\n\t\t\tcolSpan: 1,\n\t\t},\n\t\t{\n\t\t\ttitle: 'Version',\n\t\t\tdataIndex: 'version',\n\t\t\tkey: 'version',\n            render: (_, record) => (\n\t\t\t\t<><Tag color={ record.version === 1 ? 'geekblue' : 'success' }>{ record.version }</Tag></>\n\t\t\t),\n\t\t\tsorter: (a, b) => a.version - b.version,\n\t\t\tcolSpan: 1\n\t\t},\n        {\n\t\t\ttitle: 'Transaction Status',\n\t\t\tkey: 'status',\n\t\t\tdataIndex: 'status',\n\t\t\trender: (_, record) => (\n\t\t\t\t<><Tag color={ getTransactionColor(record.status) }>{ record.status }</Tag></>\n\t\t\t),\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'status'),\n\t\t\tcolSpan: 1\n\t\t},\n        {\n\t\t\ttitle: 'Last Updated',\n\t\t\tkey: 'last_updated_on',\n\t\t\tdataIndex: 'last_updated_on',\n\t\t\trender: (_, record) => (\n\t\t\t\t<span>{ record.last_updated_on.split(' GMT')[0] }</span>\n\t\t\t),\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'last_updated_on'),\n\t\t\tcolSpan: 1\n\t\t},\n\t\t{\n\t\t\ttitle: 'Last Updated By',\n\t\t\tkey: 'last_updated_by',\n\t\t\tdataIndex: 'last_updated_by',\n\t\t\trender: (_, record) => (\n\t\t\t\t<><Tag color={ getUserColor(record.last_updated_by) }>{ record.last_updated_by }</Tag></>\n\t\t\t),\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'last_updated_by'),\n\t\t\tcolSpan: 1\n\t\t},\n\t\t{\n\t\t\ttitle: 'Recording Link',\n\t\t\tkey: 'recording_link',\n\t\t\tdataIndex: 'recording_link',\n\t\t\trender: (_, record) => (\n\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t<span>{ record.recording_link }</span>\n\t\t\t</div>\n\t\t\t),\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'recording_link'),\n\t\t\tcolSpan: 1\n\t\t}\n    ]\n    \n    const showTable = () => {\n        return (\n            <div className=\"table-responsive\">\n                <Table\n                    bordered\n                    columns={ tableColumns } \n                    dataSource={ esData } \n                    rowKey='content_name' \n                    scroll={{ x: 2500 }}\n                    pagination={{ pageSize: 10 }}\n                    showQuickJumper\n                    responsive={ true }\n                    size=\"small\"\n                />\n            </div>\n        )\n    }\n\n    return (\n        <Card>\n            <Form>\n                <Form.Item justify=\"center\" style={{ textAlign: 'center', marginTop: '1.5%' }}>\n                    <Title>Spocto Content Search</Title>\n                </Form.Item>\n                <Form.Item>\n                    <Search \n                        placeholder=\"Input Search Text\" \n                        onSearch={ onSearch } \n                        style={{ width: '100%' }}                     \n                        allowClear\n                        enterButton\n                        size=\"large\" \n                    />\n                    <Paragraph className=\"mt-2 ml-2\" style={{ fontSize: '0.7rem'}}>Type Client Name, Language, Product, Category etc... e.g. ICICI Bank, Axis Bank or English, Hindi or Loan, Credit Card or Basic, Detailed</Paragraph>\n                </Form.Item>\n            </Form>\n            {  isChecked && showTable() }\n            { console.log(esData) }\n        </Card>\n    )\n}"]},"metadata":{},"sourceType":"module"}
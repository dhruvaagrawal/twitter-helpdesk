{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.File = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _sheet = require(\"./sheet\");\n\nvar templates = _interopRequireWildcard(require(\"./templates\"));\n\nvar _reftable = require(\"./reftable\");\n\nvar _xmlWorkbook = require(\"./xmlWorkbook\");\n\nvar _xmlContentTypes = require(\"./xmlContentTypes\");\n\nvar _xmlStyle = require(\"./xmlStyle\");\n\nvar _jszip = _interopRequireDefault(require(\"jszip\"));\n/**\n * This is the main class, use it:\n *\n * ```js\n * import { File } from 'better-xlsx';\n * const file = new File();\n * const sheet = file.addSheet('Sheet-1');\n * ```\n *\n * @class File\n */\n\n\nvar File = /*#__PURE__*/function () {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  function File() {\n    (0, _classCallCheck2.default)(this, File);\n    (0, _defineProperty2.default)(this, \"sheet\", {});\n    (0, _defineProperty2.default)(this, \"sheets\", []);\n    (0, _defineProperty2.default)(this, \"definedNames\", []);\n    /**\n     * @private\n     */\n\n    this.styles = new _xmlStyle.XstyleSheet({});\n  }\n  /**\n   * Add a new Sheet, with the provided name, to a File\n   * @param {String} name Name of the Sheet\n   * @return {Sheet}\n   */\n\n\n  (0, _createClass2.default)(File, [{\n    key: \"addSheet\",\n    value: function addSheet(name) {\n      if (this.sheet[name]) {\n        throw new Error(`duplicate sheet name ${name}.`);\n      }\n\n      var sheet = new _sheet.Sheet({\n        name,\n        file: this,\n        selected: this.sheets.length === 0\n      });\n      this.sheet[name] = sheet;\n      this.sheets.push(sheet);\n      return sheet;\n    }\n    /**\n     * Save the File to an xlsx file.\n     * @param  {String} [type='nodebuffer'] For Node.js use `nodebuffer` and browser use `blob` or `base64`.\n     * @param {Boolean} [compress=false] For file compression.\n     * @return {Promise|stream} For Node.js return `stream` and browser return Promise.\n     */\n\n  }, {\n    key: \"saveAs\",\n    value: function saveAs() {\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'nodebuffer';\n      var compress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var parts = this.makeParts();\n      var zip = new _jszip.default();\n\n      for (var _i = 0, _Object$keys = Object.keys(parts); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        zip.file(key, parts[key]);\n      }\n\n      var compression = compress ? 'DEFLATE' : 'STORE';\n\n      if (type === 'blob' || type === 'base64') {\n        return zip.generateAsync({\n          type,\n          compression\n        });\n      } else {\n        return zip.generateNodeStream({\n          type: 'nodebuffer',\n          compression\n        });\n      }\n    }\n    /**\n     * @private\n     * @return {Object} XML files mapping object\n     */\n\n  }, {\n    key: \"makeParts\",\n    value: function makeParts() {\n      var parts = {};\n      var refTable = new _reftable.RefTable();\n      var types = (0, _xmlContentTypes.makeXTypes)();\n      var workbook = (0, _xmlWorkbook.makeXworkbook)();\n      this.styles.reset();\n      var i = 1;\n      var sheets = new _xmlWorkbook.Xsheets();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.sheets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var sheet = _step.value;\n          var xSheet = sheet.makeXSheet(refTable, this.styles);\n          types.children.push(new _xmlContentTypes.XOverride({\n            PartName: `/xl/worksheets/sheet${i}.xml`,\n            ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'\n          }));\n          sheets.children.push(new _xmlWorkbook.Xsheet({\n            name: sheet.name,\n            sheetId: i,\n            'r:id': `rId${i}`,\n            state: 'visible'\n          }));\n          parts[`xl/worksheets/sheet${i}.xml`] = xSheet.render();\n          i++;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      workbook.sheets = sheets;\n      parts['xl/workbook.xml'] = workbook.render();\n      parts['_rels/.rels'] = templates.DOT_RELS;\n      parts['docProps/app.xml'] = templates.DOCPROPS_APP;\n      parts['docProps/core.xml'] = templates.DOCPROPS_CORE;\n      parts['xl/theme/theme1.xml'] = templates.XL_THEME_THEME;\n      parts['xl/sharedStrings.xml'] = refTable.makeXsst().render();\n      parts['xl/_rels/workbook.xml.rels'] = (0, _xmlWorkbook.makeWorkbookRels)(this.sheets.length).render();\n      parts['[Content_Types].xml'] = types.render();\n      parts['xl/styles.xml'] = this.styles.render();\n      return parts;\n    }\n  }]);\n  return File;\n}();\n\nexports.File = File;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Cell = exports.CellType = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _style = require(\"./style\");\n\nvar _lib = require(\"./lib\");\n\nvar _kindOf = _interopRequireDefault(require(\"kind-of\"));\n\nvar CellType = {\n  TypeString: 49,\n  TypeFormula: 0,\n  TypeNumeric: 1,\n  TypeBool: 0,\n  TypeInline: 0,\n  TypeError: 0,\n  TypeDate: 14,\n  TypeGeneral: 0\n};\n/**\n * Cell intended to provide user access to the contents of Cell within an xlsx.Row.\n *\n * ```js\n * const cell = row.addCell();\n * cell.value = 'I am a cell!';\n * cell.hMerge = 2;\n * cell.vMerge = 1;\n * cell.style.fill.patternType = 'solid';\n * cell.style.fill.fgColor = '00FF0000';\n * cell.style.fill.bgColor = 'FF000000';\n * cell.style.align.h = 'center';\n * cell.style.align.v = 'center';\n * ```\n *\n * Set the cell value\n *\n * ```js\n * const cell = row.addCell();\n * // Date type\n * cell.setDate(new Date());\n * // Number type\n * cell.setNumber(123456);\n * cell.numFmt = '$#,##0.00';\n * ```\n */\n\nexports.CellType = CellType;\n\nvar Cell = /*#__PURE__*/function () {\n  /**\n   * Number format @see {@link NumFmt}\n   * @type {String}\n   */\n\n  /**\n   * Hide the cell.\n   * @type {Boolean}\n   */\n\n  /**\n   * Horizontal merge with other cells.\n   * @type {Number}\n   */\n\n  /**\n   * Vertical merge with other cells.\n   * @type {Number}\n   */\n\n  /**\n   * Create a cell and add it to a row.\n   * @private\n   * @param  {Object} options.row Row of add to\n   */\n  function Cell(_ref) {\n    var row = _ref.row;\n    (0, _classCallCheck2.default)(this, Cell);\n    (0, _defineProperty2.default)(this, \"_value\", '');\n    (0, _defineProperty2.default)(this, \"_style\", null);\n    (0, _defineProperty2.default)(this, \"formula\", '');\n    (0, _defineProperty2.default)(this, \"numFmt\", '');\n    (0, _defineProperty2.default)(this, \"date1904\", false);\n    (0, _defineProperty2.default)(this, \"hidden\", false);\n    (0, _defineProperty2.default)(this, \"hMerge\", 0);\n    (0, _defineProperty2.default)(this, \"vMerge\", 0);\n    (0, _defineProperty2.default)(this, \"cellType\", 'TypeString');\n    this.row = row;\n  }\n  /**\n   * Get the cell style.\n   * @return {Style}\n   */\n\n\n  (0, _createClass2.default)(Cell, [{\n    key: \"setString\",\n\n    /**\n     * Set cell value with String type.\n     * @param {String} v\n     */\n    value: function setString(v) {\n      this._value = v;\n      this.formula = '';\n      this.cellType = 'TypeString';\n    }\n    /**\n     * Set cell value with Date type.\n     * @param {Date} v\n     */\n\n  }, {\n    key: \"setDate\",\n    value: function setDate(v) {\n      this._value = parseInt((0, _lib.toExcelTime)(v));\n      this.formula = '';\n      this.numFmt = _lib.NumFmt[14];\n      this.cellType = 'TypeDate';\n    }\n    /**\n     * Set cell value with DateTime type.\n     * @param {Date} v\n     */\n\n  }, {\n    key: \"setDateTime\",\n    value: function setDateTime(v) {\n      this._value = (0, _lib.toExcelTime)(v);\n      this.formula = '';\n      this.numFmt = _lib.NumFmt[22];\n      this.cellType = 'TypeDate';\n    }\n    /**\n     * Set cell value with Number type.\n     * @param {Number} v\n     */\n\n  }, {\n    key: \"setNumber\",\n    value: function setNumber(v) {\n      this._value = v;\n      this.formula = '';\n      this.numFmt = _lib.NumFmt[0];\n      this.cellType = 'TypeNumeric';\n    }\n    /**\n     * Set cell value with Boolean type.\n     * @param {Boolean} v\n     */\n\n  }, {\n    key: \"setBool\",\n    value: function setBool(v) {\n      this._value = v ? 1 : 0;\n      this.cellType = 'TypeBool';\n    }\n    /**\n     * Set cell formula.\n     * @param {String} f - Formula like `B2*C2-D2`.\n     */\n\n  }, {\n    key: \"setFormula\",\n    value: function setFormula(f) {\n      this.formula = f;\n      this.cellType = 'TypeFormula';\n    }\n  }, {\n    key: \"style\",\n    get: function get() {\n      if (this._style === null) {\n        this._style = new _style.Style();\n      }\n\n      return this._style;\n    }\n    /**\n     * Set the style of the cell.\n     * @param  {Style} s\n     */\n    ,\n    set: function set(s) {\n      this._style = s;\n    }\n    /**\n     * Get the cell value.\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * Set the cell value.\n     * @param  {String|Date|Number|Boolean} v\n     */\n    ,\n    set: function set(v) {\n      var t = (0, _kindOf.default)(v);\n\n      if (t === 'null' || t === 'undefined') {\n        return this.setString('');\n      }\n\n      if (t === 'date') {\n        return this.setDateTime(v);\n      }\n\n      if (t === 'number') {\n        return this.setNumber(v);\n      }\n\n      if (t === 'string') {\n        return this.setString(v);\n      }\n\n      if (t === 'boolean') {\n        return this.setBool(v);\n      }\n\n      return this.setString(v.toString());\n    }\n  }]);\n  return Cell;\n}();\n\nexports.Cell = Cell;","map":null,"metadata":{},"sourceType":"script"}
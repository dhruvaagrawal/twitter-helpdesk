{"ast":null,"code":"/*\nusage:\n\n// do something to a list of things\nasyncMap(myListOfStuff, function (thing, cb) { doSomething(thing.foo, cb) }, cb)\n// do more than one thing to each item\nasyncMap(list, fooFn, barFn, cb)\n\n*/\nmodule.exports = asyncMap;\n\nfunction asyncMap() {\n  var steps = Array.prototype.slice.call(arguments),\n      list = steps.shift() || [],\n      cb_ = steps.pop();\n  if (typeof cb_ !== \"function\") throw new Error(\"No callback provided to asyncMap\");\n  if (!list) return cb_(null, []);\n  if (!Array.isArray(list)) list = [list];\n  var n = steps.length,\n      data = [] // 2d array\n  ,\n      errState = null,\n      l = list.length,\n      a = l * n;\n  if (!a) return cb_(null, []);\n\n  function cb(er) {\n    if (er && !errState) errState = er;\n    var argLen = arguments.length;\n\n    for (var i = 1; i < argLen; i++) if (arguments[i] !== undefined) {\n      data[i - 1] = (data[i - 1] || []).concat(arguments[i]);\n    } // see if any new things have been added.\n\n\n    if (list.length > l) {\n      var newList = list.slice(l);\n      a += (list.length - l) * n;\n      l = list.length;\n      process.nextTick(function () {\n        newList.forEach(function (ar) {\n          steps.forEach(function (fn) {\n            fn(ar, cb);\n          });\n        });\n      });\n    }\n\n    if (--a === 0) cb_.apply(null, [errState].concat(data));\n  } // expect the supplied cb function to be called\n  // \"n\" times for each thing in the array.\n\n\n  list.forEach(function (ar) {\n    steps.forEach(function (fn) {\n      fn(ar, cb);\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"module.exports = ProtoList;\n\nfunction setProto(obj, proto) {\n  if (typeof Object.setPrototypeOf === \"function\") return Object.setPrototypeOf(obj, proto);else obj.__proto__ = proto;\n}\n\nfunction ProtoList() {\n  this.list = [];\n  var root = null;\n  Object.defineProperty(this, 'root', {\n    get: function () {\n      return root;\n    },\n    set: function (r) {\n      root = r;\n\n      if (this.list.length) {\n        setProto(this.list[this.list.length - 1], r);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nProtoList.prototype = {\n  get length() {\n    return this.list.length;\n  },\n\n  get keys() {\n    var k = [];\n\n    for (var i in this.list[0]) k.push(i);\n\n    return k;\n  },\n\n  get snapshot() {\n    var o = {};\n    this.keys.forEach(function (k) {\n      o[k] = this.get(k);\n    }, this);\n    return o;\n  },\n\n  get store() {\n    return this.list[0];\n  },\n\n  push: function (obj) {\n    if (typeof obj !== \"object\") obj = {\n      valueOf: obj\n    };\n\n    if (this.list.length >= 1) {\n      setProto(this.list[this.list.length - 1], obj);\n    }\n\n    setProto(obj, this.root);\n    return this.list.push(obj);\n  },\n  pop: function () {\n    if (this.list.length >= 2) {\n      setProto(this.list[this.list.length - 2], this.root);\n    }\n\n    return this.list.pop();\n  },\n  unshift: function (obj) {\n    setProto(obj, this.list[0] || this.root);\n    return this.list.unshift(obj);\n  },\n  shift: function () {\n    if (this.list.length === 1) {\n      setProto(this.list[0], this.root);\n    }\n\n    return this.list.shift();\n  },\n  get: function (key) {\n    return this.list[0][key];\n  },\n  set: function (key, val, save) {\n    if (!this.length) this.push({});\n    if (save && this.list[0].hasOwnProperty(key)) this.push({});\n    return this.list[0][key] = val;\n  },\n  forEach: function (fn, thisp) {\n    for (var key in this.list[0]) fn.call(thisp, key, this.list[0][key]);\n  },\n  slice: function () {\n    return this.list.slice.apply(this.list, arguments);\n  },\n  splice: function () {\n    // handle injections\n    var ret = this.list.splice.apply(this.list, arguments);\n\n    for (var i = 0, l = this.list.length; i < l; i++) {\n      setProto(this.list[i], this.list[i + 1] || this.root);\n    }\n\n    return ret;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}
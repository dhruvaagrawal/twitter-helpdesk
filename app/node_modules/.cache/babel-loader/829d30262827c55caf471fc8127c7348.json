{"ast":null,"code":"var _jsxFileName = \"/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/journeys/journey-ivr/taskTracker/index.js\";\nimport React, { useContext } from 'react';\nimport { ScrumboardProvider, ScrumboardContext } from './ScrumboardContext';\nimport Board from './Board';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { Avatar } from 'antd';\nimport reorder, { reorderQuoteMap } from './reorder';\nimport { memberIds } from './ScrumboardData';\nimport ModalForm from './ModalForm';\nimport { modalModeTypes, createCardObject, AssigneeAvatar } from './utils';\nimport { Scrollbars } from 'react-custom-scrollbars';\n\nconst ScrumboardWrapper = props => {\n  const {\n    ordered,\n    columns,\n    modal,\n    cardData,\n    currentListId,\n    modalMode,\n    updateOrdered,\n    updateColumns,\n    updateModal,\n    updateCurrentListId\n  } = useContext(ScrumboardContext);\n\n  const onDragEnd = result => {\n    if (result.combine) {\n      if (result.type === 'COLUMN') {\n        const shallow = [...ordered];\n        shallow.splice(result.source.index, 1);\n        updateOrdered(shallow);\n        return;\n      }\n\n      const column = columns[result.source.droppableId];\n      const withQuoteRemoved = [...column];\n      withQuoteRemoved.splice(result.source.index, 1);\n      const newColumns = { ...columns,\n        [result.source.droppableId]: withQuoteRemoved\n      };\n      updateColumns(newColumns);\n      return;\n    }\n\n    if (!result.destination) {\n      return;\n    }\n\n    const source = result.source;\n    const destination = result.destination;\n\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\n      return;\n    }\n\n    if (result.type === 'COLUMN') {\n      const newOrdered = reorder(ordered, source.index, destination.index);\n      updateOrdered(newOrdered);\n      return;\n    }\n\n    const data = reorderQuoteMap({\n      quoteMap: columns,\n      source,\n      destination\n    });\n    updateColumns(data.quoteMap);\n  };\n\n  const onCloseModal = () => {\n    updateModal(false);\n  };\n\n  const onModalSubmit = (values, mode) => {\n    const data = columns;\n\n    if (mode === modalModeTypes(0)) {\n      let newCard = createCardObject();\n      newCard.name = values.cardTitle ? values.cardTitle : 'Untitled Card';\n      data[currentListId].push(newCard);\n      updateColumns(data);\n      updateModal(false);\n      updateCurrentListId('');\n    }\n\n    if (mode === modalModeTypes(1)) {\n      const updatadedCard = data[currentListId].map(elm => {\n        if (values.id === elm.id) {\n          elm = values;\n        }\n\n        return elm;\n      });\n      data[currentListId] = updatadedCard;\n      updateColumns(data);\n      updateModal(false);\n    }\n\n    if (mode === modalModeTypes(2)) {\n      data[values.boardTitle ? values.boardTitle : 'Untitled Board'] = [];\n      const newOrdered = [...ordered, ...[values.boardTitle ? values.boardTitle : 'Untitled Board']];\n      let newColumns = {};\n      newOrdered.forEach(elm => {\n        newColumns[elm] = data[elm];\n      });\n      updateColumns(newColumns);\n      updateOrdered(Object.keys(newColumns));\n      updateModal(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: result => onDragEnd(result),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 4\n    }\n  }, props.containerHeight ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scrumboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(BoardWrapper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }))) : /*#__PURE__*/React.createElement(BoardWrapper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 6\n    }\n  }))), /*#__PURE__*/React.createElement(ModalForm, {\n    visible: modal,\n    onClose: () => onCloseModal(),\n    onModalSubmit: (values, modalMode) => onModalSubmit(values, modalMode),\n    modalMode: modalMode,\n    cardData: cardData,\n    listId: currentListId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 4\n    }\n  }));\n};\n\nconst BoardWrapper = ({\n  containerHeight,\n  useClone,\n  isCombineEnabled,\n  withScrollableColumns\n}) => {\n  const {\n    ordered,\n    columns,\n    updateModal,\n    updateModalMode\n  } = useContext(ScrumboardContext);\n\n  const onAddBoardModal = () => {\n    updateModal(true);\n    updateModalMode(modalModeTypes(2));\n  };\n\n  return /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"board\",\n    type: \"COLUMN\",\n    direction: \"horizontal\",\n    ignoreContainerClipping: containerHeight,\n    isCombineEnabled: isCombineEnabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 3\n    }\n  }, provided => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    className: \"scrumboard\",\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scrumboard-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 8\n    }\n  }, \"Backlog\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 8\n    }\n  }, memberIds.map((member, i) => i < 4 ? /*#__PURE__*/React.createElement(AssigneeAvatar, {\n    key: member,\n    id: member,\n    size: 30,\n    chain: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 47\n    }\n  }) : null), /*#__PURE__*/React.createElement(Avatar, {\n    className: \"ml-n2\",\n    size: 30,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-gray font-weight-semibold font-size-base\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 10\n    }\n  }, \"+9\"))))), /*#__PURE__*/React.createElement(Scrollbars, {\n    className: \"scrumboard-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 6\n    }\n  }, ordered.map((key, index) => /*#__PURE__*/React.createElement(Board, {\n    key: key,\n    index: index,\n    title: key,\n    contents: columns[key],\n    isScrollable: withScrollableColumns,\n    isCombineEnabled: isCombineEnabled,\n    useClone: useClone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 8\n    }\n  })), provided.placeholder, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-column add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-title\",\n    onClick: () => onAddBoardModal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PlusOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 10\n    }\n  }, \"Add List\")))))));\n};\n\nconst Scrumboard = props => {\n  return /*#__PURE__*/React.createElement(ScrumboardProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(ScrumboardWrapper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 4\n    }\n  })));\n};\n\nexport default Scrumboard;","map":{"version":3,"sources":["/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/journeys/journey-ivr/taskTracker/index.js"],"names":["React","useContext","ScrumboardProvider","ScrumboardContext","Board","DragDropContext","Droppable","PlusOutlined","Avatar","reorder","reorderQuoteMap","memberIds","ModalForm","modalModeTypes","createCardObject","AssigneeAvatar","Scrollbars","ScrumboardWrapper","props","ordered","columns","modal","cardData","currentListId","modalMode","updateOrdered","updateColumns","updateModal","updateCurrentListId","onDragEnd","result","combine","type","shallow","splice","source","index","column","droppableId","withQuoteRemoved","newColumns","destination","newOrdered","data","quoteMap","onCloseModal","onModalSubmit","values","mode","newCard","name","cardTitle","push","updatadedCard","map","elm","id","boardTitle","forEach","Object","keys","containerHeight","BoardWrapper","useClone","isCombineEnabled","withScrollableColumns","updateModalMode","onAddBoardModal","provided","innerRef","droppableProps","member","i","key","placeholder","Scrumboard"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\nimport { ScrumboardProvider, ScrumboardContext } from './ScrumboardContext'\nimport Board from './Board';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { Avatar  } from 'antd';\nimport reorder, { reorderQuoteMap } from './reorder'\nimport { memberIds } from './ScrumboardData';\nimport ModalForm from './ModalForm';\nimport { modalModeTypes, createCardObject, AssigneeAvatar } from './utils';\nimport { Scrollbars } from 'react-custom-scrollbars';\n\nconst ScrumboardWrapper = props => {\n\tconst { \n\t\tordered,\n\t\tcolumns,\n\t\tmodal,\n\t\tcardData,\n\t\tcurrentListId,\n\t\tmodalMode,\n\t\tupdateOrdered,\n\t\tupdateColumns,\n\t\tupdateModal,\n\t\tupdateCurrentListId\n\t} = useContext(ScrumboardContext)\n\n\tconst onDragEnd = result => {\n    if (result.combine) {\n      if (result.type === 'COLUMN') {\n        const shallow = [...ordered];\n        shallow.splice(result.source.index, 1);\n\t\t\t\tupdateOrdered(shallow)\n        return;\n      }\n\n      const column = columns[result.source.droppableId];\n      const withQuoteRemoved = [...column];\n      withQuoteRemoved.splice(result.source.index, 1);\n      const newColumns = {\n        ...columns,\n        [result.source.droppableId]: withQuoteRemoved,\n\t\t\t};\n\t\t\tupdateColumns(newColumns)\n      return;\n    }\n\n    if (!result.destination) {\n      return;\n    }\n\n    const source = result.source;\n    const destination = result.destination;\n\n    if (\n      source.droppableId === destination.droppableId && source.index === destination.index\n    ) {\n      return;\n    }\n\n    if (result.type === 'COLUMN') {\n      const newOrdered = reorder(\n        ordered,\n        source.index,\n        destination.index,\n      );\n\t\t\tupdateOrdered(newOrdered)\n      return;\n    }\n    const data = reorderQuoteMap({\n      quoteMap: columns,\n      source,\n      destination,\n    });\n\t\tupdateColumns(data.quoteMap)\n\t}\n\t\n\tconst onCloseModal = () => {\n\t\tupdateModal(false)\n\t}\n\n\tconst onModalSubmit = (values, mode) => {\n\t\tconst data = columns\n    if(mode === modalModeTypes(0)) {\n\t\t\tlet newCard = createCardObject()\n\t\t\tnewCard.name = values.cardTitle ? values.cardTitle : 'Untitled Card'\n\t\t\tdata[currentListId].push(newCard)\n\t\t\tupdateColumns(data)\n\t\t\tupdateModal(false)\n\t\t\tupdateCurrentListId('')\n    }\n\n    if(mode === modalModeTypes(1)) {\n      const updatadedCard = data[currentListId].map(elm => {\n        if(values.id === elm.id) {\n          elm = values\n        }\n        return elm\n\t\t\t})\n\t  \tdata[currentListId] = updatadedCard\n\t\t\tupdateColumns(data)\n\t\t\tupdateModal(false)\n    }\n\n    if(mode === modalModeTypes(2)) {\n\t\t\tdata[values.boardTitle? values.boardTitle : 'Untitled Board'] = [];\n\t\t\tconst newOrdered = [...ordered, ...[values.boardTitle? values.boardTitle : 'Untitled Board']]\n\t\t\tlet newColumns = {}\n\t\t\tnewOrdered.forEach(elm => {\n\t\t\t\tnewColumns[elm] = data[elm]\n\t\t\t});\n\t\t\tupdateColumns(newColumns)\n\t\t\tupdateOrdered(Object.keys(newColumns))\n\t\t\tupdateModal(false)\n\t\t}\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<DragDropContext onDragEnd={result => onDragEnd(result)}>\n\t\t\t\t{props.containerHeight ? (\n\t\t\t\t\t<div className=\"scrumboard\">\n\t\t\t\t\t\t<BoardWrapper {...props}/>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<BoardWrapper {...props}/>\n\t\t\t\t)}\n\t\t\t</DragDropContext>\n\t\t\t<ModalForm \n\t\t\t\tvisible={modal} \n\t\t\t\tonClose={() => onCloseModal()} \n\t\t\t\tonModalSubmit={(values, modalMode) => onModalSubmit(values, modalMode)}\n\t\t\t\tmodalMode={modalMode}\n\t\t\t\tcardData={cardData}\n\t\t\t\tlistId={currentListId}\n\t\t\t/>\n\t\t</>\n\t)\n}\n\nconst BoardWrapper = ({ containerHeight, useClone, isCombineEnabled, withScrollableColumns }) => {\n\tconst { ordered, columns, updateModal, updateModalMode } = useContext(ScrumboardContext)\n\n\tconst onAddBoardModal = () => {\n\t\tupdateModal(true)\n\t\tupdateModalMode(modalModeTypes(2))\n\t} \n\treturn (\n\t\t<Droppable\n\t\t\tdroppableId=\"board\"\n\t\t\ttype=\"COLUMN\"\n\t\t\tdirection=\"horizontal\"\n\t\t\tignoreContainerClipping={containerHeight}\n\t\t\tisCombineEnabled={isCombineEnabled}\n\t\t>\n\t\t\t{(provided) => (\n\t\t\t\t<div className=\"scrumboard\" ref={provided.innerRef} {...provided.droppableProps}>\n\t\t\t\t\t<div className=\"scrumboard-header\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3>Backlog</h3>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t\t<div className=\"d-flex align-items-center\">\n\t\t\t\t\t\t\t\t{memberIds.map((member, i) => i < 4 ? <AssigneeAvatar key={member} id={member} size={30} chain/> : null)}\n\t\t\t\t\t\t\t\t<Avatar className=\"ml-n2\" size={30}>\n\t\t\t\t\t\t\t\t\t<span className=\"text-gray font-weight-semibold font-size-base\">+9</span>\n\t\t\t\t\t\t\t\t</Avatar>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Scrollbars className=\"scrumboard-body\">\n\t\t\t\t\t\t{ordered.map((key, index) => (\n\t\t\t\t\t\t\t<Board\n\t\t\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\ttitle={key}\n\t\t\t\t\t\t\t\tcontents={columns[key]}\n\t\t\t\t\t\t\t\tisScrollable={withScrollableColumns}\n\t\t\t\t\t\t\t\tisCombineEnabled={isCombineEnabled}\n\t\t\t\t\t\t\t\tuseClone={useClone}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t{provided.placeholder}\n\t\t\t\t\t\t<div className=\"board-column add\">\n\t\t\t\t\t\t\t<div className=\"board-title\" onClick={() => onAddBoardModal()}>\n\t\t\t\t\t\t\t\t<h4 className=\"mb-0\">\n\t\t\t\t\t\t\t\t\t<PlusOutlined />\n\t\t\t\t\t\t\t\t\t<span>Add List</span>\n\t\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Scrollbars>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</Droppable>\n\t)\n}\n\nconst Scrumboard = props => {\n\treturn (\n\t\t<ScrumboardProvider>\n\t\t\t<ScrumboardWrapper {...props} />\n\t\t</ScrumboardProvider>\n\t)\n}\n\nexport default Scrumboard"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n/* istanbul ignore next */\n\n\nconst LCHOWN = fs.lchown ? 'lchown' : 'chown';\n/* istanbul ignore next */\n\nconst LCHOWNSYNC = fs.lchownSync ? 'lchownSync' : 'chownSync';\n/* istanbul ignore next */\n\nconst needEISDIRHandled = fs.lchown && !process.version.match(/v1[1-9]+\\./) && !process.version.match(/v10\\.[6-9]/);\n\nconst lchownSync = (path, uid, gid) => {\n  try {\n    return fs[LCHOWNSYNC](path, uid, gid);\n  } catch (er) {\n    if (er.code !== 'ENOENT') throw er;\n  }\n};\n/* istanbul ignore next */\n\n\nconst chownSync = (path, uid, gid) => {\n  try {\n    return fs.chownSync(path, uid, gid);\n  } catch (er) {\n    if (er.code !== 'ENOENT') throw er;\n  }\n};\n/* istanbul ignore next */\n\n\nconst handleEISDIR = needEISDIRHandled ? (path, uid, gid, cb) => er => {\n  // Node prior to v10 had a very questionable implementation of\n  // fs.lchown, which would always try to call fs.open on a directory\n  // Fall back to fs.chown in those cases.\n  if (!er || er.code !== 'EISDIR') cb(er);else fs.chown(path, uid, gid, cb);\n} : (_, __, ___, cb) => cb;\n/* istanbul ignore next */\n\nconst handleEISDirSync = needEISDIRHandled ? (path, uid, gid) => {\n  try {\n    return lchownSync(path, uid, gid);\n  } catch (er) {\n    if (er.code !== 'EISDIR') throw er;\n    chownSync(path, uid, gid);\n  }\n} : (path, uid, gid) => lchownSync(path, uid, gid); // fs.readdir could only accept an options object as of node v6\n\nconst nodeVersion = process.version;\n\nlet readdir = (path, options, cb) => fs.readdir(path, options, cb);\n\nlet readdirSync = (path, options) => fs.readdirSync(path, options);\n/* istanbul ignore next */\n\n\nif (/^v4\\./.test(nodeVersion)) readdir = (path, options, cb) => fs.readdir(path, cb);\n\nconst chown = (cpath, uid, gid, cb) => {\n  fs[LCHOWN](cpath, uid, gid, handleEISDIR(cpath, uid, gid, er => {\n    // Skip ENOENT error\n    cb(er && er.code !== 'ENOENT' ? er : null);\n  }));\n};\n\nconst chownrKid = (p, child, uid, gid, cb) => {\n  if (typeof child === 'string') return fs.lstat(path.resolve(p, child), (er, stats) => {\n    // Skip ENOENT error\n    if (er) return cb(er.code !== 'ENOENT' ? er : null);\n    stats.name = child;\n    chownrKid(p, stats, uid, gid, cb);\n  });\n\n  if (child.isDirectory()) {\n    chownr(path.resolve(p, child.name), uid, gid, er => {\n      if (er) return cb(er);\n      const cpath = path.resolve(p, child.name);\n      chown(cpath, uid, gid, cb);\n    });\n  } else {\n    const cpath = path.resolve(p, child.name);\n    chown(cpath, uid, gid, cb);\n  }\n};\n\nconst chownr = (p, uid, gid, cb) => {\n  readdir(p, {\n    withFileTypes: true\n  }, (er, children) => {\n    // any error other than ENOTDIR or ENOTSUP means it's not readable,\n    // or doesn't exist.  give up.\n    if (er) {\n      if (er.code === 'ENOENT') return cb();else if (er.code !== 'ENOTDIR' && er.code !== 'ENOTSUP') return cb(er);\n    }\n\n    if (er || !children.length) return chown(p, uid, gid, cb);\n    let len = children.length;\n    let errState = null;\n\n    const then = er => {\n      if (errState) return;\n      if (er) return cb(errState = er);\n      if (--len === 0) return chown(p, uid, gid, cb);\n    };\n\n    children.forEach(child => chownrKid(p, child, uid, gid, then));\n  });\n};\n\nconst chownrKidSync = (p, child, uid, gid) => {\n  if (typeof child === 'string') {\n    try {\n      const stats = fs.lstatSync(path.resolve(p, child));\n      stats.name = child;\n      child = stats;\n    } catch (er) {\n      if (er.code === 'ENOENT') return;else throw er;\n    }\n  }\n\n  if (child.isDirectory()) chownrSync(path.resolve(p, child.name), uid, gid);\n  handleEISDirSync(path.resolve(p, child.name), uid, gid);\n};\n\nconst chownrSync = (p, uid, gid) => {\n  let children;\n\n  try {\n    children = readdirSync(p, {\n      withFileTypes: true\n    });\n  } catch (er) {\n    if (er.code === 'ENOENT') return;else if (er.code === 'ENOTDIR' || er.code === 'ENOTSUP') return handleEISDirSync(p, uid, gid);else throw er;\n  }\n\n  if (children && children.length) children.forEach(child => chownrKidSync(p, child, uid, gid));\n  return handleEISDirSync(p, uid, gid);\n};\n\nmodule.exports = chownr;\nchownr.sync = chownrSync;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict'; // try to find the most reasonable prefix to use\n\nmodule.exports = findPrefix;\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nfunction findPrefix(dir) {\n  return new Promise((resolve, reject) => {\n    dir = path.resolve(dir); // this is a weird special case where an infinite recurse of\n    // node_modules folders resolves to the level that contains the\n    // very first node_modules folder\n\n    let walkedUp = false;\n\n    while (path.basename(dir) === 'node_modules') {\n      dir = path.dirname(dir);\n      walkedUp = true;\n    }\n\n    if (walkedUp) {\n      resolve(dir);\n    } else {\n      resolve(findPrefix_(dir));\n    }\n  });\n}\n\nfunction findPrefix_(dir, original) {\n  if (!original) original = dir;\n  const parent = path.dirname(dir); // this is a platform independent way of checking if we're in the root\n  // directory\n\n  if (parent === dir) return Promise.resolve(original);\n  return new Promise((resolve, reject) => {\n    fs.readdir(dir, (err, files) => {\n      if (err) {\n        // an error right away is a bad sign.\n        // unless the prefix was simply a non\n        // existent directory.\n        if (err && dir === original && err.code !== 'ENOENT') {\n          reject(err);\n        } else {\n          resolve(original);\n        }\n      } else if (files.indexOf('node_modules') !== -1 || files.indexOf('package.json') !== -1) {\n        resolve(dir);\n      } else {\n        resolve(findPrefix_(parent, original));\n      }\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"/Users/dhruvaagrawal/Desktop/Work/Projects/Webdev.nosync/Twitter/app/src/views/app-views/helpdesk/ChatMenu.js\";\nimport React, { useState } from 'react';\nimport ChatData from \"assets/data/chat.data.json\";\nimport { Badge } from 'antd';\nimport AvatarStatus from 'components/shared-components/AvatarStatus';\nimport { COLOR_1 } from 'constants/ChartConstant';\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatMenu = ({\n  match,\n  location\n}) => {\n  const [list, setList] = useState(ChatData);\n  let history = useHistory();\n\n  const openChat = id => {\n    const data = list.map(elm => {\n      if (elm.id === id) {\n        elm.unread = 0;\n      }\n\n      return elm;\n    });\n    setList(data);\n    history.push(`${match.url}/${id}`);\n  };\n\n  const id = parseInt(location.pathname.match(/\\/([^/]+)\\/?$/)[1]);\n  return (\n    /*#__PURE__*/\n    // <div className=\"chat-menu\">\n    // \t<div className=\"chat-menu-list\">\n    // \t\t{\n    // \t\t\tlist.map( (item, i) => (\n    // \t\t\t\t<div \n    // \t\t\t\t\tkey={ `chat-item-${item.id}` } \n    // \t\t\t\t\tonClick={ () => openChat(item.id) } \n    // \t\t\t\t\tclassName={ `chat-menu-list-item ${ i === (list.length - 1)? 'last' : '' } ${ item.id === id ? 'selected' : '' }` }\n    // \t\t\t\t\tstyle={{ border: '2px solid black', margin: '5px' }}\n    // \t\t\t\t>\n    // \t\t\t\t\t<AvatarStatus src={ item.avatar } name={ item.name } subTitle={ item.msg[item.msg.length - 1].text } />\n    // \t\t\t\t\t<div className=\"text-right\">\n    // \t\t\t\t\t\t<div className=\"chat-menu-list-item-time\">{ item.time }</div>\n    // \t\t\t\t\t\t{ item.unread === 0 ? <span></span> : <Badge count={ item.unread } style={{ backgroundColor: COLOR_1, fontSize: '0.75rem' }} />}\n    // \t\t\t\t\t</div>\n    // \t\t\t\t</div>\n    // \t\t\t))\n    // \t\t}\n    // \t</div>\n    // </div>\n    React.createElement(\"div\", {\n      className: \"chat-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 3\n      }\n    }, list.map((item, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: `chat-item-${item.id}`,\n      onClick: () => openChat(item.id),\n      className: `chat-menu-list-item ${i === list.length - 1 ? 'last' : ''} ${item.id === id ? 'selected' : ''}`,\n      style: {\n        border: '2px solid black',\n        margin: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(AvatarStatus, {\n      src: item.avatar,\n      name: item.name,\n      subTitle: item.msg[item.msg.length - 1].text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-menu-list-item-time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 8\n      }\n    }, item.time), item.unread === 0 ? /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 30\n      }\n    }) : /*#__PURE__*/React.createElement(Badge, {\n      count: item.unread,\n      style: {\n        backgroundColor: COLOR_1,\n        fontSize: '0.75rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 46\n      }\n    })))))\n  );\n};\n\nexport default ChatMenu;","map":{"version":3,"sources":["/Users/dhruvaagrawal/Desktop/Work/Projects/Webdev.nosync/Twitter/app/src/views/app-views/helpdesk/ChatMenu.js"],"names":["React","useState","ChatData","Badge","AvatarStatus","COLOR_1","useHistory","ChatMenu","match","location","list","setList","history","openChat","id","data","map","elm","unread","push","url","parseInt","pathname","item","i","length","border","margin","avatar","name","msg","text","time","backgroundColor","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ChatData from \"assets/data/chat.data.json\"\nimport { Badge } from 'antd';\nimport AvatarStatus from 'components/shared-components/AvatarStatus';\nimport { COLOR_1 } from 'constants/ChartConstant';\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatMenu = ({ match, location }) => {\n\tconst [ list, setList ] = useState(ChatData);\n\tlet history = useHistory();\n\tconst openChat = id => {\n\t\tconst data = list.map( elm => {\n\t\t\tif(elm.id === id) {\n\t\t\t\telm.unread = 0\n\t\t\t}\n\t\t\treturn elm\n\t\t})\n\t\tsetList(data)\n\t\thistory.push(`${match.url}/${id}`)\n\t}\n\n\tconst id = parseInt(location.pathname.match(/\\/([^/]+)\\/?$/)[1])\n\n\treturn (\n\t\t// <div className=\"chat-menu\">\n\t\t// \t<div className=\"chat-menu-list\">\n\t\t// \t\t{\n\t\t// \t\t\tlist.map( (item, i) => (\n\t\t// \t\t\t\t<div \n\t\t// \t\t\t\t\tkey={ `chat-item-${item.id}` } \n\t\t// \t\t\t\t\tonClick={ () => openChat(item.id) } \n\t\t// \t\t\t\t\tclassName={ `chat-menu-list-item ${ i === (list.length - 1)? 'last' : '' } ${ item.id === id ? 'selected' : '' }` }\n\t\t// \t\t\t\t\tstyle={{ border: '2px solid black', margin: '5px' }}\n\t\t// \t\t\t\t>\n\t\t// \t\t\t\t\t<AvatarStatus src={ item.avatar } name={ item.name } subTitle={ item.msg[item.msg.length - 1].text } />\n\t\t// \t\t\t\t\t<div className=\"text-right\">\n\t\t// \t\t\t\t\t\t<div className=\"chat-menu-list-item-time\">{ item.time }</div>\n\t\t// \t\t\t\t\t\t{ item.unread === 0 ? <span></span> : <Badge count={ item.unread } style={{ backgroundColor: COLOR_1, fontSize: '0.75rem' }} />}\n\t\t// \t\t\t\t\t</div>\n\t\t// \t\t\t\t</div>\n\t\t// \t\t\t))\n\t\t// \t\t}\n\t\t// \t</div>\n\t\t// </div>\n\t\t<div className=\"chat-menu\">\n\t\t\t{\n\t\t\t\tlist.map( (item, i) => (\n\t\t\t\t\t<div \n\t\t\t\t\t\tkey={ `chat-item-${item.id}` } \n\t\t\t\t\t\tonClick={ () => openChat(item.id) } \n\t\t\t\t\t\tclassName={ `chat-menu-list-item ${ i === (list.length - 1)? 'last' : '' } ${ item.id === id ? 'selected' : '' }` }\n\t\t\t\t\t\tstyle={{ border: '2px solid black', margin: '5px' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<AvatarStatus src={ item.avatar } name={ item.name } subTitle={ item.msg[item.msg.length - 1].text } />\n\t\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t\t<div className=\"chat-menu-list-item-time\">{ item.time }</div>\n\t\t\t\t\t\t\t{ item.unread === 0 ? <span></span> : <Badge count={ item.unread } style={{ backgroundColor: COLOR_1, fontSize: '0.75rem' }} />}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t))\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default ChatMenu"]},"metadata":{},"sourceType":"module"}
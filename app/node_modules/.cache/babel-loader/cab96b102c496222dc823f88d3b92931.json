{"ast":null,"code":"var _jsxFileName = \"/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/ops-admin/UploadTransactions.js\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { InboxOutlined } from '@ant-design/icons';\nimport { Form, Button, Upload, Typography, message } from 'antd';\nimport axios from 'axios';\nimport FileMapping from 'assets/functions/FileMapping';\nimport XLSX from 'xlsx';\nconst {\n  Title\n} = Typography;\nconst {\n  Dragger\n} = Upload;\nconst formItemLayout = {\n  labelCol: {\n    span: 6\n  },\n  wrapperCol: {\n    span: 14\n  }\n};\n\nconst dummyRequest = ({\n  file,\n  onSuccess\n}) => {\n  setTimeout(() => {\n    onSuccess(\"ok\");\n  }, 0);\n};\n\nconst normFile = e => {\n  console.log('Upload event:', e);\n\n  if (Array.isArray(e)) {\n    return e;\n  }\n\n  return e && e.fileList;\n};\n\nconst UploadTransactions = props => {\n  const {\n    push\n  } = useHistory();\n  const [data, setData] = useState([]);\n  const [cols, setCols] = useState([]);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [selectedFileList, setSelectedFileList] = useState([]);\n  const [nextState, setNextState] = useState({});\n\n  const onFinish = values => {\n    console.log('Received values of form: ', values);\n  };\n\n  const onChange = info => {\n    switch (info.file.status) {\n      case \"uploading\":\n        nextState.selectedFileList = [info.file];\n        break;\n\n      case \"done\":\n        nextState.selectedFile = info.file;\n        nextState.selectedFileList = [info.file];\n        break;\n\n      default:\n        // error or removed\n        nextState.selectedFile = null;\n        nextState.selectedFileList = [];\n    }\n\n    setNextState(nextState);\n  };\n\n  const onFileChange = e => {\n    let file = e.fileList[0];\n    console.log(file);\n  };\n\n  const onFileUpload = e => {\n    const formData = new FormData();\n    formData.append('spoctoClientData', selectedFile);\n    console.log(selectedFile);\n    console.log(formData); // formData.append('spoctoClientData', selectedFile, selectedFile.name)\n    // console.log(selectedFile)\n    // axios.post()\n  };\n\n  const fileData = () => {\n    if (selectedFile) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }\n      }, \"File Details:\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }\n      }, \"File Name: \", selectedFile.name), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }\n      }, \"File Type: \", selectedFile.type), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }\n      }, \"Last Modified:\", \" \", selectedFile.lastModifiedDate.toDateString()));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Item, {\n        justify: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Item, {\n        name: \"excelFileUpload\",\n        valuePropName: \"fileList\",\n        getValueFromEvent: normFile,\n        noStyle: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Dragger, {\n        name: \"files\",\n        action: \"\",\n        fileList: selectedFileList,\n        customRequest: dummyRequest,\n        onChange: onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"ant-upload-drag-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(InboxOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"ant-upload-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 29\n        }\n      }, \"Click or drag file to this area to upload\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"ant-upload-hint\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 29\n        }\n      }, \"Support for single and bulk upload.\")))), /*#__PURE__*/React.createElement(Form.Item, {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        className: \"mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick:\n        /*() => push(\"app/journeys/dashboard\")*/\n        onFileUpload,\n        variant: \"contained\",\n        type: \"primary\",\n        style: {\n          width: '100%',\n          height: '3rem',\n          fontSize: '1.25rem'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }\n      }, \"Create Transactions\")));\n    }\n  }; // --- Reading and parsing Excel File --- //\n  // const handleFile = file => {\n  //     const reader = new FileReader()\n  //     const rABS = !!reader.readAsBinaryString;\n  //     reader.onload = e => {\n  //         const bstr = e.target.result\n  //         const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array' })\n  // \t    /* Get first worksheet */\n  // \t    const wsname = wb.SheetNames[0];\n  // \t    const ws = wb.Sheets[wsname];\n  //         // let first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\n  //         const data = XLSX.utils.sheet_to_json(ws, { header:1 });\n  //         setData(data)\n  //         setCols(make_cols(ws['!ref']))\n  //     }\n  //     if (rABS) reader.readAsBinaryString(file)\n  //     else reader.readAsArrayBuffer(file)\n  // }\n\n\n  return /*#__PURE__*/React.createElement(Form, Object.assign({\n    name: \"validate_other\"\n  }, formItemLayout, {\n    onFinish: onFinish,\n    initialValues: {\n      rate: 3.5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form.Item, {\n    justify: \"center\",\n    style: {\n      textAlign: 'center',\n      marginTop: '1%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    level: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, \"Upload Transactions\")), fileData());\n};\n\nexport default UploadTransactions;","map":{"version":3,"sources":["/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/ops-admin/UploadTransactions.js"],"names":["React","useState","useHistory","InboxOutlined","Form","Button","Upload","Typography","message","axios","FileMapping","XLSX","Title","Dragger","formItemLayout","labelCol","span","wrapperCol","dummyRequest","file","onSuccess","setTimeout","normFile","e","console","log","Array","isArray","fileList","UploadTransactions","props","push","data","setData","cols","setCols","selectedFile","setSelectedFile","selectedFileList","setSelectedFileList","nextState","setNextState","onFinish","values","onChange","info","status","onFileChange","onFileUpload","formData","FormData","append","fileData","name","type","lastModifiedDate","toDateString","display","justifyContent","alignItems","width","height","fontSize","rate","textAlign","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useHistory } from 'react-router'\nimport { InboxOutlined } from '@ant-design/icons';\nimport { Form, Button, Upload, Typography, message } from 'antd';\nimport axios from 'axios'\nimport FileMapping from 'assets/functions/FileMapping'\nimport XLSX from 'xlsx'\n\nconst { Title } = Typography\nconst { Dragger } = Upload\n\nconst formItemLayout = {\n    labelCol: {\n        span: 6,\n    },\n    wrapperCol: {\n        span: 14,\n    },\n};\n\nconst dummyRequest = ({ file, onSuccess }) => {\n    setTimeout(() => {\n        onSuccess(\"ok\");\n    }, 0);\n};\n\nconst normFile = (e) => {\n    console.log('Upload event:', e);\n    if (Array.isArray(e)) {\n      return e;\n    }\n    return e && e.fileList;\n};\n\nconst UploadTransactions = props => {\n\n    const { push } = useHistory()\n\n    const [ data, setData ] = useState([])\n    const [ cols, setCols ] = useState([])\n    const [ selectedFile, setSelectedFile ] = useState(null)\n    const [ selectedFileList, setSelectedFileList ] = useState([])\n    const [ nextState, setNextState ] = useState({})\n\n    const onFinish = (values) => {\n        console.log('Received values of form: ', values);\n    }\n\n    const onChange = info => {\n        switch (info.file.status) {\n            case \"uploading\":\n                nextState.selectedFileList = [info.file]\n                break\n            case \"done\":\n                nextState.selectedFile = info.file\n                nextState.selectedFileList = [info.file]\n                break\n            default:\n                // error or removed\n                nextState.selectedFile = null\n                nextState.selectedFileList = []\n        }\n        setNextState(nextState)\n    };\n\n    const onFileChange = e => {\n        let file = e.fileList[0]\n        console.log(file)\n    }\n\n    const onFileUpload = e => {\n        const formData = new FormData()\n\n        formData.append('spoctoClientData', selectedFile)\n        console.log(selectedFile)\n        console.log(formData)\n        // formData.append('spoctoClientData', selectedFile, selectedFile.name)\n\n        // console.log(selectedFile)\n\n        // axios.post()\n    }\n\n    const fileData = () => { \n     \n        if ( selectedFile ) { \n            \n          return ( \n            <div> \n              <h2>File Details:</h2> \n              <p>File Name: { selectedFile.name }</p> \n              <p>File Type: { selectedFile.type }</p> \n              <p> \n                Last Modified:{\" \"} \n                { selectedFile.lastModifiedDate.toDateString() } \n              </p> \n            </div> \n          )\n        }\n\n        else { \n          return ( \n            <>\n                <Form.Item justify=\"center\">\n                    <Form.Item name=\"excelFileUpload\" valuePropName=\"fileList\" getValueFromEvent={ normFile } noStyle>\n                        <Dragger name=\"files\" action=\"\" fileList={ selectedFileList } customRequest={ dummyRequest } onChange={ onChange }>\n                            <p className=\"ant-upload-drag-icon\">\n                                <InboxOutlined />\n                            </p>\n                            <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n                            <p className=\"ant-upload-hint\">Support for single and bulk upload.</p>\n                        </Dragger>\n                        {/* <div class=\"file-upload-wrapper\">\n                            <input type=\"file\" id=\"input-file-now-custom-2\" class=\"file-upload\" data-height=\"500\" />\n                        </div> */}\n                    </Form.Item>\n                </Form.Item>\n                <Form.Item style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }} className=\"mt-5\">\n                    <Button onClick={ /*() => push(\"app/journeys/dashboard\")*/ onFileUpload } variant=\"contained\" type=\"primary\" style={{ width: '100%', height: '3rem', fontSize: '1.25rem' }}>Create Transactions</Button>\n                </Form.Item>\n            </>\n          ) \n        } \n    };\n\n    // --- Reading and parsing Excel File --- //\n\n    // const handleFile = file => {\n\n    //     const reader = new FileReader()\n    //     const rABS = !!reader.readAsBinaryString;\n\n    //     reader.onload = e => {\n    //         const bstr = e.target.result\n    //         const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array' })\n\n\t// \t    /* Get first worksheet */\n\t// \t    const wsname = wb.SheetNames[0];\n\t// \t    const ws = wb.Sheets[wsname];\n    //         // let first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\n    //         const data = XLSX.utils.sheet_to_json(ws, { header:1 });\n    //         setData(data)\n    //         setCols(make_cols(ws['!ref']))\n    //     }\n\n    //     if (rABS) reader.readAsBinaryString(file)\n    //     else reader.readAsArrayBuffer(file)\n    // }\n\n    return (\n        <Form\n            name=\"validate_other\"\n            {...formItemLayout}\n            onFinish={ onFinish }\n            initialValues={{ rate: 3.5 }}\n        >\n            <Form.Item justify=\"center\" style={{ textAlign: 'center', marginTop: '1%' }}>\n                <Title level={1}>Upload Transactions</Title>\n            </Form.Item>\n            { fileData() }\n      </Form>\n    );\n};  \n\nexport default UploadTransactions"]},"metadata":{},"sourceType":"module"}
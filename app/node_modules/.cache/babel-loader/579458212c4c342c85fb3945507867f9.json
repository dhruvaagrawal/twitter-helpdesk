{"ast":null,"code":"var _jsxFileName = \"/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/ops-admin/SheetJS.js\";\nimport React, { useState } from 'react';\nimport { Button, Typography } from 'antd';\nimport XLSX from 'xlsx';\nconst {\n  Title\n} = Typography;\n\nconst FileMapper = () => {\n  const [data, setData] = useState([]);\n  const [cols, setCols] = useState([]);\n\n  const handleFile = (file, props) => {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? 'binary' : 'array'\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      /* Update state */\n\n      setData(data);\n      setCols(make_cols(ws['!ref']));\n    };\n\n    if (rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n  };\n\n  return /*#__PURE__*/React.createElement(DragDropFile, {\n    handleFile: handleFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-xs-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DataInput, {\n    handleFile: handleFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 6\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-xs-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !data.length,\n    className: \"btn btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 6\n    }\n  }, \"Create Transactions\"))), console.log(data));\n};\n/* -------------------------------------------------------------------------- */\n\n/*\n  Simple HTML5 file drag-and-drop wrapper\n  usage: <DragDropFile handleFile={handleFile}>...</DragDropFile>\n    handleFile(file:File):void;\n*/\n\n\nconst DragDropFile = props => {\n  const suppress = evt => {\n    evt.stopPropagation();\n    evt.preventDefault();\n  };\n\n  const onDrop = evt => {\n    evt.stopPropagation();\n    evt.preventDefault();\n    const files = evt.dataTransfer.files;\n    if (files && files[0]) props.handleFile(files[0]);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onDrop: onDrop,\n    onDragEnter: suppress,\n    onDragOver: suppress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 3\n    }\n  }, props.children);\n};\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\n\n\nconst DataInput = props => {\n  const handleChange = e => {\n    const files = e.target.files;\n    if (files && files[0]) props.handleFile(files[0]);\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form-inline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, \"Spreadsheet\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    className: \"form-control\",\n    id: \"file\",\n    accept: SheetJSFT,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  })));\n};\n/* list of supported file types */\n\n\nconst SheetJSFT = [\"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\"].map(function (x) {\n  return \".\" + x;\n}).join(\",\");\n/* generate an array of column objects */\n\nconst make_cols = refstr => {\n  let o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n  for (var i = 0; i < C; ++i) o[i] = {\n    name: XLSX.utils.encode_col(i),\n    key: i\n  };\n\n  return o;\n};\n\nexport default FileMapper;","map":{"version":3,"sources":["/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/ops-admin/SheetJS.js"],"names":["React","useState","Button","Typography","XLSX","Title","FileMapper","data","setData","cols","setCols","handleFile","file","props","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","make_cols","readAsArrayBuffer","length","console","log","DragDropFile","suppress","evt","stopPropagation","preventDefault","onDrop","files","dataTransfer","children","DataInput","handleChange","SheetJSFT","map","x","join","refstr","o","C","decode_range","c","i","name","encode_col","key"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Button, Typography } from 'antd'\nimport XLSX from 'xlsx'\n\nconst { Title } = Typography\n\nconst FileMapper = () => {\n\n\tconst [ data, setData ] = useState([])\n\tconst [ cols, setCols ] = useState([])\n\n\tconst handleFile = (file, props) => {\n\t\t/* Boilerplate to set up FileReader */\n\t\tconst reader = new FileReader();\n\t\tconst rABS = !!reader.readAsBinaryString;\n\t\treader.onload = e => {\n\t\t\t/* Parse data */\n\t\t\tconst bstr = e.target.result;\n\t\t\tconst wb = XLSX.read(bstr, {type:rABS ? 'binary' : 'array'});\n\t\t\t/* Get first worksheet */\n\t\t\tconst wsname = wb.SheetNames[0];\n\t\t\tconst ws = wb.Sheets[wsname];\n\t\t\t/* Convert array of arrays */\n\t\t\tconst data = XLSX.utils.sheet_to_json(ws, {header:1});\n\t\t\t/* Update state */\n\t\t\tsetData(data)\n\t\t\tsetCols(make_cols(ws['!ref']))\n\t\t}\n\t\tif(rABS) reader.readAsBinaryString(file); else reader.readAsArrayBuffer(file);\n\t};\n\n\treturn (\n\t\t<DragDropFile handleFile={ handleFile }>\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col-xs-12\">\n\t\t\t\t\t<DataInput handleFile={ handleFile } />\n\t\t\t\t</div></div>\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col-xs-12\">\n\t\t\t\t\t<button disabled={ !data.length } className=\"btn btn-success\">Create Transactions</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{ console.log(data) }\n\t\t</DragDropFile>\n\t);\n}\n/* -------------------------------------------------------------------------- */\n\n/*\n  Simple HTML5 file drag-and-drop wrapper\n  usage: <DragDropFile handleFile={handleFile}>...</DragDropFile>\n    handleFile(file:File):void;\n*/\nconst DragDropFile = props => {\n\tconst suppress = evt => { \n\t\tevt.stopPropagation()\n\t\tevt.preventDefault() \n\t}\n\n\tconst onDrop = evt => { \n\t\tevt.stopPropagation()\n\t\tevt.preventDefault()\n\t\tconst files = evt.dataTransfer.files\n\t\tif (files && files[0]) props.handleFile(files[0]);\n\t};\n\n\treturn (\n\t\t<div onDrop={ onDrop } onDragEnter={ suppress } onDragOver={ suppress }>\n\t\t\t{ props.children }\n\t\t</div>\n\t); \n};\n\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\nconst DataInput = props => {\n\tconst handleChange = e => {\n\t\tconst files = e.target.files;\n\t\tif(files && files[0]) props.handleFile(files[0]);\n\t};\n\n\treturn (\n\t\t<form className=\"form-inline\">\n\t\t\t<div className=\"form-group\">\n\t\t\t\t<label htmlFor=\"file\">Spreadsheet</label>\n\t\t\t\t<input type=\"file\" className=\"form-control\" id=\"file\" accept={ SheetJSFT } onChange={ handleChange } />\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\n/* list of supported file types */\nconst SheetJSFT = [ \"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\" ].map(function(x) { return \".\" + x; }).join(\",\");\n\n/* generate an array of column objects */\nconst make_cols = refstr => {\n\tlet o = [], C = XLSX.utils.decode_range(refstr).e.c + 1;\n\tfor(var i = 0; i < C; ++i) o[i] = {name:XLSX.utils.encode_col(i), key:i}\n\treturn o;\n};\n\nexport default FileMapper"]},"metadata":{},"sourceType":"module"}
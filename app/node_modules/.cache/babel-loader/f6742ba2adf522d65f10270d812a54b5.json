{"ast":null,"code":"// On windows, create a .cmd file.\n// Read the #! in the file to see what it uses.  The vast majority\n// of the time, this will be either:\n// \"#!/usr/bin/env <prog> <args...>\"\n// or:\n// \"#!<prog> <args...>\"\n//\n// Write a binroot/pkg.bin + \".cmd\" file that has this line in it:\n// @<prog> <args...> %dp0%<target> %*\nmodule.exports = cmdShim;\ncmdShim.ifExists = cmdShimIfExists;\n\nvar fs = require(\"graceful-fs\");\n\nvar mkdir = require(\"mkdirp\"),\n    path = require(\"path\"),\n    toBatchSyntax = require(\"./lib/to-batch-syntax\"),\n    shebangExpr = /^#\\!\\s*(?:\\/usr\\/bin\\/env)?\\s*([^ \\t]+=[^ \\t]+\\s+)*\\s*([^ \\t]+)(.*)$/;\n\nfunction cmdShimIfExists(from, to, cb) {\n  fs.stat(from, function (er) {\n    if (er) return cb();\n    cmdShim(from, to, cb);\n  });\n} // Try to unlink, but ignore errors.\n// Any problems will surface later.\n\n\nfunction rm(path, cb) {\n  fs.unlink(path, function (er) {\n    cb();\n  });\n}\n\nfunction cmdShim(from, to, cb) {\n  fs.stat(from, function (er, stat) {\n    if (er) return cb(er);\n    cmdShim_(from, to, cb);\n  });\n}\n\nfunction cmdShim_(from, to, cb) {\n  var then = times(3, next, cb);\n  rm(to, then);\n  rm(to + \".cmd\", then);\n  rm(to + \".ps1\", then);\n\n  function next(er) {\n    writeShim(from, to, cb);\n  }\n}\n\nfunction writeShim(from, to, cb) {\n  // make a cmd file and a sh script\n  // First, check if the bin is a #! of some sort.\n  // If not, then assume it's something that'll be compiled, or some other\n  // sort of script, and just call it directly.\n  mkdir(path.dirname(to), function (er) {\n    if (er) return cb(er);\n    fs.readFile(from, \"utf8\", function (er, data) {\n      if (er) return writeShim_(from, to, null, null, null, cb);\n      var firstLine = data.trim().split(/\\r*\\n/)[0],\n          shebang = firstLine.match(shebangExpr);\n      if (!shebang) return writeShim_(from, to, null, null, null, cb);\n      var vars = shebang[1] || \"\",\n          prog = shebang[2],\n          args = shebang[3] || \"\";\n      return writeShim_(from, to, prog, args, vars, cb);\n    });\n  });\n}\n\nfunction writeShim_(from, to, prog, args, variables, cb) {\n  var shTarget = path.relative(path.dirname(to), from),\n      target = shTarget.split(\"/\").join(\"\\\\\"),\n      longProg,\n      shProg = prog && prog.split(\"\\\\\").join(\"/\"),\n      shLongProg,\n      pwshProg = shProg && \"\\\"\" + shProg + \"$exe\\\"\",\n      pwshLongProg;\n  shTarget = shTarget.split(\"\\\\\").join(\"/\");\n  args = args || \"\";\n  variables = variables || \"\";\n\n  if (!prog) {\n    prog = \"\\\"%dp0%\\\\\" + target + \"\\\"\";\n    shProg = \"\\\"$basedir/\" + shTarget + \"\\\"\";\n    pwshProg = shProg;\n    args = \"\";\n    target = \"\";\n    shTarget = \"\";\n  } else {\n    longProg = \"\\\"%dp0%\\\\\" + prog + \".exe\\\"\";\n    shLongProg = \"\\\"$basedir/\" + prog + \"\\\"\";\n    pwshLongProg = \"\\\"$basedir/\" + prog + \"$exe\\\"\";\n    target = \"\\\"%dp0%\\\\\" + target + \"\\\"\";\n    shTarget = \"\\\"$basedir/\" + shTarget + \"\\\"\";\n  } // @SETLOCAL\n  // @CALL :find_dp0\n  //\n  // @IF EXIST \"%dp0%\\node.exe\" (\n  //   @SET \"_prog=%dp0%\\node.exe\"\n  // ) ELSE (\n  //   @SET \"_prog=node\"\n  //   @SET PATHEXT=%PATHEXT:;.JS;=;%\n  // )\n  //\n  // \"%_prog%\" \"%dp0%\\.\\node_modules\\npm\\bin\\npm-cli.js\" %*\n  // @ENDLOCAL\n  // @EXIT /b %errorlevel%\n  //\n  // :find_dp0\n  // SET dp0=%~dp0\n  // EXIT /b\n  //\n  // Subroutine trick to fix https://github.com/npm/cmd-shim/issues/10\n\n\n  var head = '@ECHO off\\r\\n' + 'SETLOCAL\\r\\n' + 'CALL :find_dp0\\r\\n';\n  var foot = 'ENDLOCAL\\r\\n' + 'EXIT /b %errorlevel%\\r\\n' + ':find_dp0\\r\\n' + 'SET dp0=%~dp0\\r\\n' + 'EXIT /b\\r\\n';\n  var cmd;\n\n  if (longProg) {\n    shLongProg = shLongProg.trim();\n    args = args.trim();\n    var variableDeclarationsAsBatch = toBatchSyntax.convertToSetCommands(variables);\n    cmd = head + variableDeclarationsAsBatch + \"\\r\\n\" + \"IF EXIST \" + longProg + \" (\\r\\n\" + \"  SET \\\"_prog=\" + longProg.replace(/(^\")|(\"$)/g, '') + \"\\\"\\r\\n\" + \") ELSE (\\r\\n\" + \"  SET \\\"_prog=\" + prog.replace(/(^\")|(\"$)/g, '') + \"\\\"\\r\\n\" + \"  SET PATHEXT=%PATHEXT:;.JS;=;%\\r\\n\" + \")\\r\\n\" + \"\\r\\n\" + \"\\\"%_prog%\\\" \" + args + \" \" + target + \" %*\\r\\n\" + foot;\n  } else {\n    cmd = head + prog + \" \" + args + \" \" + target + \" %*\\r\\n\" + foot;\n  } // #!/bin/sh\n  // basedir=`dirname \"$0\"`\n  //\n  // case `uname` in\n  //     *CYGWIN*|*MINGW*|*MSYS*) basedir=`cygpath -w \"$basedir\"`;;\n  // esac\n  //\n  // if [ -x \"$basedir/node.exe\" ]; then\n  //   \"$basedir/node.exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" \"$@\"\n  //   ret=$?\n  // else\n  //   node \"$basedir/node_modules/npm/bin/npm-cli.js\" \"$@\"\n  //   ret=$?\n  // fi\n  // exit $ret\n\n\n  var sh = \"#!/bin/sh\\n\";\n  sh = sh + \"basedir=$(dirname \\\"$(echo \\\"$0\\\" | sed -e 's,\\\\\\\\,/,g')\\\")\\n\" + \"\\n\" + \"case `uname` in\\n\" + \"    *CYGWIN*|*MINGW*|*MSYS*) basedir=`cygpath -w \\\"$basedir\\\"`;;\\n\" + \"esac\\n\" + \"\\n\";\n\n  if (shLongProg) {\n    sh = sh + \"if [ -x \" + shLongProg + \" ]; then\\n\" + \"  \" + variables + shLongProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\" + \"  ret=$?\\n\" + \"else \\n\" + \"  \" + variables + shProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\" + \"  ret=$?\\n\" + \"fi\\n\" + \"exit $ret\\n\";\n  } else {\n    sh = sh + shProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\" + \"exit $?\\n\";\n  } // #!/usr/bin/env pwsh\n  // $basedir=Split-Path $MyInvocation.MyCommand.Definition -Parent\n  //\n  // $ret=0\n  // $exe = \"\"\n  // if ($PSVersionTable.PSVersion -lt \"6.0\" -or $IsWindows) {\n  //   # Fix case when both the Windows and Linux builds of Node\n  //   # are installed in the same directory\n  //   $exe = \".exe\"\n  // }\n  // if (Test-Path \"$basedir/node\") {\n  //   & \"$basedir/node$exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" $args\n  //   $ret=$LASTEXITCODE\n  // } else {\n  //   & \"node$exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" $args\n  //   $ret=$LASTEXITCODE\n  // }\n  // exit $ret\n\n\n  var pwsh = \"#!/usr/bin/env pwsh\\n\" + \"$basedir=Split-Path $MyInvocation.MyCommand.Definition -Parent\\n\" + \"\\n\" + \"$exe=\\\"\\\"\\n\" + \"if ($PSVersionTable.PSVersion -lt \\\"6.0\\\" -or $IsWindows) {\\n\" + \"  # Fix case when both the Windows and Linux builds of Node\\n\" + \"  # are installed in the same directory\\n\" + \"  $exe=\\\".exe\\\"\\n\" + \"}\\n\";\n\n  if (shLongProg) {\n    pwsh = pwsh + \"$ret=0\\n\" + \"if (Test-Path \" + pwshLongProg + \") {\\n\" + \"  & \" + pwshLongProg + \" \" + args + \" \" + shTarget + \" $args\\n\" + \"  $ret=$LASTEXITCODE\\n\" + \"} else {\\n\" + \"  & \" + pwshProg + \" \" + args + \" \" + shTarget + \" $args\\n\" + \"  $ret=$LASTEXITCODE\\n\" + \"}\\n\" + \"exit $ret\\n\";\n  } else {\n    pwsh = pwsh + \"& \" + pwshProg + \" \" + args + \" \" + shTarget + \" $args\\n\" + \"exit $LASTEXITCODE\\n\";\n  }\n\n  var then = times(3, next, cb);\n  fs.writeFile(to + \".ps1\", pwsh, \"utf8\", then);\n  fs.writeFile(to + \".cmd\", cmd, \"utf8\", then);\n  fs.writeFile(to, sh, \"utf8\", then);\n\n  function next() {\n    chmodShim(to, cb);\n  }\n}\n\nfunction chmodShim(to, cb) {\n  var then = times(3, cb, cb);\n  fs.chmod(to, \"0755\", then);\n  fs.chmod(to + \".cmd\", \"0755\", then);\n  fs.chmod(to + \".ps1\", \"0755\", then);\n}\n\nfunction times(n, ok, cb) {\n  var errState = null;\n  return function (er) {\n    if (!errState) {\n      if (er) cb(errState = er);else if (--n === 0) ok();\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}
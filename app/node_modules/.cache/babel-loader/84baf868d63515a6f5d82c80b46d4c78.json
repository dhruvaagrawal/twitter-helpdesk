{"ast":null,"code":"var _jsxFileName = \"/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/ops-admin/SheetJS.js\";\nimport React from 'react';\nimport XLSX from 'xlsx';\n\nclass SheetJSApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n\n      /* Array of Arrays e.g. [[\"a\",\"b\"],[1,2]] */\n      cols: []\n      /* Array of column objects e.g. { name: \"C\", K: 2 } */\n\n    };\n    this.handleFile = this.handleFile.bind(this);\n  }\n\n  handleFile(file\n  /*:File*/\n  ) {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? 'binary' : 'array'\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      /* Update state */\n\n      this.setState({\n        data: data,\n        cols: make_cols(ws['!ref'])\n      });\n    };\n\n    if (rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(DragDropFile, {\n      handleFile: this.handleFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xs-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 26\n      }\n    }, /*#__PURE__*/React.createElement(DataInput, {\n      handleFile: this.handleFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 6\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xs-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 26\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: !this.state.data.length,\n      className: \"btn btn-success\",\n      onClick: this.exportFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 6\n      }\n    }, \"Export\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xs-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 26\n      }\n    }, /*#__PURE__*/React.createElement(OutTable, {\n      data: this.state.data,\n      cols: this.state.cols,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 6\n      }\n    }))));\n  }\n\n}\n\n;\n/* -------------------------------------------------------------------------- */\n\n/*\n  Simple HTML5 file drag-and-drop wrapper\n  usage: <DragDropFile handleFile={handleFile}>...</DragDropFile>\n    handleFile(file:File):void;\n*/\n\nclass DragDropFile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  suppress(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n  }\n\n  onDrop(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    const files = evt.dataTransfer.files;\n    if (files && files[0]) this.props.handleFile(files[0]);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onDrop: this.onDrop,\n      onDragEnter: this.suppress,\n      onDragOver: this.suppress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 4\n      }\n    }, this.props.children);\n  }\n\n}\n\n;\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\n\nclass DataInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) this.props.handleFile(files[0]);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"form-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"file\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 6\n      }\n    }, \"Spreadsheet\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      className: \"form-control\",\n      id: \"file\",\n      accept: SheetJSFT,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 6\n      }\n    })));\n  }\n\n}\n/* list of supported file types */\n\n\nconst SheetJSFT = [\"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\", \"ods\", \"fods\", \"uos\", \"sylk\", \"dif\", \"dbf\", \"prn\", \"qpw\", \"123\", \"wb*\", \"wq*\", \"html\", \"htm\"].map(function (x) {\n  return \".\" + x;\n}).join(\",\");\n/* generate an array of column objects */\n\nconst make_cols = refstr => {\n  let o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n  for (var i = 0; i < C; ++i) o[i] = {\n    name: XLSX.utils.encode_col(i),\n    key: i\n  };\n\n  return o;\n};\n\nexport default SheetJSApp;","map":{"version":3,"sources":["/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/ops-admin/SheetJS.js"],"names":["React","XLSX","SheetJSApp","Component","constructor","props","state","data","cols","handleFile","bind","file","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","setState","make_cols","readAsArrayBuffer","render","length","exportFile","DragDropFile","onDrop","suppress","evt","stopPropagation","preventDefault","files","dataTransfer","children","DataInput","handleChange","SheetJSFT","map","x","join","refstr","o","C","decode_range","c","i","name","encode_col","key"],"mappings":"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","sourcesContent":["import React from 'react'\nimport XLSX from 'xlsx'\n\n\nclass SheetJSApp extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdata: [], /* Array of Arrays e.g. [[\"a\",\"b\"],[1,2]] */\n\t\t\tcols: []  /* Array of column objects e.g. { name: \"C\", K: 2 } */\n\t\t};\n\t\tthis.handleFile = this.handleFile.bind(this);\n\t};\n\thandleFile(file/*:File*/) {\n\t\t/* Boilerplate to set up FileReader */\n\t\tconst reader = new FileReader();\n\t\tconst rABS = !!reader.readAsBinaryString;\n\t\treader.onload = (e) => {\n\t\t\t/* Parse data */\n\t\t\tconst bstr = e.target.result;\n\t\t\tconst wb = XLSX.read(bstr, {type:rABS ? 'binary' : 'array'});\n\t\t\t/* Get first worksheet */\n\t\t\tconst wsname = wb.SheetNames[0];\n\t\t\tconst ws = wb.Sheets[wsname];\n\t\t\t/* Convert array of arrays */\n\t\t\tconst data = XLSX.utils.sheet_to_json(ws, {header:1});\n\t\t\t/* Update state */\n\t\t\tthis.setState({ data: data, cols: make_cols(ws['!ref']) });\n\t\t};\n\t\tif(rABS) reader.readAsBinaryString(file); else reader.readAsArrayBuffer(file);\n\t};\n\n\trender() { \n\t\treturn (\n\t\t\t<DragDropFile handleFile={this.handleFile}>\n\t\t\t\t<div className=\"row\"><div className=\"col-xs-12\">\n\t\t\t\t\t<DataInput handleFile={this.handleFile} />\n\t\t\t\t</div></div>\n\t\t\t\t<div className=\"row\"><div className=\"col-xs-12\">\n\t\t\t\t\t<button disabled={!this.state.data.length} className=\"btn btn-success\" onClick={this.exportFile}>Export</button>\n\t\t\t\t</div></div>\n\t\t\t\t<div className=\"row\"><div className=\"col-xs-12\">\n\t\t\t\t\t<OutTable data={this.state.data} cols={this.state.cols} />\n\t\t\t\t</div></div>\n\t\t\t</DragDropFile>\n\t\t); \t\t\n\t};\n};\n\n/* -------------------------------------------------------------------------- */\n\n/*\n  Simple HTML5 file drag-and-drop wrapper\n  usage: <DragDropFile handleFile={handleFile}>...</DragDropFile>\n    handleFile(file:File):void;\n*/\nclass DragDropFile extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.onDrop = this.onDrop.bind(this);\n\t};\n\tsuppress(evt) { evt.stopPropagation(); evt.preventDefault(); };\n\tonDrop(evt) { evt.stopPropagation(); evt.preventDefault();\n\t\tconst files = evt.dataTransfer.files;\n\t\tif(files && files[0]) this.props.handleFile(files[0]);\n\t};\n\trender() { \n\t\treturn (\n\t\t\t<div onDrop={this.onDrop} onDragEnter={this.suppress} onDragOver={this.suppress}>\n\t\t\t\t{this.props.children}\n\t\t\t</div>\n\t\t); \n\t};\n};\n\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\nclass DataInput extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t};\n\thandleChange(e) {\n\t\tconst files = e.target.files;\n\t\tif(files && files[0]) this.props.handleFile(files[0]);\n\t};\n\trender() { \n\t\treturn (\n\t\t\t<form className=\"form-inline\">\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"file\">Spreadsheet</label>\n\t\t\t\t\t<input type=\"file\" className=\"form-control\" id=\"file\" accept={SheetJSFT} onChange={this.handleChange} />\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t); \n\t};\n}\n\n/* list of supported file types */\nconst SheetJSFT = [\n\t\"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\", \"ods\", \"fods\", \"uos\", \"sylk\", \"dif\", \"dbf\", \"prn\", \"qpw\", \"123\", \"wb*\", \"wq*\", \"html\", \"htm\"\n].map(function(x) { return \".\" + x; }).join(\",\");\n\n/* generate an array of column objects */\nconst make_cols = refstr => {\n\tlet o = [], C = XLSX.utils.decode_range(refstr).e.c + 1;\n\tfor(var i = 0; i < C; ++i) o[i] = {name:XLSX.utils.encode_col(i), key:i}\n\treturn o;\n};\n\nexport default SheetJSApp"]},"metadata":{},"sourceType":"module"}
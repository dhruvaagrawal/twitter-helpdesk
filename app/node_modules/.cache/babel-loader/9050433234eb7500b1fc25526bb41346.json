{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Xalignment = exports.Xxf = exports.XcellXfs = exports.XcellStyleXfs = exports.XcellStyle = exports.XcellStyles = exports.Xborder = exports.Xborders = exports.XpatternFill = exports.Xfill = exports.Xfills = exports.Xfont = exports.Xfonts = exports.XnumFmt = exports.XnumFmts = exports.XstyleSheet = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _toArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toArray\"));\n\nvar _getPrototypeOf15 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _node = require(\"./node\");\n\nvar _lib = require(\"./lib\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _decorate(decorators, factory, superClass, mixins) {\n  var api = _getDecoratorsApi();\n\n  if (mixins) {\n    for (var i = 0; i < mixins.length; i++) {\n      api = mixins[i](api);\n    }\n  }\n\n  var r = factory(function initialize(O) {\n    api.initializeInstanceElements(O, decorated.elements);\n  }, superClass);\n  var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators);\n  api.initializeClassElements(r.F, decorated.elements);\n  return api.runClassFinishers(r.F, decorated.finishers);\n}\n\nfunction _getDecoratorsApi() {\n  _getDecoratorsApi = function _getDecoratorsApi() {\n    return api;\n  };\n\n  var api = {\n    elementsDefinitionOrder: [[\"method\"], [\"field\"]],\n    initializeInstanceElements: function initializeInstanceElements(O, elements) {\n      [\"method\", \"field\"].forEach(function (kind) {\n        elements.forEach(function (element) {\n          if (element.kind === kind && element.placement === \"own\") {\n            this.defineClassElement(O, element);\n          }\n        }, this);\n      }, this);\n    },\n    initializeClassElements: function initializeClassElements(F, elements) {\n      var proto = F.prototype;\n      [\"method\", \"field\"].forEach(function (kind) {\n        elements.forEach(function (element) {\n          var placement = element.placement;\n\n          if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) {\n            var receiver = placement === \"static\" ? F : proto;\n            this.defineClassElement(receiver, element);\n          }\n        }, this);\n      }, this);\n    },\n    defineClassElement: function defineClassElement(receiver, element) {\n      var descriptor = element.descriptor;\n\n      if (element.kind === \"field\") {\n        var initializer = element.initializer;\n        descriptor = {\n          enumerable: descriptor.enumerable,\n          writable: descriptor.writable,\n          configurable: descriptor.configurable,\n          value: initializer === void 0 ? void 0 : initializer.call(receiver)\n        };\n      }\n\n      Object.defineProperty(receiver, element.key, descriptor);\n    },\n    decorateClass: function decorateClass(elements, decorators) {\n      var newElements = [];\n      var finishers = [];\n      var placements = {\n        static: [],\n        prototype: [],\n        own: []\n      };\n      elements.forEach(function (element) {\n        this.addElementPlacement(element, placements);\n      }, this);\n      elements.forEach(function (element) {\n        if (!_hasDecorators(element)) return newElements.push(element);\n        var elementFinishersExtras = this.decorateElement(element, placements);\n        newElements.push(elementFinishersExtras.element);\n        newElements.push.apply(newElements, elementFinishersExtras.extras);\n        finishers.push.apply(finishers, elementFinishersExtras.finishers);\n      }, this);\n\n      if (!decorators) {\n        return {\n          elements: newElements,\n          finishers: finishers\n        };\n      }\n\n      var result = this.decorateConstructor(newElements, decorators);\n      finishers.push.apply(finishers, result.finishers);\n      result.finishers = finishers;\n      return result;\n    },\n    addElementPlacement: function addElementPlacement(element, placements, silent) {\n      var keys = placements[element.placement];\n\n      if (!silent && keys.indexOf(element.key) !== -1) {\n        throw new TypeError(\"Duplicated element (\" + element.key + \")\");\n      }\n\n      keys.push(element.key);\n    },\n    decorateElement: function decorateElement(element, placements) {\n      var extras = [];\n      var finishers = [];\n\n      for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) {\n        var keys = placements[element.placement];\n        keys.splice(keys.indexOf(element.key), 1);\n        var elementObject = this.fromElementDescriptor(element);\n        var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject);\n        element = elementFinisherExtras.element;\n        this.addElementPlacement(element, placements);\n\n        if (elementFinisherExtras.finisher) {\n          finishers.push(elementFinisherExtras.finisher);\n        }\n\n        var newExtras = elementFinisherExtras.extras;\n\n        if (newExtras) {\n          for (var j = 0; j < newExtras.length; j++) {\n            this.addElementPlacement(newExtras[j], placements);\n          }\n\n          extras.push.apply(extras, newExtras);\n        }\n      }\n\n      return {\n        element: element,\n        finishers: finishers,\n        extras: extras\n      };\n    },\n    decorateConstructor: function decorateConstructor(elements, decorators) {\n      var finishers = [];\n\n      for (var i = decorators.length - 1; i >= 0; i--) {\n        var obj = this.fromClassDescriptor(elements);\n        var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj);\n\n        if (elementsAndFinisher.finisher !== undefined) {\n          finishers.push(elementsAndFinisher.finisher);\n        }\n\n        if (elementsAndFinisher.elements !== undefined) {\n          elements = elementsAndFinisher.elements;\n\n          for (var j = 0; j < elements.length - 1; j++) {\n            for (var k = j + 1; k < elements.length; k++) {\n              if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) {\n                throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\");\n              }\n            }\n          }\n        }\n      }\n\n      return {\n        elements: elements,\n        finishers: finishers\n      };\n    },\n    fromElementDescriptor: function fromElementDescriptor(element) {\n      var obj = {\n        kind: element.kind,\n        key: element.key,\n        placement: element.placement,\n        descriptor: element.descriptor\n      };\n      var desc = {\n        value: \"Descriptor\",\n        configurable: true\n      };\n      Object.defineProperty(obj, Symbol.toStringTag, desc);\n      if (element.kind === \"field\") obj.initializer = element.initializer;\n      return obj;\n    },\n    toElementDescriptors: function toElementDescriptors(elementObjects) {\n      if (elementObjects === undefined) return;\n      return (0, _toArray2.default)(elementObjects).map(function (elementObject) {\n        var element = this.toElementDescriptor(elementObject);\n        this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\");\n        this.disallowProperty(elementObject, \"extras\", \"An element descriptor\");\n        return element;\n      }, this);\n    },\n    toElementDescriptor: function toElementDescriptor(elementObject) {\n      var kind = String(elementObject.kind);\n\n      if (kind !== \"method\" && kind !== \"field\") {\n        throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"');\n      }\n\n      var key = _toPropertyKey(elementObject.key);\n\n      var placement = String(elementObject.placement);\n\n      if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") {\n        throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"');\n      }\n\n      var descriptor = elementObject.descriptor;\n      this.disallowProperty(elementObject, \"elements\", \"An element descriptor\");\n      var element = {\n        kind: kind,\n        key: key,\n        placement: placement,\n        descriptor: Object.assign({}, descriptor)\n      };\n\n      if (kind !== \"field\") {\n        this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\");\n      } else {\n        this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\");\n        this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\");\n        this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\");\n        element.initializer = elementObject.initializer;\n      }\n\n      return element;\n    },\n    toElementFinisherExtras: function toElementFinisherExtras(elementObject) {\n      var element = this.toElementDescriptor(elementObject);\n\n      var finisher = _optionalCallableProperty(elementObject, \"finisher\");\n\n      var extras = this.toElementDescriptors(elementObject.extras);\n      return {\n        element: element,\n        finisher: finisher,\n        extras: extras\n      };\n    },\n    fromClassDescriptor: function fromClassDescriptor(elements) {\n      var obj = {\n        kind: \"class\",\n        elements: elements.map(this.fromElementDescriptor, this)\n      };\n      var desc = {\n        value: \"Descriptor\",\n        configurable: true\n      };\n      Object.defineProperty(obj, Symbol.toStringTag, desc);\n      return obj;\n    },\n    toClassDescriptor: function toClassDescriptor(obj) {\n      var kind = String(obj.kind);\n\n      if (kind !== \"class\") {\n        throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"');\n      }\n\n      this.disallowProperty(obj, \"key\", \"A class descriptor\");\n      this.disallowProperty(obj, \"placement\", \"A class descriptor\");\n      this.disallowProperty(obj, \"descriptor\", \"A class descriptor\");\n      this.disallowProperty(obj, \"initializer\", \"A class descriptor\");\n      this.disallowProperty(obj, \"extras\", \"A class descriptor\");\n\n      var finisher = _optionalCallableProperty(obj, \"finisher\");\n\n      var elements = this.toElementDescriptors(obj.elements);\n      return {\n        elements: elements,\n        finisher: finisher\n      };\n    },\n    runClassFinishers: function runClassFinishers(constructor, finishers) {\n      for (var i = 0; i < finishers.length; i++) {\n        var newConstructor = (0, finishers[i])(constructor);\n\n        if (newConstructor !== undefined) {\n          if (typeof newConstructor !== \"function\") {\n            throw new TypeError(\"Finishers must return a constructor.\");\n          }\n\n          constructor = newConstructor;\n        }\n      }\n\n      return constructor;\n    },\n    disallowProperty: function disallowProperty(obj, name, objectType) {\n      if (obj[name] !== undefined) {\n        throw new TypeError(objectType + \" can't have a .\" + name + \" property.\");\n      }\n    }\n  };\n  return api;\n}\n\nfunction _createElementDescriptor(def) {\n  var key = _toPropertyKey(def.key);\n\n  var descriptor;\n\n  if (def.kind === \"method\") {\n    descriptor = {\n      value: def.value,\n      writable: true,\n      configurable: true,\n      enumerable: false\n    };\n  } else if (def.kind === \"get\") {\n    descriptor = {\n      get: def.value,\n      configurable: true,\n      enumerable: false\n    };\n  } else if (def.kind === \"set\") {\n    descriptor = {\n      set: def.value,\n      configurable: true,\n      enumerable: false\n    };\n  } else if (def.kind === \"field\") {\n    descriptor = {\n      configurable: true,\n      writable: true,\n      enumerable: true\n    };\n  }\n\n  var element = {\n    kind: def.kind === \"field\" ? \"field\" : \"method\",\n    key: key,\n    placement: def.static ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\",\n    descriptor: descriptor\n  };\n  if (def.decorators) element.decorators = def.decorators;\n  if (def.kind === \"field\") element.initializer = def.value;\n  return element;\n}\n\nfunction _coalesceGetterSetter(element, other) {\n  if (element.descriptor.get !== undefined) {\n    other.descriptor.get = element.descriptor.get;\n  } else {\n    other.descriptor.set = element.descriptor.set;\n  }\n}\n\nfunction _coalesceClassElements(elements) {\n  var newElements = [];\n\n  var isSameElement = function isSameElement(other) {\n    return other.kind === \"method\" && other.key === element.key && other.placement === element.placement;\n  };\n\n  for (var i = 0; i < elements.length; i++) {\n    var element = elements[i];\n    var other;\n\n    if (element.kind === \"method\" && (other = newElements.find(isSameElement))) {\n      if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) {\n        if (_hasDecorators(element) || _hasDecorators(other)) {\n          throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\");\n        }\n\n        other.descriptor = element.descriptor;\n      } else {\n        if (_hasDecorators(element)) {\n          if (_hasDecorators(other)) {\n            throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\");\n          }\n\n          other.decorators = element.decorators;\n        }\n\n        _coalesceGetterSetter(element, other);\n      }\n    } else {\n      newElements.push(element);\n    }\n  }\n\n  return newElements;\n}\n\nfunction _hasDecorators(element) {\n  return element.decorators && element.decorators.length;\n}\n\nfunction _isDataDescriptor(desc) {\n  return desc !== undefined && !(desc.value === undefined && desc.writable === undefined);\n}\n\nfunction _optionalCallableProperty(obj, name) {\n  var value = obj[name];\n\n  if (value !== undefined && typeof value !== \"function\") {\n    throw new TypeError(\"Expected '\" + name + \"' to be a function\");\n  }\n\n  return value;\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nvar XstyleSheet = _decorate([(0, _node.props)('xmlns')], function (_initialize, _Node) {\n  var XstyleSheet = /*#__PURE__*/function (_Node2) {\n    (0, _inherits2.default)(XstyleSheet, _Node2);\n\n    function XstyleSheet(_ref, children) {\n      var _this;\n\n      var _ref$xmlns = _ref.xmlns,\n          xmlns = _ref$xmlns === void 0 ? 'http://schemas.openxmlformats.org/spreadsheetml/2006/main' : _ref$xmlns;\n      (0, _classCallCheck2.default)(this, XstyleSheet);\n      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf15.default)(XstyleSheet).call(this, {\n        xmlns\n      }, children));\n\n      _initialize((0, _assertThisInitialized2.default)(_this));\n\n      _this[_node.HEAD] = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n      return _this;\n    }\n\n    return XstyleSheet;\n  }(_Node);\n\n  return {\n    F: XstyleSheet,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"styleSheet\";\n      }\n\n    }, {\n      kind: \"field\",\n      key: \"fonts\",\n\n      value() {\n        return null;\n      }\n\n    }, {\n      kind: \"field\",\n      key: \"fills\",\n\n      value() {\n        return null;\n      }\n\n    }, {\n      kind: \"field\",\n      key: \"borders\",\n\n      value() {\n        return null;\n      }\n\n    }, {\n      kind: \"field\",\n      key: \"cellStyles\",\n\n      value() {\n        return null;\n      }\n\n    }, {\n      kind: \"field\",\n      key: \"cellStyleXfs\",\n\n      value() {\n        return null;\n      }\n\n    }, {\n      kind: \"field\",\n      key: \"cellXfs\",\n\n      value() {\n        return null;\n      }\n\n    }, {\n      kind: \"field\",\n      key: \"numFmts\",\n\n      value() {\n        return null;\n      }\n\n    }, {\n      kind: \"field\",\n      key: \"numFmtRefTable\",\n\n      value() {\n        return {};\n      }\n\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        this.children = [];\n        if (this.numFmts) this.children.push(this.numFmts);\n        if (this.fonts) this.children.push(this.fonts);\n        if (this.fills) this.children.push(this.fills);\n        if (this.borders) this.children.push(this.borders);\n        if (this.cellStyleXfs) this.children.push(this.cellStyleXfs);\n        if (this.cellXfs) this.children.push(this.cellXfs);\n        if (this.cellStyles) this.children.push(this.cellStyles);\n        return (0, _get2.default)((0, _getPrototypeOf15.default)(XstyleSheet.prototype), \"render\", this).call(this);\n      }\n    }, {\n      kind: \"method\",\n      key: \"reset\",\n      value: function reset() {\n        this.children = [];\n        this.fonts = new Xfonts();\n        this.fills = new Xfills();\n        this.borders = new Xborders();\n        this.cellXfs = new XcellXfs({\n          count: 1\n        }, [new Xxf()]);\n        this.numFmts = new XnumFmts();\n        this.addBorder(new Xborder({\n          left: {\n            style: 'none'\n          },\n          right: {\n            style: 'none'\n          },\n          top: {\n            style: 'none'\n          },\n          bottom: {\n            style: 'none'\n          }\n        }));\n      }\n    }, {\n      kind: \"method\",\n      key: \"addFont\",\n      value: function addFont(xFont) {\n        if (!xFont.name) return 0;\n        var list = this.fonts.children;\n        var len = list.length;\n\n        for (var i = 0; i < list.length; i++) {\n          if (xFont.equals(list[i])) return i;\n        }\n\n        list.push(xFont);\n        this.fonts.count = list.length;\n        return len;\n      }\n    }, {\n      kind: \"method\",\n      key: \"addFill\",\n      value: function addFill(xFill) {\n        var list = this.fills.children;\n        var len = list.length;\n\n        for (var i = 0; i < list.length; i++) {\n          if (xFill.equals(list[i])) return i;\n        }\n\n        list.push(xFill);\n        this.fills.count = list.length;\n        return len;\n      }\n    }, {\n      kind: \"method\",\n      key: \"addBorder\",\n      value: function addBorder(xBorder) {\n        var list = this.borders.children;\n        var len = list.length;\n\n        for (var i = 0; i < list.length; i++) {\n          if (xBorder.equals(list[i])) return i;\n        }\n\n        list.push(xBorder);\n        this.borders.count = list.length;\n        return len;\n      }\n    }, {\n      kind: \"method\",\n      key: \"addCellXf\",\n      value: function addCellXf(xXf) {\n        var list = this.cellXfs.children;\n        var len = list.length;\n\n        for (var i = 0; i < list.length; i++) {\n          if (xXf.equals(list[i])) return i;\n        }\n\n        list.push(xXf);\n        this.cellXfs.count = list.length;\n        return len;\n      }\n    }, {\n      kind: \"method\",\n      key: \"addNumFmt\",\n      value: function addNumFmt(xNumFmt) {\n        if (xNumFmt.numFmtId <= _lib.NumFmtsCount) return;\n\n        if (this.numFmtRefTable[xNumFmt.numFmtId] === undefined) {\n          this.numFmts.children.push(xNumFmt);\n          this.numFmts.count = this.numFmts.children.length;\n          this.numFmtRefTable[xNumFmt.numFmtId] = xNumFmt;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"newNumFmt\",\n      value: function newNumFmt(formatCode) {\n        if (!formatCode) return new XnumFmt({\n          numFmtId: 0,\n          formatCode: 'general'\n        });\n        var numFmtId = _lib.NumFmtInv[formatCode];\n\n        if (numFmtId !== undefined) {\n          return new XnumFmt({\n            numFmtId,\n            formatCode\n          });\n        }\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.numFmts.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var numFmt = _step.value;\n            if (formatCode === numFmt.formatCode) return numFmt;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        numFmtId = _lib.NumFmtsCount + 1;\n\n        do {\n          if (this.numFmtRefTable[numFmtId]) {\n            numFmtId++;\n          } else {\n            this.addNumFmt(new XnumFmt({\n              numFmtId,\n              formatCode\n            }));\n            break;\n          }\n        } while (1);\n\n        return new XnumFmt({\n          numFmtId,\n          formatCode\n        });\n      }\n    }]\n  };\n}, _node.Node);\n\nexports.XstyleSheet = XstyleSheet;\n\nvar XnumFmts = _decorate([(0, _node.props)('count')], function (_initialize2, _Node3) {\n  var XnumFmts = /*#__PURE__*/function (_Node4) {\n    (0, _inherits2.default)(XnumFmts, _Node4);\n\n    function XnumFmts() {\n      var _getPrototypeOf2;\n\n      var _this2;\n\n      (0, _classCallCheck2.default)(this, XnumFmts);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this2 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf15.default)(XnumFmts)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n      _initialize2((0, _assertThisInitialized2.default)(_this2));\n\n      return _this2;\n    }\n\n    return XnumFmts;\n  }(_Node3);\n\n  return {\n    F: XnumFmts,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"numFmts\";\n      }\n\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (this.count) return (0, _get2.default)((0, _getPrototypeOf15.default)(XnumFmts.prototype), \"render\", this).call(this);\n        return '';\n      }\n    }]\n  };\n}, _node.Node);\n\nexports.XnumFmts = XnumFmts;\n\nvar XnumFmt = _decorate([(0, _node.props)('numFmtId', 'formatCode')], function (_initialize3, _Node5) {\n  var XnumFmt = /*#__PURE__*/function (_Node6) {\n    (0, _inherits2.default)(XnumFmt, _Node6);\n\n    function XnumFmt() {\n      var _getPrototypeOf3;\n\n      var _this3;\n\n      (0, _classCallCheck2.default)(this, XnumFmt);\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _this3 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf3 = (0, _getPrototypeOf15.default)(XnumFmt)).call.apply(_getPrototypeOf3, [this].concat(args)));\n\n      _initialize3((0, _assertThisInitialized2.default)(_this3));\n\n      return _this3;\n    }\n\n    return XnumFmt;\n  }(_Node5);\n\n  return {\n    F: XnumFmt,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"numFmt\";\n      }\n\n    }]\n  };\n}, _node.Node);\n\nexports.XnumFmt = XnumFmt;\n\nvar Xfonts = _decorate([(0, _node.props)('count')], function (_initialize4, _Node7) {\n  var Xfonts = /*#__PURE__*/function (_Node8) {\n    (0, _inherits2.default)(Xfonts, _Node8);\n\n    function Xfonts() {\n      var _getPrototypeOf4;\n\n      var _this4;\n\n      (0, _classCallCheck2.default)(this, Xfonts);\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      _this4 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf4 = (0, _getPrototypeOf15.default)(Xfonts)).call.apply(_getPrototypeOf4, [this].concat(args)));\n\n      _initialize4((0, _assertThisInitialized2.default)(_this4));\n\n      return _this4;\n    }\n\n    return Xfonts;\n  }(_Node7);\n\n  return {\n    F: Xfonts,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"fonts\";\n      }\n\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (this.count) return (0, _get2.default)((0, _getPrototypeOf15.default)(Xfonts.prototype), \"render\", this).call(this);\n        return '';\n      }\n    }]\n  };\n}, _node.Node);\n\nexports.Xfonts = Xfonts;\n\nvar Xfont = _decorate([(0, _node.props)('sz', 'name', 'family', 'charset', 'color', 'b', 'i', 'u')], function (_initialize5, _Node9) {\n  var Xfont = /*#__PURE__*/function (_Node10) {\n    (0, _inherits2.default)(Xfont, _Node10);\n\n    function Xfont() {\n      var _getPrototypeOf5;\n\n      var _this5;\n\n      (0, _classCallCheck2.default)(this, Xfont);\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      _this5 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf5 = (0, _getPrototypeOf15.default)(Xfont)).call.apply(_getPrototypeOf5, [this].concat(args)));\n\n      _initialize5((0, _assertThisInitialized2.default)(_this5));\n\n      return _this5;\n    }\n\n    return Xfont;\n  }(_Node9);\n\n  return {\n    F: Xfont,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"font\";\n      }\n\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var str = '<font>';\n        if (this.sz) str += `<sz val=\"${this.sz}\"/>`;\n        if (this.name) str += `<name val=\"${this.name}\"/>`;\n        if (this.family) str += `<family val=\"${this.family}\"/>`;\n        if (this.charset) str += `<charset val=\"${this.charset}\"/>`;\n        if (this.color) str += `<color rgb=\"${this.color}\"/>`;\n        if (this.b) str += '<b/>';\n        if (this.i) str += '<i/>';\n        if (this.u) str += '<u/>';\n        return str + '</font>';\n      }\n    }, {\n      kind: \"method\",\n      key: \"equals\",\n      value: function equals(o) {\n        return this.sz === o.sz && this.name === o.name && this.family === o.family && this.charset === o.charset && this.color === o.color && this.b === o.b && this.i === o.i && this.u === o.u;\n      }\n    }]\n  };\n}, _node.Node);\n\nexports.Xfont = Xfont;\n\nvar Xfills = _decorate([(0, _node.props)('count')], function (_initialize6, _Node11) {\n  var Xfills = /*#__PURE__*/function (_Node12) {\n    (0, _inherits2.default)(Xfills, _Node12);\n\n    function Xfills() {\n      var _getPrototypeOf6;\n\n      var _this6;\n\n      (0, _classCallCheck2.default)(this, Xfills);\n\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      _this6 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf6 = (0, _getPrototypeOf15.default)(Xfills)).call.apply(_getPrototypeOf6, [this].concat(args)));\n\n      _initialize6((0, _assertThisInitialized2.default)(_this6));\n\n      return _this6;\n    }\n\n    return Xfills;\n  }(_Node11);\n\n  return {\n    F: Xfills,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"fills\";\n      }\n\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (this.count) return (0, _get2.default)((0, _getPrototypeOf15.default)(Xfills.prototype), \"render\", this).call(this);\n        return '';\n      }\n    }]\n  };\n}, _node.Node);\n\nexports.Xfills = Xfills;\n\nvar Xfill = _decorate([(0, _node.props)('patternFill')], function (_initialize7, _Node13) {\n  var Xfill = /*#__PURE__*/function (_Node14) {\n    (0, _inherits2.default)(Xfill, _Node14);\n\n    function Xfill() {\n      var _getPrototypeOf7;\n\n      var _this7;\n\n      (0, _classCallCheck2.default)(this, Xfill);\n\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      _this7 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf7 = (0, _getPrototypeOf15.default)(Xfill)).call.apply(_getPrototypeOf7, [this].concat(args)));\n\n      _initialize7((0, _assertThisInitialized2.default)(_this7));\n\n      return _this7;\n    }\n\n    return Xfill;\n  }(_Node13);\n\n  return {\n    F: Xfill,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"fill\";\n      }\n\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return `<fill>${this.patternFill.render()}</fill>`;\n      }\n    }, {\n      kind: \"method\",\n      key: \"equals\",\n      value: function equals(o) {\n        var pf1 = this.patternFill;\n        var pf2 = o.patternFill;\n\n        if (pf1 && pf2) {\n          return pf1.patternType === pf2.patternType && pf1.fgColor === pf2.fgColor && pf1.bgColor === pf2.bgColor;\n        }\n\n        return !pf1 && !pf2;\n      }\n    }]\n  };\n}, _node.Node);\n\nexports.Xfill = Xfill;\n\nvar XpatternFill = _decorate([(0, _node.props)('patternType', 'fgColor', 'bgColor')], function (_initialize8, _Node15) {\n  var XpatternFill = /*#__PURE__*/function (_Node16) {\n    (0, _inherits2.default)(XpatternFill, _Node16);\n\n    function XpatternFill() {\n      var _getPrototypeOf8;\n\n      var _this8;\n\n      (0, _classCallCheck2.default)(this, XpatternFill);\n\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      _this8 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf8 = (0, _getPrototypeOf15.default)(XpatternFill)).call.apply(_getPrototypeOf8, [this].concat(args)));\n\n      _initialize8((0, _assertThisInitialized2.default)(_this8));\n\n      return _this8;\n    }\n\n    return XpatternFill;\n  }(_Node15);\n\n  return {\n    F: XpatternFill,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"patternFill\";\n      }\n\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var str = `<patternFill patternType=\"${this.patternType}\">`;\n        if (this.fgColor) str += `<fgColor rgb=\"${this.fgColor}\"/>`;\n        if (this.bgColor) str += `<bgColor rgb=\"${this.bgColor}\"/>`;\n        return str + '</patternFill>';\n      }\n    }]\n  };\n}, _node.Node);\n\nexports.XpatternFill = XpatternFill;\n\nvar Xborders = _decorate([(0, _node.props)('count')], function (_initialize9, _Node17) {\n  var Xborders = /*#__PURE__*/function (_Node18) {\n    (0, _inherits2.default)(Xborders, _Node18);\n\n    function Xborders() {\n      var _getPrototypeOf9;\n\n      var _this9;\n\n      (0, _classCallCheck2.default)(this, Xborders);\n\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n\n      _this9 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf9 = (0, _getPrototypeOf15.default)(Xborders)).call.apply(_getPrototypeOf9, [this].concat(args)));\n\n      _initialize9((0, _assertThisInitialized2.default)(_this9));\n\n      return _this9;\n    }\n\n    return Xborders;\n  }(_Node17);\n\n  return {\n    F: Xborders,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"borders\";\n      }\n\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (this.count) return (0, _get2.default)((0, _getPrototypeOf15.default)(Xborders.prototype), \"render\", this).call(this);\n        return '';\n      }\n    }]\n  };\n}, _node.Node);\n\nexports.Xborders = Xborders;\n\nvar Xborder = _decorate([(0, _node.props)('left', 'right', 'top', 'bottom')], function (_initialize10, _Node19) {\n  var Xborder = /*#__PURE__*/function (_Node20) {\n    (0, _inherits2.default)(Xborder, _Node20);\n\n    function Xborder() {\n      var _getPrototypeOf10;\n\n      var _this10;\n\n      (0, _classCallCheck2.default)(this, Xborder);\n\n      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        args[_key9] = arguments[_key9];\n      }\n\n      _this10 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf10 = (0, _getPrototypeOf15.default)(Xborder)).call.apply(_getPrototypeOf10, [this].concat(args)));\n\n      _initialize10((0, _assertThisInitialized2.default)(_this10));\n\n      return _this10;\n    }\n\n    return Xborder;\n  }(_Node19);\n\n  return {\n    F: Xborder,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"border\";\n      }\n\n    }, {\n      kind: \"method\",\n      key: \"_renderLine\",\n      value: function _renderLine(pos) {\n        var posVal = this[pos];\n        if (!posVal) return '';\n        var str = `<${pos} style=\"${posVal.style}\">`;\n        if (posVal.color) str += `<color rgb=\"${posVal.color}\"/>`;\n        return str + `</${pos}>`;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var str = '<border>';\n        str += this._renderLine('left');\n        str += this._renderLine('right');\n        str += this._renderLine('top');\n        str += this._renderLine('bottom');\n        return str + '</border>';\n      }\n    }, {\n      kind: \"method\",\n      key: \"equals\",\n      value: function equals(o) {\n        var check = function check(a, b) {\n          if (a && b) {\n            return a.style === b.style && a.color === b.color;\n          }\n\n          return !a && !b;\n        };\n\n        return check(this.left, o.left) && check(this.right, o.right) && check(this.top, o.top) && check(this.bottom, o.bottom);\n      }\n    }]\n  };\n}, _node.Node);\n\nexports.Xborder = Xborder;\n\nvar XcellStyles = _decorate([(0, _node.props)('count')], function (_initialize11, _Node21) {\n  var XcellStyles = /*#__PURE__*/function (_Node22) {\n    (0, _inherits2.default)(XcellStyles, _Node22);\n\n    function XcellStyles() {\n      var _getPrototypeOf11;\n\n      var _this11;\n\n      (0, _classCallCheck2.default)(this, XcellStyles);\n\n      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        args[_key10] = arguments[_key10];\n      }\n\n      _this11 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf11 = (0, _getPrototypeOf15.default)(XcellStyles)).call.apply(_getPrototypeOf11, [this].concat(args)));\n\n      _initialize11((0, _assertThisInitialized2.default)(_this11));\n\n      return _this11;\n    }\n\n    return XcellStyles;\n  }(_Node21);\n\n  return {\n    F: XcellStyles,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"cellStyles\";\n      }\n\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (this.count) return (0, _get2.default)((0, _getPrototypeOf15.default)(XcellStyles.prototype), \"render\", this).call(this);\n        return '';\n      }\n    }]\n  };\n}, _node.Node);\n\nexports.XcellStyles = XcellStyles;\n\nvar XcellStyle = _decorate([(0, _node.props)('builtInId', 'customBuiltIn', 'hidden', 'iLevel', 'name', 'xfId')], function (_initialize12, _Node23) {\n  var XcellStyle = /*#__PURE__*/function (_Node24) {\n    (0, _inherits2.default)(XcellStyle, _Node24);\n\n    function XcellStyle() {\n      var _getPrototypeOf12;\n\n      var _this12;\n\n      (0, _classCallCheck2.default)(this, XcellStyle);\n\n      for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n        args[_key11] = arguments[_key11];\n      }\n\n      _this12 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf12 = (0, _getPrototypeOf15.default)(XcellStyle)).call.apply(_getPrototypeOf12, [this].concat(args)));\n\n      _initialize12((0, _assertThisInitialized2.default)(_this12));\n\n      return _this12;\n    }\n\n    return XcellStyle;\n  }(_Node23);\n\n  return {\n    F: XcellStyle,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"cellStyle\";\n      }\n\n    }]\n  };\n}, _node.Node);\n\nexports.XcellStyle = XcellStyle;\n\nvar XcellStyleXfs = _decorate([(0, _node.props)('count')], function (_initialize13, _Node25) {\n  var XcellStyleXfs = /*#__PURE__*/function (_Node26) {\n    (0, _inherits2.default)(XcellStyleXfs, _Node26);\n\n    function XcellStyleXfs() {\n      var _getPrototypeOf13;\n\n      var _this13;\n\n      (0, _classCallCheck2.default)(this, XcellStyleXfs);\n\n      for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n        args[_key12] = arguments[_key12];\n      }\n\n      _this13 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf13 = (0, _getPrototypeOf15.default)(XcellStyleXfs)).call.apply(_getPrototypeOf13, [this].concat(args)));\n\n      _initialize13((0, _assertThisInitialized2.default)(_this13));\n\n      return _this13;\n    }\n\n    return XcellStyleXfs;\n  }(_Node25);\n\n  return {\n    F: XcellStyleXfs,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"cellStyleXfs\";\n      }\n\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (this.count) return (0, _get2.default)((0, _getPrototypeOf15.default)(XcellStyleXfs.prototype), \"render\", this).call(this);\n        return '';\n      }\n    }]\n  };\n}, _node.Node);\n\nexports.XcellStyleXfs = XcellStyleXfs;\n\nvar XcellXfs = _decorate([(0, _node.props)('count')], function (_initialize14, _Node27) {\n  var XcellXfs = /*#__PURE__*/function (_Node28) {\n    (0, _inherits2.default)(XcellXfs, _Node28);\n\n    function XcellXfs() {\n      var _getPrototypeOf14;\n\n      var _this14;\n\n      (0, _classCallCheck2.default)(this, XcellXfs);\n\n      for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n        args[_key13] = arguments[_key13];\n      }\n\n      _this14 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf14 = (0, _getPrototypeOf15.default)(XcellXfs)).call.apply(_getPrototypeOf14, [this].concat(args)));\n\n      _initialize14((0, _assertThisInitialized2.default)(_this14));\n\n      return _this14;\n    }\n\n    return XcellXfs;\n  }(_Node27);\n\n  return {\n    F: XcellXfs,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"cellXfs\";\n      }\n\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (this.count) return (0, _get2.default)((0, _getPrototypeOf15.default)(XcellXfs.prototype), \"render\", this).call(this);\n        return '';\n      }\n    }]\n  };\n}, _node.Node);\n\nexports.XcellXfs = XcellXfs;\n\nvar Xxf = _decorate([(0, _node.props)('applyAlignment', 'applyBorder', 'applyFont', 'applyFill', 'applyNumberFormat', 'applyProtection', 'borderId', 'fillId', 'fontId', 'numFmtId', 'xfId')], function (_initialize15, _Node29) {\n  var Xxf = /*#__PURE__*/function (_Node30) {\n    (0, _inherits2.default)(Xxf, _Node30);\n\n    function Xxf(attrs, children) {\n      var _this15;\n\n      (0, _classCallCheck2.default)(this, Xxf);\n      var defaults = {\n        applyAlignment: false,\n        applyBorder: false,\n        applyFont: false,\n        applyFill: false,\n        applyNumberFormat: false,\n        applyProtection: false,\n        borderId: 0,\n        fillId: 0,\n        fontId: 0,\n        numFmtId: 0\n      };\n      _this15 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf15.default)(Xxf).call(this, _objectSpread({}, defaults, {}, attrs), children));\n\n      _initialize15((0, _assertThisInitialized2.default)(_this15));\n\n      _this15.alignment = new Xalignment();\n      return _this15;\n    }\n\n    return Xxf;\n  }(_Node29);\n\n  return {\n    F: Xxf,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"xf\";\n      }\n\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (this.alignment) {\n          this.children = [this.alignment];\n        }\n\n        return (0, _get2.default)((0, _getPrototypeOf15.default)(Xxf.prototype), \"render\", this).call(this);\n      }\n    }, {\n      kind: \"method\",\n      key: \"equals\",\n      value: function equals(o) {\n        return this.applyAlignment === o.applyAlignment && this.applyBorder === o.applyBorder && this.applyFont === o.applyFont && this.applyFill === o.applyFill && this.applyProtection === o.applyProtection && this.borderId === o.borderId && this.fillId === o.fillId && this.fontId === o.fontId && this.numFmtId === o.numFmtId && this.xfId === o.xfId && this.alignment.equals(o.alignment);\n      }\n    }]\n  };\n}, _node.Node);\n\nexports.Xxf = Xxf;\n\nvar Xalignment = _decorate([(0, _node.props)('horizontal', 'indent', 'shrinkToFit', 'textRotation', 'vertical', 'wrapText')], function (_initialize16, _Node31) {\n  var Xalignment = /*#__PURE__*/function (_Node32) {\n    (0, _inherits2.default)(Xalignment, _Node32);\n\n    function Xalignment(attrs) {\n      var _this16;\n\n      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      (0, _classCallCheck2.default)(this, Xalignment);\n      var defaults = {\n        horizontal: 'general',\n        indent: 0,\n        shrinkToFit: false,\n        textRotation: 0,\n        vertical: 'bottom',\n        wrapText: false\n      };\n      _this16 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf15.default)(Xalignment).call(this, _objectSpread({}, defaults, {}, attrs), children));\n\n      _initialize16((0, _assertThisInitialized2.default)(_this16));\n\n      return _this16;\n    }\n\n    return Xalignment;\n  }(_Node31);\n\n  return {\n    F: Xalignment,\n    d: [{\n      kind: \"field\",\n      key: \"__name\",\n\n      value() {\n        return \"alignment\";\n      }\n\n    }, {\n      kind: \"method\",\n      key: \"equals\",\n      value: function equals(o) {\n        return this.horizontal === o.horizontal && this.indent === o.indent && this.shrinkToFit === o.shrinkToFit && this.textRotation === o.textRotation && this.vertical === o.vertical && this.wrapText === o.wrapText;\n      }\n    }]\n  };\n}, _node.Node);\n\nexports.Xalignment = Xalignment;","map":null,"metadata":{},"sourceType":"script"}
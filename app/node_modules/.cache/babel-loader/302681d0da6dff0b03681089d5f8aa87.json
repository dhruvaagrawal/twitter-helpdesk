{"ast":null,"code":"const reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nexport const reorderQuoteMap = ({\n  quoteMap,\n  source,\n  destination\n}) => {\n  const current = [...quoteMap[source.droppableId]];\n  const next = [...quoteMap[destination.droppableId]];\n  const target = current[source.index]; // moving to same list\n\n  if (source.droppableId === destination.droppableId) {\n    const reordered = reorder(current, source.index, destination.index);\n    const result = { ...quoteMap,\n      [source.droppableId]: reordered\n    };\n    return {\n      quoteMap: result\n    };\n  }\n\n  current.splice(source.index, 1);\n  next.splice(destination.index, 0, target);\n  const result = { ...quoteMap,\n    [source.droppableId]: current,\n    [destination.droppableId]: next\n  };\n  return {\n    quoteMap: result\n  };\n};\n\nconst clone = obj => Object.assign({}, obj);\n\nexport const renameKey = (object, key, newKey) => {\n  const clonedObj = clone(object);\n  const targetKey = clonedObj[key];\n  delete clonedObj[key];\n  clonedObj[newKey] = targetKey;\n  return clonedObj;\n};\nexport default reorder;","map":{"version":3,"sources":["/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/journeys/journey-ivr/taskTracker/reorder.js"],"names":["reorder","list","startIndex","endIndex","result","Array","from","removed","splice","reorderQuoteMap","quoteMap","source","destination","current","droppableId","next","target","index","reordered","clone","obj","Object","assign","renameKey","object","key","newKey","clonedObj","targetKey"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,KAAgC;AAC5C,QAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAf;AACA,QAAM,CAACM,OAAD,IAAYH,MAAM,CAACI,MAAP,CAAcN,UAAd,EAA0B,CAA1B,CAAlB;AACAE,EAAAA,MAAM,CAACI,MAAP,CAAcL,QAAd,EAAwB,CAAxB,EAA2BI,OAA3B;AACA,SAAOH,MAAP;AACD,CALH;;AAOE,OAAO,MAAMK,eAAe,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,MAAZ;AAAoBC,EAAAA;AAApB,CAAD,KAAuC;AACpE,QAAMC,OAAO,GAAG,CAAC,GAAGH,QAAQ,CAACC,MAAM,CAACG,WAAR,CAAZ,CAAhB;AACA,QAAMC,IAAI,GAAG,CAAC,GAAGL,QAAQ,CAACE,WAAW,CAACE,WAAb,CAAZ,CAAb;AACA,QAAME,MAAM,GAAGH,OAAO,CAACF,MAAM,CAACM,KAAR,CAAtB,CAHoE,CAKpE;;AACA,MAAIN,MAAM,CAACG,WAAP,KAAuBF,WAAW,CAACE,WAAvC,EAAoD;AAClD,UAAMI,SAAS,GAAGlB,OAAO,CACvBa,OADuB,EAEvBF,MAAM,CAACM,KAFgB,EAGvBL,WAAW,CAACK,KAHW,CAAzB;AAKA,UAAMb,MAAM,GAAG,EACb,GAAGM,QADU;AAEb,OAACC,MAAM,CAACG,WAAR,GAAsBI;AAFT,KAAf;AAIA,WAAO;AACLR,MAAAA,QAAQ,EAAEN;AADL,KAAP;AAGD;;AACDS,EAAAA,OAAO,CAACL,MAAR,CAAeG,MAAM,CAACM,KAAtB,EAA6B,CAA7B;AACAF,EAAAA,IAAI,CAACP,MAAL,CAAYI,WAAW,CAACK,KAAxB,EAA+B,CAA/B,EAAkCD,MAAlC;AACA,QAAMZ,MAAM,GAAG,EACb,GAAGM,QADU;AAEb,KAACC,MAAM,CAACG,WAAR,GAAsBD,OAFT;AAGb,KAACD,WAAW,CAACE,WAAb,GAA2BC;AAHd,GAAf;AAMA,SAAO;AACLL,IAAAA,QAAQ,EAAEN;AADL,GAAP;AAGD,CA/BM;;AAiCP,MAAMe,KAAK,GAAIC,GAAD,IAASC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,GAAlB,CAAvB;;AAEA,OAAO,MAAMG,SAAS,GAAG,CAACC,MAAD,EAASC,GAAT,EAAcC,MAAd,KAAyB;AAChD,QAAMC,SAAS,GAAGR,KAAK,CAACK,MAAD,CAAvB;AACA,QAAMI,SAAS,GAAGD,SAAS,CAACF,GAAD,CAA3B;AACA,SAAOE,SAAS,CAACF,GAAD,CAAhB;AACAE,EAAAA,SAAS,CAACD,MAAD,CAAT,GAAoBE,SAApB;AACA,SAAOD,SAAP;AACD,CANM;AAST,eAAe3B,OAAf","sourcesContent":["const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n  \n  export const reorderQuoteMap = ({ quoteMap, source, destination }) => {\n    const current = [...quoteMap[source.droppableId]];\n    const next = [...quoteMap[destination.droppableId]];\n    const target = current[source.index];\n  \n    // moving to same list\n    if (source.droppableId === destination.droppableId) {\n      const reordered = reorder(\n        current,\n        source.index,\n        destination.index,\n      );\n      const result = {\n        ...quoteMap,\n        [source.droppableId]: reordered,\n      };\n      return {\n        quoteMap: result,\n      };\n    }\n    current.splice(source.index, 1);\n    next.splice(destination.index, 0, target);\n    const result = {\n      ...quoteMap,\n      [source.droppableId]: current,\n      [destination.droppableId]: next,\n    };\n  \n    return {\n      quoteMap: result,\n    };\n  };\n  \n  const clone = (obj) => Object.assign({}, obj);\n  \n  export const renameKey = (object, key, newKey) => {\n    const clonedObj = clone(object);\n    const targetKey = clonedObj[key];\n    delete clonedObj[key];\n    clonedObj[newKey] = targetKey;\n    return clonedObj;\n  };\n  \n  \nexport default reorder;  "]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from\"/Users/dhruvaagrawal/Desktop/Work/Projects/Webdev.nosync/Twitter/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import ChatData from\"assets/data/chat.data.json\";import{Badge}from'antd';import AvatarStatus from'components/shared-components/AvatarStatus';import{COLOR_1,COLOR_4}from'constants/ChartConstant';import{useHistory}from\"react-router-dom\";var ChatMenu=function ChatMenu(_ref){var match=_ref.match,location=_ref.location;var _useState=useState(ChatData),_useState2=_slicedToArray(_useState,2),list=_useState2[0],setList=_useState2[1];var history=useHistory();var openChat=function openChat(id){var data=list.map(function(elm){if(elm.id===id){elm.unread=0;}return elm;});setList(data);history.push(\"\".concat(match.url,\"/\").concat(id));};var id=parseInt(location.pathname.match(/\\/([^/]+)\\/?$/)[1]);return/*#__PURE__*/React.createElement(\"div\",{className:\"chat-menu\"},/*#__PURE__*/React.createElement(\"div\",{className:\"chat-menu-list\"},list.map(function(item,i){return/*#__PURE__*/React.createElement(\"div\",{key:\"chat-item-\".concat(item.id),onClick:function onClick(){return openChat(item.id);},className:\"chat-menu-list-item \".concat(i===list.length-1?'last':'',\" \").concat(item.id===id?'selected':''),style:{border:\"1px solid \".concat(COLOR_4),borderRadius:'4px',margin:'0 0 5px',paddingRight:'10px'}},/*#__PURE__*/React.createElement(AvatarStatus,{src:item.avatar,name:item.name,subTitle:item.msg[item.msg.length-1].text}),/*#__PURE__*/React.createElement(\"div\",{className:\"text-right\"},item.unread===0?/*#__PURE__*/React.createElement(\"span\",null):/*#__PURE__*/React.createElement(Badge,{count:item.unread,style:{backgroundColor:COLOR_1,fontSize:'0.75rem'}})));})));};export default ChatMenu;","map":{"version":3,"sources":["/Users/dhruvaagrawal/Desktop/Work/Projects/Webdev.nosync/Twitter/app/src/views/app-views/helpdesk/ChatMenu.js"],"names":["React","useState","ChatData","Badge","AvatarStatus","COLOR_1","COLOR_4","useHistory","ChatMenu","match","location","list","setList","history","openChat","id","data","map","elm","unread","push","url","parseInt","pathname","item","i","length","border","borderRadius","margin","paddingRight","avatar","name","msg","text","backgroundColor","fontSize"],"mappings":"2LAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,QAAP,KAAqB,4BAArB,CACA,OAASC,KAAT,KAAsB,MAAtB,CACA,MAAOC,CAAAA,YAAP,KAAyB,2CAAzB,CACA,OAASC,OAAT,CAAkBC,OAAlB,KAAiC,yBAAjC,CACA,OAASC,UAAT,KAA2B,kBAA3B,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAyB,IAAtBC,CAAAA,KAAsB,MAAtBA,KAAsB,CAAfC,QAAe,MAAfA,QAAe,eACfT,QAAQ,CAACC,QAAD,CADO,wCACjCS,IADiC,eAC3BC,OAD2B,eAEzC,GAAIC,CAAAA,OAAO,CAAGN,UAAU,EAAxB,CACA,GAAMO,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,EAAE,CAAI,CACtB,GAAMC,CAAAA,IAAI,CAAGL,IAAI,CAACM,GAAL,CAAU,SAAAC,GAAG,CAAI,CAC7B,GAAGA,GAAG,CAACH,EAAJ,GAAWA,EAAd,CAAkB,CACjBG,GAAG,CAACC,MAAJ,CAAa,CAAb,CACA,CACD,MAAOD,CAAAA,GAAP,CACA,CALY,CAAb,CAMAN,OAAO,CAACI,IAAD,CAAP,CACAH,OAAO,CAACO,IAAR,WAAgBX,KAAK,CAACY,GAAtB,aAA6BN,EAA7B,GACA,CATD,CAWA,GAAMA,CAAAA,EAAE,CAAGO,QAAQ,CAACZ,QAAQ,CAACa,QAAT,CAAkBd,KAAlB,CAAwB,eAAxB,EAAyC,CAAzC,CAAD,CAAnB,CAEA,mBACC,2BAAK,SAAS,CAAC,WAAf,eACC,2BAAK,SAAS,CAAC,gBAAf,EAEEE,IAAI,CAACM,GAAL,CAAU,SAACO,IAAD,CAAOC,CAAP,qBACT,2BACC,GAAG,qBAAgBD,IAAI,CAACT,EAArB,CADJ,CAEC,OAAO,CAAG,yBAAMD,CAAAA,QAAQ,CAACU,IAAI,CAACT,EAAN,CAAd,EAFX,CAGC,SAAS,+BAA2BU,CAAC,GAAMd,IAAI,CAACe,MAAL,CAAc,CAArB,CAAyB,MAAzB,CAAkC,EAA7D,aAAqEF,IAAI,CAACT,EAAL,GAAYA,EAAZ,CAAiB,UAAjB,CAA8B,EAAnG,CAHV,CAIC,KAAK,CAAE,CAAEY,MAAM,qBAAerB,OAAf,CAAR,CAAkCsB,YAAY,CAAE,KAAhD,CAAuDC,MAAM,CAAE,SAA/D,CAA0EC,YAAY,CAAE,MAAxF,CAJR,eAMC,oBAAC,YAAD,EAAc,GAAG,CAAGN,IAAI,CAACO,MAAzB,CAAkC,IAAI,CAAGP,IAAI,CAACQ,IAA9C,CAAqD,QAAQ,CAAGR,IAAI,CAACS,GAAL,CAAST,IAAI,CAACS,GAAL,CAASP,MAAT,CAAkB,CAA3B,EAA8BQ,IAA9F,EAND,cAOC,2BAAK,SAAS,CAAC,YAAf,EACGV,IAAI,CAACL,MAAL,GAAgB,CAAhB,cAAoB,gCAApB,cAAoC,oBAAC,KAAD,EAAO,KAAK,CAAGK,IAAI,CAACL,MAApB,CAA6B,KAAK,CAAE,CAAEgB,eAAe,CAAE9B,OAAnB,CAA4B+B,QAAQ,CAAE,SAAtC,CAApC,EADvC,CAPD,CADS,EAAV,CAFF,CADD,CADD,CAqBA,CArCD,CAuCA,cAAe5B,CAAAA,QAAf","sourcesContent":["import React, { useState } from 'react'\nimport ChatData from \"assets/data/chat.data.json\"\nimport { Badge } from 'antd';\nimport AvatarStatus from 'components/shared-components/AvatarStatus';\nimport { COLOR_1, COLOR_4 } from 'constants/ChartConstant';\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatMenu = ({ match, location }) => {\n\tconst [ list, setList ] = useState(ChatData);\n\tlet history = useHistory();\n\tconst openChat = id => {\n\t\tconst data = list.map( elm => {\n\t\t\tif(elm.id === id) {\n\t\t\t\telm.unread = 0\n\t\t\t}\n\t\t\treturn elm\n\t\t})\n\t\tsetList(data)\n\t\thistory.push(`${match.url}/${id}`)\n\t}\n\n\tconst id = parseInt(location.pathname.match(/\\/([^/]+)\\/?$/)[1])\n\n\treturn (\n\t\t<div className=\"chat-menu\">\n\t\t\t<div className=\"chat-menu-list\">\n\t\t\t\t{\n\t\t\t\t\tlist.map( (item, i) => (\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\tkey={ `chat-item-${item.id}` } \n\t\t\t\t\t\t\tonClick={ () => openChat(item.id) } \n\t\t\t\t\t\t\tclassName={ `chat-menu-list-item ${ i === (list.length - 1)? 'last' : '' } ${ item.id === id ? 'selected' : '' }` }\n\t\t\t\t\t\t\tstyle={{ border: `1px solid ${COLOR_4}`, borderRadius: '4px', margin: '0 0 5px', paddingRight: '10px' }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<AvatarStatus src={ item.avatar } name={ item.name } subTitle={ item.msg[item.msg.length - 1].text } />\n\t\t\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t\t\t{ item.unread === 0 ? <span></span> : <Badge count={ item.unread } style={{ backgroundColor: COLOR_1, fontSize: '0.75rem' }} />}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default ChatMenu"]},"metadata":{},"sourceType":"module"}
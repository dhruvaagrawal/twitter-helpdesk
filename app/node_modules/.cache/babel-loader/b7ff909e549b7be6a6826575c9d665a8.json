{"ast":null,"code":"'use strict';\n/**\n * response.js\n *\n * Response class provides content decoding\n */\n\nconst STATUS_CODES = require('http').STATUS_CODES;\n\nconst Headers = require('./headers.js');\n\nconst Body = require('./body.js');\n\nconst clone = Body.clone;\n/**\n * Response class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\n\nclass Response {\n  constructor(body, opts) {\n    if (!opts) opts = {};\n    Body.call(this, body, opts);\n    this.url = opts.url;\n    this.status = opts.status || 200;\n    this.statusText = opts.statusText || STATUS_CODES[this.status];\n    this.headers = new Headers(opts.headers);\n    Object.defineProperty(this, Symbol.toStringTag, {\n      value: 'Response',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  /**\n   * Convenience property representing if the request ended normally\n   */\n\n\n  get ok() {\n    return this.status >= 200 && this.status < 300;\n  }\n  /**\n   * Clone this response\n   *\n   * @return  Response\n   */\n\n\n  clone() {\n    return new Response(clone(this), {\n      url: this.url,\n      status: this.status,\n      statusText: this.statusText,\n      headers: this.headers,\n      ok: this.ok\n    });\n  }\n\n}\n\nBody.mixIn(Response.prototype);\nObject.defineProperty(Response.prototype, Symbol.toStringTag, {\n  value: 'ResponsePrototype',\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nmodule.exports = Response;","map":null,"metadata":{},"sourceType":"script"}
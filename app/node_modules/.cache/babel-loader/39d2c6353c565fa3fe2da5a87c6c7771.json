{"ast":null,"code":"\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar forge = require('node-forge');\n\nvar pki = forge.pki;\n\nvar RSA = /*#__PURE__*/function () {\n  function RSA() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RSA);\n\n    this.options = _objectSpread({\n      keySize: 4096,\n      entropy: undefined\n    }, options);\n\n    if (this.options.entropy) {\n      this._entropy(this.options.entropy);\n    }\n  }\n  /**\n   * Generates RSA keypair\n   *\n   * @param {function} callback Function that gets called when keys are generated\n   * @param {int} [keySize=4096] Integer that determines the RSA key size\n   *\n   * @example\n   * rsa.generateKeyPair(keys => console.log(keys), 1024);\n   *\n   * @method\n   */\n\n\n  _createClass(RSA, [{\n    key: \"generateKeyPair\",\n    value: function generateKeyPair(callback, keySize) {\n      // Generate key pair using forge\n      pki.rsa.generateKeyPair({\n        bits: keySize || this.options.keySize,\n        workers: -1\n      }, function (err, keyPair) {\n        // Cast key pair to PEM format\n        keyPair.publicKey = pki.publicKeyToPem(keyPair.publicKey);\n        keyPair.privateKey = pki.privateKeyToPem(keyPair.privateKey);\n        callback(keyPair);\n      });\n    }\n    /**\n     * Generates RSA keypair\n     *\n     * @param {int} [keySize=4096] Integer that determines the RSA key size\n     *\n     * @example\n     * rsa.generateKeyPair(1024).then(keys => console.log(keys));\n     *\n     * @return {Promise} Promise that gets resolved when generation is ready\n     * @method\n     */\n\n  }, {\n    key: \"generateKeyPairAsync\",\n    value: function generateKeyPairAsync(keySize) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        _this.generateKeyPair(resolve, keySize);\n      });\n    }\n    /**\n     * Private function to add more entropy\n     *\n     * @param {String|Number} input Something random\n     *\n     * @method\n     */\n\n  }, {\n    key: \"_entropy\",\n    value: function _entropy(input) {\n      var inputString = String(input);\n      var bytes = forge.util.encodeUtf8(inputString);\n      forge.random.collect(bytes);\n    }\n  }]);\n\n  return RSA;\n}();\n\nmodule.exports = RSA;","map":null,"metadata":{},"sourceType":"script"}
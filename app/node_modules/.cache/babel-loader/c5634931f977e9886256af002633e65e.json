{"ast":null,"code":"var assert = require('assert');\n\nvar dirname = require('path').dirname;\n\nvar resolve = require('path').resolve;\n\nvar isInside = require('path-is-inside');\n\nvar rimraf = require('rimraf');\n\nvar lstat = require('graceful-fs').lstat;\n\nvar readdir = require('graceful-fs').readdir;\n\nvar rmdir = require('graceful-fs').rmdir;\n\nvar unlink = require('graceful-fs').unlink;\n\nmodule.exports = vacuum;\n\nfunction vacuum(leaf, options, cb) {\n  assert(typeof leaf === 'string', 'must pass in path to remove');\n  assert(typeof cb === 'function', 'must pass in callback');\n  if (!options) options = {};\n  assert(typeof options === 'object', 'options must be an object');\n  var log = options.log ? options.log : function () {};\n  leaf = leaf && resolve(leaf);\n  var base = options.base && resolve(options.base);\n\n  if (base && !isInside(leaf, base)) {\n    return cb(new Error(leaf + ' is not a child of ' + base));\n  }\n\n  lstat(leaf, function (error, stat) {\n    if (error) {\n      if (error.code === 'ENOENT') return cb(null);\n      log(error.stack);\n      return cb(error);\n    }\n\n    if (!(stat && (stat.isDirectory() || stat.isSymbolicLink() || stat.isFile()))) {\n      log(leaf, 'is not a directory, file, or link');\n      return cb(new Error(leaf + ' is not a directory, file, or link'));\n    }\n\n    if (options.purge) {\n      log('purging', leaf);\n      rimraf(leaf, function (error) {\n        if (error) return cb(error);\n        next(dirname(leaf));\n      });\n    } else if (!stat.isDirectory()) {\n      log('removing', leaf);\n      unlink(leaf, function (error) {\n        if (error) return cb(error);\n        next(dirname(leaf));\n      });\n    } else {\n      next(leaf);\n    }\n  });\n\n  function next(branch) {\n    branch = branch && resolve(branch); // either we've reached the base or we've reached the root\n\n    if (base && branch === base || branch === dirname(branch)) {\n      log('finished vacuuming up to', branch);\n      return cb(null);\n    }\n\n    readdir(branch, function (error, files) {\n      if (error) {\n        if (error.code === 'ENOENT') return cb(null);\n        log('unable to check directory', branch, 'due to', error.message);\n        return cb(error);\n      }\n\n      if (files.length > 0) {\n        log('quitting because other entries in', branch);\n        return cb(null);\n      }\n\n      if (branch === process.env.HOME) {\n        log('quitting because cannot remove home directory', branch);\n        return cb(null);\n      }\n\n      log('removing', branch);\n      lstat(branch, function (error, stat) {\n        if (error) {\n          if (error.code === 'ENOENT') return cb(null);\n          log('unable to lstat', branch, 'due to', error.message);\n          return cb(error);\n        }\n\n        var remove = stat.isDirectory() ? rmdir : unlink;\n        remove(branch, function (error) {\n          if (error) {\n            if (error.code === 'ENOENT') {\n              log('quitting because lost the race to remove', branch);\n              return cb(null);\n            }\n\n            if (error.code === 'ENOTEMPTY' || error.code === 'EEXIST') {\n              log('quitting because new (racy) entries in', branch);\n              return cb(null);\n            }\n\n            log('unable to remove', branch, 'due to', error.message);\n            return cb(error);\n          }\n\n          next(dirname(branch));\n        });\n      });\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":";\n\n(function () {\n  // windows: running 'npm blah' in this folder will invoke WSH, not node.\n\n  /* globals WScript */\n  if (typeof WScript !== 'undefined') {\n    WScript.echo('npm does not work when run\\n' + 'with the Windows Scripting Host\\n\\n' + '\"cd\" to a different directory,\\n' + 'or type \"npm.cmd <args>\",\\n' + 'or type \"node npm <args>\".');\n    WScript.quit(1);\n    return;\n  }\n\n  var unsupported = require('../lib/utils/unsupported.js');\n\n  unsupported.checkForBrokenNode();\n\n  var gfs = require('graceful-fs'); // Patch the global fs module here at the app level\n\n\n  var fs = gfs.gracefulify(require('fs'));\n\n  var EventEmitter = require('events').EventEmitter;\n\n  var npm = module.exports = new EventEmitter();\n\n  var npmconf = require('./config/core.js');\n\n  var log = require('npmlog');\n\n  var inspect = require('util').inspect; // capture global logging\n\n\n  process.on('log', function (level) {\n    try {\n      return log[level].apply(log, [].slice.call(arguments, 1));\n    } catch (ex) {\n      log.verbose('attempt to log ' + inspect(arguments) + ' crashed: ' + ex.message);\n    }\n  });\n\n  var path = require('path');\n\n  var abbrev = require('abbrev');\n\n  var which = require('which');\n\n  var glob = require('glob');\n\n  var rimraf = require('rimraf');\n\n  var parseJSON = require('./utils/parse-json.js');\n\n  var aliases = require('./config/cmd-list').aliases;\n\n  var cmdList = require('./config/cmd-list').cmdList;\n\n  var plumbing = require('./config/cmd-list').plumbing;\n\n  var output = require('./utils/output.js');\n\n  var startMetrics = require('./utils/metrics.js').start;\n\n  var perf = require('./utils/perf.js');\n\n  perf.emit('time', 'npm');\n  perf.on('timing', function (name, finished) {\n    log.timing(name, 'Completed in', finished + 'ms');\n  });\n  npm.config = {\n    loaded: false,\n    get: function () {\n      throw new Error('npm.load() required');\n    },\n    set: function () {\n      throw new Error('npm.load() required');\n    }\n  };\n  npm.commands = {}; // TUNING\n\n  npm.limit = {\n    fetch: 10,\n    action: 50\n  }; // ***\n\n  npm.lockfileVersion = 1;\n  npm.rollbacks = [];\n\n  try {\n    // startup, ok to do this synchronously\n    var j = parseJSON(fs.readFileSync(path.join(__dirname, '../package.json')) + '');\n    npm.name = j.name;\n    npm.version = j.version;\n  } catch (ex) {\n    try {\n      log.info('error reading version', ex);\n    } catch (er) {}\n\n    npm.version = ex;\n  }\n\n  var commandCache = {};\n  var aliasNames = Object.keys(aliases);\n  var littleGuys = ['isntall', 'verison'];\n  var fullList = cmdList.concat(aliasNames).filter(function (c) {\n    return plumbing.indexOf(c) === -1;\n  });\n  var abbrevs = abbrev(fullList); // we have our reasons\n\n  fullList = npm.fullList = fullList.filter(function (c) {\n    return littleGuys.indexOf(c) === -1;\n  });\n  var registryRefer;\n  Object.keys(abbrevs).concat(plumbing).forEach(function addCommand(c) {\n    Object.defineProperty(npm.commands, c, {\n      get: function () {\n        if (!loaded) {\n          throw new Error('Call npm.load(config, cb) before using this command.\\n' + 'See the README.md or bin/npm-cli.js for example usage.');\n        }\n\n        var a = npm.deref(c);\n\n        if (c === 'la' || c === 'll') {\n          npm.config.set('long', true);\n        }\n\n        npm.command = c;\n        if (commandCache[a]) return commandCache[a];\n\n        var cmd = require(path.join(__dirname, a + '.js'));\n\n        commandCache[a] = function () {\n          var args = Array.prototype.slice.call(arguments, 0);\n\n          if (typeof args[args.length - 1] !== 'function') {\n            args.push(defaultCb);\n          }\n\n          if (args.length === 1) args.unshift([]); // Options are prefixed by a hyphen-minus (-, \\u2d).\n          // Other dash-type chars look similar but are invalid.\n\n          Array(args[0]).forEach(function (arg) {\n            if (/^[\\u2010-\\u2015\\u2212\\uFE58\\uFE63\\uFF0D]/.test(arg)) {\n              log.error('arg', 'Argument starts with non-ascii dash, this is probably invalid:', arg);\n            }\n          });\n\n          if (!registryRefer) {\n            registryRefer = [a].concat(args[0]).map(function (arg) {\n              // exclude anything that might be a URL, path, or private module\n              // Those things will always have a slash in them somewhere\n              if (arg && arg.match && arg.match(/\\/|\\\\/)) {\n                return '[REDACTED]';\n              } else {\n                return arg;\n              }\n            }).filter(function (arg) {\n              return arg && arg.match;\n            }).join(' ');\n            npm.referer = registryRefer;\n          }\n\n          cmd.apply(npm, args);\n        };\n\n        Object.keys(cmd).forEach(function (k) {\n          commandCache[a][k] = cmd[k];\n        });\n        return commandCache[a];\n      },\n      enumerable: fullList.indexOf(c) !== -1,\n      configurable: true\n    }); // make css-case commands callable via camelCase as well\n\n    if (c.match(/-([a-z])/)) {\n      addCommand(c.replace(/-([a-z])/g, function (a, b) {\n        return b.toUpperCase();\n      }));\n    }\n  });\n\n  function defaultCb(er, data) {\n    log.disableProgress();\n    if (er) console.error(er.stack || er.message);else output(data);\n  }\n\n  npm.deref = function (c) {\n    if (!c) return '';\n\n    if (c.match(/[A-Z]/)) {\n      c = c.replace(/([A-Z])/g, function (m) {\n        return '-' + m.toLowerCase();\n      });\n    }\n\n    if (plumbing.indexOf(c) !== -1) return c;\n    var a = abbrevs[c];\n\n    while (aliases[a]) {\n      a = aliases[a];\n    }\n\n    return a;\n  };\n\n  var loaded = false;\n  var loading = false;\n  var loadErr = null;\n  var loadListeners = [];\n\n  function loadCb(er) {\n    loadListeners.forEach(function (cb) {\n      process.nextTick(cb.bind(npm, er, npm));\n    });\n    loadListeners.length = 0;\n  }\n\n  npm.load = function (cli, cb_) {\n    if (!cb_ && typeof cli === 'function') {\n      cb_ = cli;\n      cli = {};\n    }\n\n    if (!cb_) cb_ = function () {};\n    if (!cli) cli = {};\n    loadListeners.push(cb_);\n    if (loaded || loadErr) return cb(loadErr);\n    if (loading) return;\n    loading = true;\n    var onload = true;\n\n    function cb(er) {\n      if (loadErr) return;\n      loadErr = er;\n      if (er) return cb_(er);\n\n      if (npm.config.get('force')) {\n        log.warn('using --force', 'I sure hope you know what you are doing.');\n      }\n\n      npm.config.loaded = true;\n      loaded = true;\n      loadCb(loadErr = er);\n      onload = onload && npm.config.get('onload-script');\n\n      if (onload) {\n        try {\n          require(onload);\n        } catch (err) {\n          log.warn('onload-script', 'failed to require onload script', onload);\n          log.warn('onload-script', err);\n        }\n\n        onload = false;\n      }\n    }\n\n    log.pause();\n    load(npm, cli, cb);\n  };\n\n  function load(npm, cli, cb) {\n    which(process.argv[0], function (er, node) {\n      if (!er && node.toUpperCase() !== process.execPath.toUpperCase()) {\n        log.verbose('node symlink', node);\n        process.execPath = node;\n        process.installPrefix = path.resolve(node, '..', '..');\n      } // look up configs\n\n\n      var builtin = path.resolve(__dirname, '..', 'npmrc');\n      npmconf.load(cli, builtin, function (er, config) {\n        if (er === config) er = null;\n        npm.config = config;\n        if (er) return cb(er); // if the 'project' config is not a filename, and we're\n        // not in global mode, then that means that it collided\n        // with either the default or effective userland config\n\n        if (!config.get('global') && config.sources.project && config.sources.project.type !== 'ini') {\n          log.verbose('config', 'Skipping project config: %s. (matches userconfig)', config.localPrefix + '/.npmrc');\n        } // Include npm-version and node-version in user-agent\n\n\n        var ua = config.get('user-agent') || '';\n        ua = ua.replace(/\\{node-version\\}/gi, process.version);\n        ua = ua.replace(/\\{npm-version\\}/gi, npm.version);\n        ua = ua.replace(/\\{platform\\}/gi, process.platform);\n        ua = ua.replace(/\\{arch\\}/gi, process.arch); // continuous integration platforms\n\n        const ciName = process.env.GERRIT_PROJECT ? 'gerrit' : process.env.GITLAB_CI ? 'gitlab' : process.env.APPVEYOR ? 'appveyor' : process.env.CIRCLECI ? 'circle-ci' : process.env.SEMAPHORE ? 'semaphore' : process.env.DRONE ? 'drone' : process.env.GITHUB_ACTION ? 'github-actions' : process.env.TDDIUM ? 'tddium' : process.env.JENKINS_URL ? 'jenkins' : process.env['bamboo.buildKey'] ? 'bamboo' : process.env.GO_PIPELINE_NAME ? 'gocd' // codeship and a few others\n        : process.env.CI_NAME ? process.env.CI_NAME // test travis after the others, since several CI systems mimic it\n        : process.env.TRAVIS ? 'travis-ci' // aws CodeBuild/CodePipeline\n        : process.env.CODEBUILD_SRC_DIR ? 'aws-codebuild' : process.env.CI === 'true' || process.env.CI === '1' ? 'custom' // Google Cloud Build - it sets almost nothing\n        : process.env.BUILDER_OUTPUT ? 'builder' : false;\n        const ci = ciName ? `ci/${ciName}` : '';\n        ua = ua.replace(/\\{ci\\}/gi, ci);\n        config.set('user-agent', ua.trim());\n\n        if (config.get('metrics-registry') == null) {\n          config.set('metrics-registry', config.get('registry'));\n        }\n\n        var color = config.get('color');\n\n        if (npm.config.get('timing') && npm.config.get('loglevel') === 'notice') {\n          log.level = 'timing';\n        } else {\n          log.level = config.get('loglevel');\n        }\n\n        log.heading = config.get('heading') || 'npm';\n        log.stream = config.get('logstream');\n\n        switch (color) {\n          case 'always':\n            npm.color = true;\n            break;\n\n          case false:\n            npm.color = false;\n            break;\n\n          default:\n            npm.color = process.stdout.isTTY && process.env['TERM'] !== 'dumb';\n            break;\n        }\n\n        if (npm.color) {\n          log.enableColor();\n        } else {\n          log.disableColor();\n        }\n\n        if (config.get('unicode')) {\n          log.enableUnicode();\n        } else {\n          log.disableUnicode();\n        }\n\n        if (config.get('progress') && process.stderr.isTTY && process.env['TERM'] !== 'dumb') {\n          log.enableProgress();\n        } else {\n          log.disableProgress();\n        }\n\n        glob(path.resolve(npm.cache, '_logs', '*-debug.log'), function (er, files) {\n          if (er) return cb(er);\n\n          while (files.length >= npm.config.get('logs-max')) {\n            rimraf.sync(files[0]);\n            files.splice(0, 1);\n          }\n        });\n        log.resume();\n        var umask = npm.config.get('umask');\n        npm.modes = {\n          exec: parseInt('0777', 8) & ~umask,\n          file: parseInt('0666', 8) & ~umask,\n          umask: umask\n        };\n        var gp = Object.getOwnPropertyDescriptor(config, 'globalPrefix');\n        Object.defineProperty(npm, 'globalPrefix', gp);\n        var lp = Object.getOwnPropertyDescriptor(config, 'localPrefix');\n        Object.defineProperty(npm, 'localPrefix', lp);\n        config.set('scope', scopeifyScope(config.get('scope')));\n        npm.projectScope = config.get('scope') || scopeifyScope(getProjectScope(npm.prefix));\n        startMetrics();\n        return cb(null, npm);\n      });\n    });\n  }\n\n  Object.defineProperty(npm, 'prefix', {\n    get: function () {\n      return npm.config.get('global') ? npm.globalPrefix : npm.localPrefix;\n    },\n    set: function (r) {\n      var k = npm.config.get('global') ? 'globalPrefix' : 'localPrefix';\n      npm[k] = r;\n      return r;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(npm, 'bin', {\n    get: function () {\n      if (npm.config.get('global')) return npm.globalBin;\n      return path.resolve(npm.root, '.bin');\n    },\n    enumerable: true\n  });\n  Object.defineProperty(npm, 'globalBin', {\n    get: function () {\n      var b = npm.globalPrefix;\n      if (process.platform !== 'win32') b = path.resolve(b, 'bin');\n      return b;\n    }\n  });\n  Object.defineProperty(npm, 'dir', {\n    get: function () {\n      if (npm.config.get('global')) return npm.globalDir;\n      return path.resolve(npm.prefix, 'node_modules');\n    },\n    enumerable: true\n  });\n  Object.defineProperty(npm, 'globalDir', {\n    get: function () {\n      return process.platform !== 'win32' ? path.resolve(npm.globalPrefix, 'lib', 'node_modules') : path.resolve(npm.globalPrefix, 'node_modules');\n    },\n    enumerable: true\n  });\n  Object.defineProperty(npm, 'root', {\n    get: function () {\n      return npm.dir;\n    }\n  });\n  Object.defineProperty(npm, 'cache', {\n    get: function () {\n      return npm.config.get('cache');\n    },\n    set: function (r) {\n      return npm.config.set('cache', r);\n    },\n    enumerable: true\n  });\n  var tmpFolder;\n\n  var rand = require('crypto').randomBytes(4).toString('hex');\n\n  Object.defineProperty(npm, 'tmp', {\n    get: function () {\n      if (!tmpFolder) tmpFolder = 'npm-' + process.pid + '-' + rand;\n      return path.resolve(npm.config.get('tmp'), tmpFolder);\n    },\n    enumerable: true\n  }); // the better to repl you with\n\n  Object.getOwnPropertyNames(npm.commands).forEach(function (n) {\n    if (npm.hasOwnProperty(n) || n === 'config') return;\n    Object.defineProperty(npm, n, {\n      get: function () {\n        return function () {\n          var args = Array.prototype.slice.call(arguments, 0);\n          var cb = defaultCb;\n\n          if (args.length === 1 && Array.isArray(args[0])) {\n            args = args[0];\n          }\n\n          if (typeof args[args.length - 1] === 'function') {\n            cb = args.pop();\n          }\n\n          npm.commands[n](args, cb);\n        };\n      },\n      enumerable: false,\n      configurable: true\n    });\n  });\n\n  if (require.main === module) {\n    require('../bin/npm-cli.js');\n  }\n\n  function scopeifyScope(scope) {\n    return !scope || scope[0] === '@' ? scope : '@' + scope;\n  }\n\n  function getProjectScope(prefix) {\n    try {\n      var pkg = JSON.parse(fs.readFileSync(path.join(prefix, 'package.json')));\n      if (typeof pkg.name !== 'string') return '';\n      var sep = pkg.name.indexOf('/');\n      if (sep === -1) return '';\n      return pkg.name.slice(0, sep);\n    } catch (ex) {\n      return '';\n    }\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}
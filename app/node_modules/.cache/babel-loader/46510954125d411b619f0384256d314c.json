{"ast":null,"code":"var _jsxFileName = \"/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/ops-admin/UploadTransactions.js\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { InboxOutlined } from '@ant-design/icons';\nimport { Form, Button, Upload, Typography, message } from 'antd';\nimport FileMapping from 'assets/functions/FileMapping';\nimport XLSX from 'xlsx';\nconst {\n  Title\n} = Typography;\nconst {\n  Dragger\n} = Upload;\nconst formItemLayout = {\n  labelCol: {\n    span: 6\n  },\n  wrapperCol: {\n    span: 14\n  }\n};\n\nconst ProcessExcel = data => {\n  let workbook = XLSX.read(data, {\n    type: 'binary'\n  });\n};\n\nconst normFile = event => {\n  let input = event.target.files[0];\n  console.log(input);\n  const reader = new FileReader();\n  const binaryExcel = reader.readAsBinaryString(input);\n  console.log(ProcessExcel(binaryExcel));\n};\n\nconst UploadTransactions = props => {\n  const {\n    push\n  } = useHistory();\n  const [data, setData] = useState([]);\n  const [cols, setCols] = useState([]);\n\n  const onFinish = values => {\n    console.log('Received values of form: ', values);\n  }; // --- Reading and parsing Excel File --- //\n\n\n  const handleFile = file => {\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? 'binary' : 'array'\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname]; // let first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      setData(data);\n      setCols(make_cols(ws['!ref']));\n    };\n\n    if (rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n  };\n\n  const handleChange = e => {\n    const files = e.target.files;\n    if (files && files[0]) handleFile(files[0]);\n  }; // List of accepted formats\n\n\n  const SheetJSFT = [\"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"csv\", \"txt\"].map(function (x) {\n    return \".\" + x;\n  }).join(\",\");\n  /* generate an array of column objects */\n\n  const make_cols = refstr => {\n    let o = [],\n        C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n    for (var i = 0; i < C; ++i) o[i] = {\n      name: XLSX.utils.encode_col(i),\n      key: i\n    };\n\n    return o;\n  };\n\n  return /*#__PURE__*/React.createElement(Form, Object.assign({\n    name: \"validate_other\"\n  }, formItemLayout, {\n    onFinish: onFinish,\n    initialValues: {\n      rate: 3.5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form.Item, {\n    justify: \"center\",\n    style: {\n      textAlign: 'center',\n      marginTop: '1%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    level: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"Upload Transactions\")), /*#__PURE__*/React.createElement(Form.Item, {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"fileUpload\",\n    valuePropName: \"fileList\",\n    noStyle: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Dragger, {\n    accept: SheetJSFT,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"ant-upload-drag-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(InboxOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"ant-upload-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 25\n    }\n  }, \"Click or drag file to this area to upload\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"ant-upload-hint\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 25\n    }\n  }, \"Support for single and bulk upload.\")))), /*#__PURE__*/React.createElement(Form.Item, {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    className: \"mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => push(\"app/journeys/dashboard\"),\n    variant: \"contained\",\n    type: \"primary\",\n    style: {\n      width: '100%',\n      height: '3rem',\n      fontSize: '1.25rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, \"Create Transactions\")));\n};\n\nexport default UploadTransactions;","map":{"version":3,"sources":["/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/ops-admin/UploadTransactions.js"],"names":["React","useState","useHistory","InboxOutlined","Form","Button","Upload","Typography","message","FileMapping","XLSX","Title","Dragger","formItemLayout","labelCol","span","wrapperCol","ProcessExcel","data","workbook","read","type","normFile","event","input","target","files","console","log","reader","FileReader","binaryExcel","readAsBinaryString","UploadTransactions","props","push","setData","cols","setCols","onFinish","values","handleFile","file","rABS","onload","e","bstr","result","wb","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","make_cols","readAsArrayBuffer","handleChange","SheetJSFT","map","x","join","refstr","o","C","decode_range","c","i","name","encode_col","key","rate","textAlign","marginTop","display","justifyContent","alignItems","width","height","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useHistory } from 'react-router'\nimport { InboxOutlined } from '@ant-design/icons';\nimport { Form, Button, Upload, Typography, message } from 'antd';\nimport FileMapping from 'assets/functions/FileMapping'\nimport XLSX from 'xlsx'\n\nconst { Title } = Typography\nconst { Dragger } = Upload\n\nconst formItemLayout = {\n    labelCol: {\n        span: 6,\n    },\n    wrapperCol: {\n        span: 14,\n    },\n};\n\nconst ProcessExcel = data => {\n    let workbook = XLSX.read(data, {\n        type: 'binary'\n    })\n}\n\nconst normFile = event => {\n    let input = event.target.files[0]\n    console.log(input)\n    const reader = new FileReader()\n    const binaryExcel = reader.readAsBinaryString(input)\n    console.log(ProcessExcel(binaryExcel))\n};\n\nconst UploadTransactions = props => {\n\n    const { push } = useHistory()\n\n    const [ data, setData ] = useState([])\n    const [ cols, setCols ] = useState([])\n\n    const onFinish = (values) => {\n        console.log('Received values of form: ', values);\n    }\n\n    // --- Reading and parsing Excel File --- //\n\n    const handleFile = file => {\n\n        const reader = new FileReader()\n        const rABS = !!reader.readAsBinaryString;\n\n        reader.onload = e => {\n            const bstr = e.target.result\n            const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array' })\n\n\t\t    /* Get first worksheet */\n\t\t    const wsname = wb.SheetNames[0];\n\t\t    const ws = wb.Sheets[wsname];\n            // let first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\n            const data = XLSX.utils.sheet_to_json(ws, { header:1 });\n            setData(data)\n            setCols(make_cols(ws['!ref']))\n        }\n\n        if (rABS) reader.readAsBinaryString(file)\n        else reader.readAsArrayBuffer(file)\n    }\n\n    const handleChange = e => {\n\t\tconst files = e.target.files;\n\t\tif (files && files[0]) handleFile(files[0]);\n    };\n    \n    // List of accepted formats\n    const SheetJSFT = [ \"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"csv\", \"txt\"].map(function(x) { return \".\" + x; }).join(\",\");\n\n    /* generate an array of column objects */\n    const make_cols = refstr => {\n        let o = [], C = XLSX.utils.decode_range(refstr).e.c + 1;\n        for (var i = 0; i < C; ++i) o[i] = { name:XLSX.utils.encode_col(i), key:i }\n        return o;\n    };\n\n    return (\n        <Form\n            name=\"validate_other\"\n            {...formItemLayout}\n            onFinish={onFinish}\n            initialValues={{ rate: 3.5 }}\n        >\n            <Form.Item justify=\"center\" style={{ textAlign: 'center', marginTop: '1%' }}>\n                <Title level={1}>Upload Transactions</Title>\n            </Form.Item>\n            <Form.Item justify=\"center\">\n                {/* <input type=\"file\" accept=\".csv, .xlsx\" onChange={ e => handleFileChosen(e.target.files[0]) } /> */}\n                <Form.Item name=\"fileUpload\" valuePropName=\"fileList\" noStyle>\n                    <Dragger accept={ SheetJSFT } onChange={ handleChange } >\n                        <p className=\"ant-upload-drag-icon\">\n                            <InboxOutlined />\n                        </p>\n                        <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n                        <p className=\"ant-upload-hint\">Support for single and bulk upload.</p>\n                    </Dragger>\n                </Form.Item>\n            </Form.Item>\n            <Form.Item style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}} className=\"mt-5\">\n                <Button onClick={ () => push(\"app/journeys/dashboard\")} variant=\"contained\" type=\"primary\" style={{ width: '100%', height: '3rem', fontSize: '1.25rem' }}>Create Transactions</Button>\n            </Form.Item>\n      </Form>\n    );\n};  \n\nexport default UploadTransactions"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nexports.start = startMetrics;\nexports.stop = stopMetrics;\nexports.save = saveMetrics;\nexports.send = sendMetrics;\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst npm = require('../npm.js');\n\nconst regFetch = require('libnpm/fetch');\n\nconst uuid = require('uuid');\n\nconst cacheFile = require('./cache-file.js');\n\nlet inMetrics = false;\n\nfunction startMetrics() {\n  if (inMetrics) return; // loaded on demand to avoid any recursive deps when `./metrics-launch` requires us.\n\n  var metricsLaunch = require('./metrics-launch.js');\n\n  npm.metricsProcess = metricsLaunch();\n}\n\nfunction stopMetrics() {\n  if (inMetrics) return;\n  if (npm.metricsProcess) npm.metricsProcess.kill('SIGKILL');\n}\n\nfunction saveMetrics(itWorked) {\n  if (inMetrics) return; // If the metrics reporter hasn't managed to PUT yet then kill it so that it doesn't\n  // step on our updating the anonymous-cli-metrics json\n\n  stopMetrics();\n  var metricsFile = path.join(npm.config.get('cache'), 'anonymous-cli-metrics.json');\n  var metrics;\n\n  try {\n    metrics = JSON.parse(fs.readFileSync(metricsFile));\n    metrics.metrics.to = new Date().toISOString();\n\n    if (itWorked) {\n      ++metrics.metrics.successfulInstalls;\n    } else {\n      ++metrics.metrics.failedInstalls;\n    }\n  } catch (ex) {\n    metrics = {\n      metricId: uuid.v4(),\n      metrics: {\n        from: new Date().toISOString(),\n        to: new Date().toISOString(),\n        successfulInstalls: itWorked ? 1 : 0,\n        failedInstalls: itWorked ? 0 : 1\n      }\n    };\n  }\n\n  try {\n    cacheFile.write(metricsFile, JSON.stringify(metrics));\n  } catch (ex) {// we couldn't write and/or chown the error metrics file, oh well.\n  }\n}\n\nfunction sendMetrics(metricsFile, metricsRegistry) {\n  inMetrics = true;\n  var cliMetrics = JSON.parse(fs.readFileSync(metricsFile));\n  regFetch(`/-/npm/anon-metrics/v1/${encodeURIComponent(cliMetrics.metricId)}`, // NOTE: skip npmConfig() to prevent auth\n  {\n    registry: metricsRegistry,\n    method: 'PUT',\n    body: cliMetrics.metrics,\n    retry: false\n  }).then(() => {\n    fs.unlinkSync(metricsFile);\n  }, err => {\n    cacheFile.write(path.join(path.dirname(metricsFile), 'last-send-metrics-error.txt'), err.stack);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}
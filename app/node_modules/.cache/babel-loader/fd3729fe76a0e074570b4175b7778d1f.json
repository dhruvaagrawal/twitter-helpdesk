{"ast":null,"code":"'use strict';\n\nvar scopedPackagePattern = new RegExp('^(?:@([^/]+?)[/])?([^/]+?)$');\n\nvar builtins = require('builtins');\n\nvar blacklist = ['node_modules', 'favicon.ico'];\n\nvar validate = module.exports = function (name) {\n  var warnings = [];\n  var errors = [];\n\n  if (name === null) {\n    errors.push('name cannot be null');\n    return done(warnings, errors);\n  }\n\n  if (name === undefined) {\n    errors.push('name cannot be undefined');\n    return done(warnings, errors);\n  }\n\n  if (typeof name !== 'string') {\n    errors.push('name must be a string');\n    return done(warnings, errors);\n  }\n\n  if (!name.length) {\n    errors.push('name length must be greater than zero');\n  }\n\n  if (name.match(/^\\./)) {\n    errors.push('name cannot start with a period');\n  }\n\n  if (name.match(/^_/)) {\n    errors.push('name cannot start with an underscore');\n  }\n\n  if (name.trim() !== name) {\n    errors.push('name cannot contain leading or trailing spaces');\n  } // No funny business\n\n\n  blacklist.forEach(function (blacklistedName) {\n    if (name.toLowerCase() === blacklistedName) {\n      errors.push(blacklistedName + ' is a blacklisted name');\n    }\n  }); // Generate warnings for stuff that used to be allowed\n  // core module names like http, events, util, etc\n\n  builtins.forEach(function (builtin) {\n    if (name.toLowerCase() === builtin) {\n      warnings.push(builtin + ' is a core module name');\n    }\n  }); // really-long-package-names-------------------------------such--length-----many---wow\n  // the thisisareallyreallylongpackagenameitshouldpublishdowenowhavealimittothelengthofpackagenames-poch.\n\n  if (name.length > 214) {\n    warnings.push('name can no longer contain more than 214 characters');\n  } // mIxeD CaSe nAMEs\n\n\n  if (name.toLowerCase() !== name) {\n    warnings.push('name can no longer contain capital letters');\n  }\n\n  if (/[~'!()*]/.test(name.split('/').slice(-1)[0])) {\n    warnings.push('name can no longer contain special characters (\"~\\'!()*\")');\n  }\n\n  if (encodeURIComponent(name) !== name) {\n    // Maybe it's a scoped package name, like @user/package\n    var nameMatch = name.match(scopedPackagePattern);\n\n    if (nameMatch) {\n      var user = nameMatch[1];\n      var pkg = nameMatch[2];\n\n      if (encodeURIComponent(user) === user && encodeURIComponent(pkg) === pkg) {\n        return done(warnings, errors);\n      }\n    }\n\n    errors.push('name can only contain URL-friendly characters');\n  }\n\n  return done(warnings, errors);\n};\n\nvalidate.scopedPackagePattern = scopedPackagePattern;\n\nvar done = function (warnings, errors) {\n  var result = {\n    validForNewPackages: errors.length === 0 && warnings.length === 0,\n    validForOldPackages: errors.length === 0,\n    warnings: warnings,\n    errors: errors\n  };\n  if (!result.warnings.length) delete result.warnings;\n  if (!result.errors.length) delete result.errors;\n  return result;\n};","map":null,"metadata":{},"sourceType":"script"}
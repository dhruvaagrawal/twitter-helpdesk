{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handleStyle = handleStyle;\nexports.handleNumFmtId = handleNumFmtId;\nexports.Alignment = exports.Font = exports.Fill = exports.Border = exports.Style = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _xmlStyle = require(\"./xmlStyle\");\n\nfunction handleStyle(style, numFmtId, styles) {\n  var _style$makeXStyleElem = style.makeXStyleElements(),\n      xFont = _style$makeXStyleElem.xFont,\n      xFill = _style$makeXStyleElem.xFill,\n      xBorder = _style$makeXStyleElem.xBorder,\n      xXf = _style$makeXStyleElem.xXf;\n\n  var fontId = styles.addFont(xFont);\n  var fillId = styles.addFill(xFill); // HACK - adding light grey fill, as in OO and Google\n\n  var greyfill = new _xmlStyle.Xfill({\n    patternFill: new _xmlStyle.XpatternFill({\n      patternType: 'lightGray'\n    })\n  });\n  styles.addFill(greyfill);\n  var borderId = styles.addBorder(xBorder);\n  xXf.fontId = fontId;\n  xXf.fillId = fillId;\n  xXf.borderId = borderId;\n  xXf.numFmtId = numFmtId; // apply the numFmtId when it is not the default cellxf\n\n  if (xXf.numFmtId > 0) {\n    xXf.applyNumberFormat = true;\n  }\n\n  xXf.alignment.horizontal = style.align.h;\n  xXf.alignment.indent = style.align.indent;\n  xXf.alignment.shrinkToFit = style.align.shrinkToFit;\n  xXf.alignment.textRotation = style.align.textRotation;\n  xXf.alignment.vertical = style.align.v;\n  xXf.alignment.wrapText = style.align.wrapText;\n  return styles.addCellXf(xXf);\n}\n\nfunction handleNumFmtId(numFmtId, styles) {\n  var xf = new _xmlStyle.Xxf({\n    numFmtId\n  });\n\n  if (numFmtId > 0) {\n    xf.applyNumberFormat = true;\n  }\n\n  return styles.addCellXf(xf);\n}\n/**\n * Style class for set Cell styles.\n */\n\n\nvar Style = /*#__PURE__*/function () {\n  function Style() {\n    (0, _classCallCheck2.default)(this, Style);\n    (0, _defineProperty2.default)(this, \"applyBorder\", false);\n    (0, _defineProperty2.default)(this, \"applyFill\", false);\n    (0, _defineProperty2.default)(this, \"applyFont\", false);\n    (0, _defineProperty2.default)(this, \"applyAlignment\", false);\n    (0, _defineProperty2.default)(this, \"namedStyleIndex\", null);\n    /**\n     * Cell border\n     * @type {Border}\n     */\n\n    this.border = new Border({});\n    /**\n     * Cell fill background or foreground\n     * @type {Fill}\n     */\n\n    this.fill = new Fill({});\n    /**\n     * Cell font\n     * @type {Font}\n     */\n\n    this.font = new Font({});\n    /**\n     * Cell alignment\n     * @type {Alignment}\n     */\n\n    this.align = new Alignment({});\n  }\n\n  (0, _createClass2.default)(Style, [{\n    key: \"makeXStyleElements\",\n    value: function makeXStyleElements() {\n      var xFont = new _xmlStyle.Xfont({\n        sz: this.font.size,\n        name: this.font.name,\n        family: this.font.family,\n        charset: this.font.charset,\n        color: this.font.color,\n        b: this.font.bold,\n        i: this.font.italic,\n        u: this.font.underline\n      });\n      var xFill = new _xmlStyle.Xfill({\n        patternFill: new _xmlStyle.XpatternFill({\n          patternType: this.fill.patternType,\n          fgColor: this.fill.fgColor,\n          bgColor: this.fill.bgColor\n        })\n      });\n      var xBorder = new _xmlStyle.Xborder({\n        left: {\n          style: this.border.left,\n          color: this.border.leftColor\n        },\n        right: {\n          style: this.border.right,\n          color: this.border.rightColor\n        },\n        top: {\n          style: this.border.top,\n          color: this.border.topColor\n        },\n        bottom: {\n          style: this.border.bottom,\n          color: this.border.bottomColor\n        }\n      });\n      var xXf = new _xmlStyle.Xxf({\n        numFmtId: 0,\n        applyBorder: this.applyBorder,\n        applyFill: this.applyFill,\n        applyFont: this.applyFont,\n        applyAlignment: this.applyAlignment\n      });\n      xXf.alignment = new _xmlStyle.Xalignment({\n        horizontal: this.align.h,\n        indent: this.align.indent,\n        shrinkToFit: this.align.shrinkToFit,\n        textRotation: this.align.textRotation,\n        vertical: this.align.v,\n        wrapText: this.align.wrapText\n      });\n\n      if (this.namedStyleIndex !== null) {\n        xXf.xfId = this.namedStyleIndex;\n      }\n\n      return {\n        xFont,\n        xFill,\n        xBorder,\n        xXf\n      };\n    }\n  }]);\n  return Style;\n}();\n/**\n * Border of the Style and border type have: `none`, `thin`, `medium`, `thick`, `dashed`, `dotted`, `double`\n *\n */\n\n\nexports.Style = Style;\n\nvar Border =\n/**\n * left border color\n * @type {String}\n */\n\n/**\n * right border color\n * @type {String}\n */\n\n/**\n * top border color\n * @type {String}\n */\n\n/**\n * bottom border color\n * @type {String}\n */\nfunction Border(_ref) {\n  var _ref$left = _ref.left,\n      left = _ref$left === void 0 ? 'none' : _ref$left,\n      _ref$right = _ref.right,\n      right = _ref$right === void 0 ? 'none' : _ref$right,\n      _ref$top = _ref.top,\n      top = _ref$top === void 0 ? 'none' : _ref$top,\n      _ref$bottom = _ref.bottom,\n      bottom = _ref$bottom === void 0 ? 'none' : _ref$bottom;\n  (0, _classCallCheck2.default)(this, Border);\n  (0, _defineProperty2.default)(this, \"leftColor\", undefined);\n  (0, _defineProperty2.default)(this, \"rightColor\", undefined);\n  (0, _defineProperty2.default)(this, \"topColor\", undefined);\n  (0, _defineProperty2.default)(this, \"bottomColor\", undefined);\n  /**\n   * left border type\n   * @type {String}\n   */\n\n  this.left = left;\n  /**\n   * right border type\n   * @type {String}\n   */\n\n  this.right = right;\n  /**\n   * top border type\n   * @type {String}\n   */\n\n  this.top = top;\n  /**\n   * bottom border type\n   * @type {String}\n   */\n\n  this.bottom = bottom;\n};\n/**\n * Fill of the Style\n */\n\n\nexports.Border = Border;\n\nvar Fill = function Fill(_ref2) {\n  var _ref2$patternType = _ref2.patternType,\n      patternType = _ref2$patternType === void 0 ? 'none' : _ref2$patternType,\n      _ref2$fgColor = _ref2.fgColor,\n      fgColor = _ref2$fgColor === void 0 ? 'FFFFFFFF' : _ref2$fgColor,\n      _ref2$bgColor = _ref2.bgColor,\n      bgColor = _ref2$bgColor === void 0 ? '00000000' : _ref2$bgColor;\n  (0, _classCallCheck2.default)(this, Fill);\n  /**\n   * pattern type of the fill\n   * @type {String}\n   */\n\n  this.patternType = patternType;\n  /**\n   * foreground color of the fill\n   * @type {String}\n   */\n\n  this.fgColor = fgColor;\n  /**\n   * background color of the fill\n   * @type {String}\n   */\n\n  this.bgColor = bgColor;\n};\n/**\n * Font of the Style\n */\n\n\nexports.Fill = Fill;\n\nvar Font =\n/**\n * font color\n * @type {String}\n */\n\n/**\n * Is bold style\n * @type {Boolean}\n */\n\n/**\n * Is italic style\n * @type {Boolean}\n */\n\n/**\n * IS underline style\n * @type {Boolean}\n */\nfunction Font(_ref3) {\n  var _ref3$size = _ref3.size,\n      size = _ref3$size === void 0 ? 12 : _ref3$size,\n      _ref3$name = _ref3.name,\n      name = _ref3$name === void 0 ? 'Verdana' : _ref3$name;\n  (0, _classCallCheck2.default)(this, Font);\n  (0, _defineProperty2.default)(this, \"family\", 0);\n  (0, _defineProperty2.default)(this, \"charset\", 0);\n  (0, _defineProperty2.default)(this, \"color\", undefined);\n  (0, _defineProperty2.default)(this, \"bold\", false);\n  (0, _defineProperty2.default)(this, \"italic\", false);\n  (0, _defineProperty2.default)(this, \"underline\", false);\n  /**\n   * font size [default 12]\n   * @type {Number}\n   */\n\n  this.size = size;\n  this.name = name;\n};\n/**\n * Alignment of the Style.\n */\n\n\nexports.Font = Font;\n\nvar Alignment = function Alignment(_ref4) {\n  var _ref4$h = _ref4.h,\n      h = _ref4$h === void 0 ? 'general' : _ref4$h,\n      _ref4$v = _ref4.v,\n      v = _ref4$v === void 0 ? 'bottom' : _ref4$v;\n  (0, _classCallCheck2.default)(this, Alignment);\n  (0, _defineProperty2.default)(this, \"indent\", 0);\n  (0, _defineProperty2.default)(this, \"shrinkToFit\", false);\n  (0, _defineProperty2.default)(this, \"textRotation\", 0);\n  (0, _defineProperty2.default)(this, \"wrapText\", false);\n  /**\n   * Horizontal align: `general`, `center`, `left`, `right`\n   * @type {String}\n   */\n\n  this.h = h;\n  /**\n   * Vertical align: `general`, `top`, `bottom`, `center`\n   * @type {String}\n   */\n\n  this.v = v;\n};\n\nexports.Alignment = Alignment;","map":null,"metadata":{},"sourceType":"script"}
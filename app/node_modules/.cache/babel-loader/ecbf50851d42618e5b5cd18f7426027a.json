{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass ReceiveBuffer {\n  constructor(size = 4096) {\n    this._buffer = Buffer.allocUnsafe(size);\n    this._offset = 0;\n    this._originalSize = size;\n  }\n\n  get length() {\n    return this._offset;\n  }\n\n  append(data) {\n    if (!Buffer.isBuffer(data)) {\n      throw new Error('Attempted to append a non-buffer instance to ReceiveBuffer.');\n    }\n\n    if (this._offset + data.length >= this._buffer.length) {\n      const tmp = this._buffer;\n      this._buffer = Buffer.allocUnsafe(Math.max(this._buffer.length + this._originalSize, this._buffer.length + data.length));\n      tmp.copy(this._buffer);\n    }\n\n    data.copy(this._buffer, this._offset);\n    return this._offset += data.length;\n  }\n\n  peek(length) {\n    if (length > this._offset) {\n      throw new Error('Attempted to read beyond the bounds of the managed internal data.');\n    }\n\n    return this._buffer.slice(0, length);\n  }\n\n  get(length) {\n    if (length > this._offset) {\n      throw new Error('Attempted to read beyond the bounds of the managed internal data.');\n    }\n\n    const value = Buffer.allocUnsafe(length);\n\n    this._buffer.slice(0, length).copy(value);\n\n    this._buffer.copyWithin(0, length, length + this._offset - length);\n\n    this._offset -= length;\n    return value;\n  }\n\n}\n\nexports.ReceiveBuffer = ReceiveBuffer;","map":null,"metadata":{},"sourceType":"script"}
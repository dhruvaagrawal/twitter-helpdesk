{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RefTable = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _xmlSharedStrings = require(\"./xmlSharedStrings\");\n\nvar RefTable = /*#__PURE__*/function () {\n  function RefTable() {\n    (0, _classCallCheck2.default)(this, RefTable);\n    this.strings = [];\n    this.known = {};\n  }\n\n  (0, _createClass2.default)(RefTable, [{\n    key: \"makeXsst\",\n    value: function makeXsst() {\n      var len = this.strings.length;\n      var sst = new _xmlSharedStrings.Xsst({\n        count: len,\n        uniqueCount: len\n      });\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.strings[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var str = _step.value;\n          var si = new _xmlSharedStrings.Xsi({}, [new _xmlSharedStrings.Xt({}, [str])]);\n          sst.children.push(si);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return sst;\n    }\n  }, {\n    key: \"addString\",\n    value: function addString(str) {\n      if (this.known[str] === undefined) {\n        var index = this.strings.length;\n        this.strings.push(str);\n        this.known[str] = index;\n        return index;\n      }\n\n      return this.known[str];\n    }\n  }, {\n    key: \"getString\",\n    value: function getString(index) {\n      return this.strings[index];\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return this.strings.length;\n    }\n  }]);\n  return RefTable;\n}();\n\nexports.RefTable = RefTable;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport readXlsx from './readXlsx';\nimport convertToJson from './convertToJson';\nimport convertMapToSchema from './convertMapToSchema';\nexport default function readXlsxFileContents(entries, xml, _ref) {\n  var schema = _ref.schema,\n      map = _ref.map,\n      options = _objectWithoutProperties(_ref, ['schema', 'map']);\n\n  if (!schema && map) {\n    schema = convertMapToSchema(map);\n  }\n\n  var result = readXlsx(entries, xml, _extends({}, options, {\n    properties: schema || options.properties\n  }));\n\n  if (schema) {\n    return convertToJson(result.data, schema, _extends({}, options, {\n      properties: result.properties\n    }));\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}
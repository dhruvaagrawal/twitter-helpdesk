{"ast":null,"code":"'use strict';\n\nconst config = require('./config.js');\n\nconst url = require('url');\n\nmodule.exports = getAuth;\n\nfunction getAuth(registry, opts) {\n  if (!registry) {\n    throw new Error('registry is required');\n  }\n\n  opts = config(opts);\n  let AUTH = {};\n  const regKey = registry && registryKey(registry);\n\n  if (opts.forceAuth) {\n    opts = opts.forceAuth;\n  }\n\n  const doKey = (key, alias) => addKey(opts, AUTH, regKey, key, alias);\n\n  doKey('token');\n  doKey('_authToken', 'token');\n  doKey('username');\n  doKey('password');\n  doKey('_password', 'password');\n  doKey('email');\n  doKey('_auth');\n  doKey('otp');\n  doKey('always-auth', 'alwaysAuth');\n\n  if (AUTH.password) {\n    AUTH.password = Buffer.from(AUTH.password, 'base64').toString('utf8');\n  }\n\n  if (AUTH._auth && !(AUTH.username && AUTH.password)) {\n    let auth = Buffer.from(AUTH._auth, 'base64').toString();\n    auth = auth.split(':');\n    AUTH.username = auth.shift();\n    AUTH.password = auth.join(':');\n  }\n\n  AUTH.alwaysAuth = AUTH.alwaysAuth === 'false' ? false : !!AUTH.alwaysAuth;\n  return AUTH;\n}\n\nfunction addKey(opts, obj, scope, key, objKey) {\n  if (opts[key]) {\n    obj[objKey || key] = opts[key];\n  }\n\n  if (scope && opts[`${scope}:${key}`]) {\n    obj[objKey || key] = opts[`${scope}:${key}`];\n  }\n} // Called a nerf dart in the main codebase. Used as a \"safe\"\n// key when fetching registry info from config.\n\n\nfunction registryKey(registry) {\n  const parsed = url.parse(registry);\n  const formatted = url.format({\n    host: parsed.host,\n    pathname: parsed.pathname,\n    slashes: parsed.slashes\n  });\n  return url.resolve(formatted, '.');\n}","map":null,"metadata":{},"sourceType":"script"}
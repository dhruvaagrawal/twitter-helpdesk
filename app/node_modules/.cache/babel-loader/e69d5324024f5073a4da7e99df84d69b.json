{"ast":null,"code":"#!/usr/bin/env node\n;\n\n(function () {\n  // wrapper in case we're in module_context mode\n  // windows: running \"npm blah\" in this folder will invoke WSH, not node.\n\n  /* global WScript */\n  if (typeof WScript !== 'undefined') {\n    WScript.echo('npm does not work when run\\n' + 'with the Windows Scripting Host\\n\\n' + \"'cd' to a different directory,\\n\" + \"or type 'npm.cmd <args>',\\n\" + \"or type 'node npm <args>'.\");\n    WScript.quit(1);\n    return;\n  }\n\n  process.title = 'npm';\n\n  var unsupported = require('../lib/utils/unsupported.js');\n\n  unsupported.checkForBrokenNode();\n\n  var log = require('npmlog');\n\n  log.pause(); // will be unpaused when config is loaded.\n\n  log.info('it worked if it ends with', 'ok');\n  unsupported.checkForUnsupportedNode();\n\n  var npm = require('../lib/npm.js');\n\n  var npmconf = require('../lib/config/core.js');\n\n  var errorHandler = require('../lib/utils/error-handler.js');\n\n  var replaceInfo = require('../lib/utils/replace-info.js');\n\n  var configDefs = npmconf.defs;\n  var shorthands = configDefs.shorthands;\n  var types = configDefs.types;\n\n  var nopt = require('nopt'); // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n\n\n  if (process.argv[1][process.argv[1].length - 1] === 'g') {\n    process.argv.splice(1, 1, 'npm', '-g');\n  }\n\n  var args = replaceInfo(process.argv);\n  log.verbose('cli', args);\n  var conf = nopt(types, shorthands);\n  npm.argv = conf.argv.remain;\n  if (npm.deref(npm.argv[0])) npm.command = npm.argv.shift();else conf.usage = true;\n\n  if (conf.version) {\n    console.log(npm.version);\n    return errorHandler.exit(0);\n  }\n\n  if (conf.versions) {\n    npm.command = 'version';\n    conf.usage = false;\n    npm.argv = [];\n  }\n\n  log.info('using', 'npm@%s', npm.version);\n  log.info('using', 'node@%s', process.version);\n  process.on('uncaughtException', errorHandler);\n  process.on('unhandledRejection', errorHandler);\n\n  if (conf.usage && npm.command !== 'help') {\n    npm.argv.unshift(npm.command);\n    npm.command = 'help';\n  }\n\n  var isGlobalNpmUpdate = conf.global && ['install', 'update'].includes(npm.command) && npm.argv.includes('npm'); // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n\n  conf._exit = true;\n  npm.load(conf, function (er) {\n    if (er) return errorHandler(er);\n\n    if (!isGlobalNpmUpdate && npm.config.get('update-notifier') && !unsupported.checkVersion(process.version).unsupported) {\n      const pkg = require('../package.json');\n\n      let notifier = require('update-notifier')({\n        pkg\n      });\n\n      const isCI = require('ci-info').isCI;\n\n      if (notifier.update && notifier.update.latest !== pkg.version && !isCI) {\n        const color = require('ansicolors');\n\n        const useColor = npm.config.get('color');\n        const useUnicode = npm.config.get('unicode');\n        const old = notifier.update.current;\n        const latest = notifier.update.latest;\n        let type = notifier.update.type;\n\n        if (useColor) {\n          switch (type) {\n            case 'major':\n              type = color.red(type);\n              break;\n\n            case 'minor':\n              type = color.yellow(type);\n              break;\n\n            case 'patch':\n              type = color.green(type);\n              break;\n          }\n        }\n\n        const changelog = `https://github.com/npm/cli/releases/tag/v${latest}`;\n        notifier.notify({\n          message: `New ${type} version of ${pkg.name} available! ${useColor ? color.red(old) : old} ${useUnicode ? 'â†’' : '->'} ${useColor ? color.green(latest) : latest}\\n` + `${useColor ? color.yellow('Changelog:') : 'Changelog:'} ${useColor ? color.cyan(changelog) : changelog}\\n` + `Run ${useColor ? color.green(`npm install -g ${pkg.name}`) : `npm i -g ${pkg.name}`} to update!`\n        });\n      }\n    }\n\n    npm.commands[npm.command](npm.argv, function (err) {\n      // https://genius.com/Lin-manuel-miranda-your-obedient-servant-lyrics\n      if (!err && npm.config.get('ham-it-up') && !npm.config.get('json') && !npm.config.get('parseable') && npm.command !== 'completion') {\n        console.error(`\\n ${npm.config.get('unicode') ? 'ðŸŽµ ' : ''} I Have the Honour to Be Your Obedient Servant,${npm.config.get('unicode') ? 'ðŸŽµ ' : ''} ~ npm ${npm.config.get('unicode') ? 'ðŸ“œðŸ–‹ ' : ''}\\n`);\n      }\n\n      errorHandler.apply(this, arguments);\n    });\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}
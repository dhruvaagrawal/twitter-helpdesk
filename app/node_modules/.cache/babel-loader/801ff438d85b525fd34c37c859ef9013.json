{"ast":null,"code":"'use strict';\n/**\n * A set of utilities borrowed from Node.js' _http_common.js\n */\n\n/**\n * Verifies that the given val is a valid HTTP token\n * per the rules defined in RFC 7230\n * See https://tools.ietf.org/html/rfc7230#section-3.2.6\n *\n * Allowed characters in an HTTP token:\n * ^_`a-z  94-122\n * A-Z     65-90\n * -       45\n * 0-9     48-57\n * !       33\n * #$%&'   35-39\n * *+      42-43\n * .       46\n * |       124\n * ~       126\n *\n * This implementation of checkIsHttpToken() loops over the string instead of\n * using a regular expression since the former is up to 180% faster with v8 4.9\n * depending on the string length (the shorter the string, the larger the\n * performance difference)\n *\n * Additionally, checkIsHttpToken() is currently designed to be inlinable by v8,\n * so take care when making changes to the implementation so that the source\n * code size does not exceed v8's default max_inlined_source_size setting.\n **/\n\n/* istanbul ignore next */\n\nfunction isValidTokenChar(ch) {\n  if (ch >= 94 && ch <= 122) {\n    return true;\n  }\n\n  if (ch >= 65 && ch <= 90) {\n    return true;\n  }\n\n  if (ch === 45) {\n    return true;\n  }\n\n  if (ch >= 48 && ch <= 57) {\n    return true;\n  }\n\n  if (ch === 34 || ch === 40 || ch === 41 || ch === 44) {\n    return false;\n  }\n\n  if (ch >= 33 && ch <= 46) {\n    return true;\n  }\n\n  if (ch === 124 || ch === 126) {\n    return true;\n  }\n\n  return false;\n}\n/* istanbul ignore next */\n\n\nfunction checkIsHttpToken(val) {\n  if (typeof val !== 'string' || val.length === 0) {\n    return false;\n  }\n\n  if (!isValidTokenChar(val.charCodeAt(0))) {\n    return false;\n  }\n\n  const len = val.length;\n\n  if (len > 1) {\n    if (!isValidTokenChar(val.charCodeAt(1))) {\n      return false;\n    }\n\n    if (len > 2) {\n      if (!isValidTokenChar(val.charCodeAt(2))) {\n        return false;\n      }\n\n      if (len > 3) {\n        if (!isValidTokenChar(val.charCodeAt(3))) {\n          return false;\n        }\n\n        for (var i = 4; i < len; i++) {\n          if (!isValidTokenChar(val.charCodeAt(i))) {\n            return false;\n          }\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\nexports.checkIsHttpToken = checkIsHttpToken;\n/**\n * True if val contains an invalid field-vchar\n *  field-value    = *( field-content / obs-fold )\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n *  field-vchar    = VCHAR / obs-text\n *\n * checkInvalidHeaderChar() is currently designed to be inlinable by v8,\n * so take care when making changes to the implementation so that the source\n * code size does not exceed v8's default max_inlined_source_size setting.\n **/\n\n/* istanbul ignore next */\n\nfunction checkInvalidHeaderChar(val) {\n  val += '';\n\n  if (val.length < 1) {\n    return false;\n  }\n\n  var c = val.charCodeAt(0);\n\n  if (c <= 31 && c !== 9 || c > 255 || c === 127) {\n    return true;\n  }\n\n  if (val.length < 2) {\n    return false;\n  }\n\n  c = val.charCodeAt(1);\n\n  if (c <= 31 && c !== 9 || c > 255 || c === 127) {\n    return true;\n  }\n\n  if (val.length < 3) {\n    return false;\n  }\n\n  c = val.charCodeAt(2);\n\n  if (c <= 31 && c !== 9 || c > 255 || c === 127) {\n    return true;\n  }\n\n  for (var i = 3; i < val.length; ++i) {\n    c = val.charCodeAt(i);\n\n    if (c <= 31 && c !== 9 || c > 255 || c === 127) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.checkInvalidHeaderChar = checkInvalidHeaderChar;","map":null,"metadata":{},"sourceType":"script"}
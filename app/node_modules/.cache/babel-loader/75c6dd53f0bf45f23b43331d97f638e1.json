{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sheet = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _row = require(\"./row\");\n\nvar _col = require(\"./col\");\n\nvar _style = require(\"./style\");\n\nvar _lib = require(\"./lib\");\n\nvar _xmlWorksheet = require(\"./xmlWorksheet\");\n/**\n * Sheet of the xlsx file.\n * ```js\n * import { File } from 'better-xlsx';\n * const file = new File();\n * const sheet = file.addSheet('Sheet-1');\n * const row = sheet.addRow();\n * const cell = row.addCell();\n * ```\n */\n\n\nvar Sheet = /*#__PURE__*/function () {\n  function Sheet(_ref) {\n    var name = _ref.name,\n        file = _ref.file,\n        selected = _ref.selected;\n    (0, _classCallCheck2.default)(this, Sheet);\n    (0, _defineProperty2.default)(this, \"rows\", []);\n    (0, _defineProperty2.default)(this, \"cols\", []);\n    (0, _defineProperty2.default)(this, \"maxRow\", 0);\n    (0, _defineProperty2.default)(this, \"maxCol\", 0);\n    (0, _defineProperty2.default)(this, \"hidden\", false);\n    (0, _defineProperty2.default)(this, \"sheetViews\", []);\n    (0, _defineProperty2.default)(this, \"sheetFormat\", {\n      defaultColWidth: 0,\n      defaultRowHeight: 0,\n      outlineLevelCol: 0,\n      outlineLevelRow: 0\n    });\n    this.name = name;\n    this.file = file;\n    this.selected = selected;\n  }\n  /**\n   * Create a Row and add it into the Sheet.\n   * @return {Row}\n   */\n\n\n  (0, _createClass2.default)(Sheet, [{\n    key: \"addRow\",\n    value: function addRow() {\n      var row = new _row.Row({\n        sheet: this\n      });\n      this.rows.push(row);\n\n      if (this.rows.length > this.maxRow) {\n        this.maxRow = this.rows.length;\n      }\n\n      return row;\n    }\n  }, {\n    key: \"maybeAddCol\",\n    value: function maybeAddCol(cellCount) {\n      if (cellCount > this.maxCol) {\n        var col = new _col.Col({\n          min: cellCount,\n          max: cellCount,\n          hidden: false,\n          collapsed: false\n        });\n        this.cols.push(col);\n        this.maxCol = cellCount;\n      }\n    }\n    /**\n     * Get Col of the sheet with index and create cols when `index > maxCol`.\n     * @param  {Number} idx Index of the Col [from 0].\n     * @return {Col}\n     */\n\n  }, {\n    key: \"col\",\n    value: function col(idx) {\n      this.maybeAddCol(idx + 1);\n      return this.cols[idx];\n    }\n    /**\n     * Get Row of the sheet with index and create rows when `index > maxRow`.\n     * @param  {Number} idx Index of the Row [from 0].\n     * @return {Row}\n     */\n\n  }, {\n    key: \"row\",\n    value: function row(idx) {\n      for (var len = this.rows.length; len <= idx; len++) {\n        this.addRow();\n      }\n\n      return this.rows[idx];\n    }\n    /**\n     * Get Cell of the sheet with `(row, col)` and create cell when out of range.\n     * @param  {Number} row\n     * @param {Number} col\n     * @return {Cell}\n     */\n\n  }, {\n    key: \"cell\",\n    value: function cell(row, col) {\n      for (var len = this.rows.length; len <= row; len++) {\n        this.addRow();\n      }\n\n      var r = this.rows[row];\n\n      for (var _len = r.cells.length; _len <= col; _len++) {\n        r.addCell();\n      }\n\n      return r.cells[col];\n    }\n    /**\n     * Set columns width from `startcol` to `endcol`.\n     * @param {Number} startcol\n     * @param {Number} endcol\n     * @param {Number} width\n     */\n\n  }, {\n    key: \"setColWidth\",\n    value: function setColWidth(startcol, endcol, width) {\n      if (startcol > endcol) {\n        throw new Error(`Could not set width for range ${startcol}-${endcol}: startcol must be less than endcol.`);\n      }\n\n      var col = new _col.Col({\n        min: startcol + 1,\n        max: endcol + 1,\n        hidden: false,\n        collapsed: false,\n        width: width\n      });\n      this.cols.push(col);\n\n      if (endcol + 1 > this.maxCol) {\n        this.maxCol = endcol + 1;\n      }\n    }\n  }, {\n    key: \"handleMerged\",\n    value: function handleMerged() {\n      var merged = [];\n\n      for (var r = 0; r < this.rows.length; r++) {\n        var row = this.rows[r];\n\n        for (var c = 0; c < row.cells.length; c++) {\n          var cell = row.cells[c];\n\n          if (cell.hMerge > 0 || cell.vMerge > 0) {\n            merged.push({\n              r,\n              c,\n              cell\n            });\n          }\n        }\n      }\n\n      for (var _i = 0, _merged = merged; _i < _merged.length; _i++) {\n        var _merged$_i = _merged[_i],\n            _r = _merged$_i.r,\n            _c = _merged$_i.c,\n            _cell = _merged$_i.cell;\n        var left = _cell.style.border.left;\n        var right = _cell.style.border.right;\n        var top = _cell.style.border.top;\n        var bottom = _cell.style.border.bottom;\n        _cell.style.border.left = 'none';\n        _cell.style.border.right = 'none';\n        _cell.style.border.top = 'none';\n        _cell.style.border.bottom = 'none';\n\n        for (var rownum = 0; rownum <= _cell.vMerge; rownum++) {\n          for (var colnum = 0; colnum <= _cell.hMerge; colnum++) {\n            var tmpcell = this.cell(_r + rownum, _c + colnum);\n            tmpcell.style.applyBorder = true;\n\n            if (rownum === 0) {\n              tmpcell.style.border.top = top;\n            }\n\n            if (rownum === _cell.vMerge) {\n              tmpcell.style.border.bottom = bottom;\n            }\n\n            if (colnum === 0) {\n              tmpcell.style.border.left = left;\n            }\n\n            if (colnum === _cell.hMerge) {\n              tmpcell.style.border.right = right;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"makeXSheet\",\n    value: function makeXSheet(refTable, styles) {\n      var sheet = (0, _xmlWorksheet.makeXworksheet)();\n      var xSheet = new _xmlWorksheet.XsheetData();\n      var maxRow = 0;\n      var maxCell = 0;\n      var maxLevelCol;\n      var maxLevelRow;\n      this.handleMerged();\n\n      for (var i = 0; i < this.sheetViews.length; i++) {\n        var view = this.sheetViews[i];\n\n        if (view && view.pane) {\n          sheet.sheetViews.children[i].children.push(new _xmlWorksheet.Xpane({\n            xSplit: view.pane.xSplit,\n            ySplit: view.pane.ySplit,\n            topLeftCell: view.pane.topLeftCell,\n            activePane: view.pane.activePane,\n            state: view.pane.state\n          }));\n        }\n      }\n\n      if (this.selected) {\n        sheet.sheetViews.children[0].tabSelected = true;\n      }\n\n      if (this.sheetFormat.defaultRowHeight !== 0) {\n        sheet.sheetFormatPr.defaultRowHeight = this.sheetFormat.defaultRowHeight;\n      }\n\n      if (this.sheetFormat.defaultColWidth !== 0) {\n        sheet.sheetFormatPr.defaultColWidth = this.sheetFormat.defaultColWidth;\n      }\n\n      var fIdList = [];\n      sheet.cols = new _xmlWorksheet.Xcols();\n\n      for (var c = 0; c < this.cols.length; c++) {\n        var col = this.cols[c];\n        col.min = col.min || 1;\n        col.max = col.max || 1;\n        var xNumFmt = styles.newNumFmt(col.numFmt);\n        var fId = (0, _style.handleStyle)(col.style, xNumFmt.numFmtId, styles);\n        fIdList.push(fId);\n        var customWidth = 0;\n\n        if (col.width === 0) {\n          col.width = 9.5;\n        } else {\n          customWidth = 1;\n        }\n\n        sheet.cols.children.push(new _xmlWorksheet.Xcol({\n          min: col.min,\n          max: col.max,\n          hidden: col.hidden,\n          width: col.width,\n          customWidth: customWidth,\n          collapsed: col.collapsed,\n          outlineLevel: col.outlineLevel,\n          style: fId\n        }));\n\n        if (col.outlineLevel > maxLevelCol) {\n          maxLevelCol = col.outlineLevel;\n        }\n      }\n\n      for (var r = 0; r < this.rows.length; r++) {\n        var row = this.rows[r];\n        if (r > maxRow) maxRow = r;\n        var xRow = new _xmlWorksheet.Xrow({\n          r: r + 1\n        });\n\n        if (row.isCustom) {\n          xRow.customHeight = true;\n          xRow.ht = row.height;\n        }\n\n        xRow.outlineLevel = row.outlineLevel;\n\n        if (row.outlineLevel > maxLevelRow) {\n          maxLevelRow = row.outlineLevel;\n        }\n\n        for (var _c2 = 0; _c2 < row.cells.length; _c2++) {\n          var _fId = fIdList[_c2];\n          var cell = row.cells[_c2];\n\n          var _xNumFmt = styles.newNumFmt(cell.numFmt);\n\n          var style = cell.style;\n\n          if (style !== null) {\n            _fId = (0, _style.handleStyle)(style, _xNumFmt.numFmtId, styles);\n          } else if (cell.numFmt && this.cols[_c2].numFmt !== cell.numFmt) {\n            _fId = (0, _style.handleNumFmtId)(_xNumFmt.NumFmtId, styles);\n          }\n\n          if (_c2 > maxCell) maxCell = _c2;\n          var xC = new _xmlWorksheet.Xc({\n            r: `${(0, _lib.num2col)(_c2)}${r + 1}`\n          });\n\n          switch (cell.cellType) {\n            case 'TypeString':\n              if (cell.value) {\n                xC.v = refTable.addString(cell.value);\n              }\n\n              xC.t = 's';\n              xC.s = _fId;\n              break;\n\n            case 'TypeBool':\n              xC.v = cell.value;\n              xC.t = 'b';\n              xC.s = _fId;\n              break;\n\n            case 'TypeNumeric':\n              xC.v = cell.value;\n              xC.s = _fId;\n              break;\n\n            case 'TypeDate':\n              xC.v = cell.value;\n              xC.s = _fId;\n              break;\n\n            case 'TypeFormula':\n              xC.v = cell.value;\n              xC.f = new _xmlWorksheet.Xf({}, [cell.formula]);\n              xC.s = _fId;\n              break;\n\n            case 'TypeError':\n              xC.v = cell.value;\n              xC.f = new _xmlWorksheet.Xf({}, [cell.formula]);\n              xC.t = 'e';\n              xC.s = _fId;\n              break;\n\n            case 'TypeGeneral':\n              xC.v = cell.value;\n              xC.s = _fId;\n              break;\n          }\n\n          xRow.children.push(xC);\n\n          if (cell.hMerge > 0 || cell.vMerge > 0) {\n            // r == rownum, c == colnum\n            var start = `${(0, _lib.num2col)(_c2)}${r + 1}`;\n            var endcol = _c2 + cell.hMerge;\n            var endrow = r + cell.vMerge + 1;\n            var end = `${(0, _lib.num2col)(endcol)}${endrow}`;\n            var mc = new _xmlWorksheet.XmergeCell({\n              ref: start + ':' + end\n            });\n\n            if (sheet.mergeCells === null) {\n              sheet.mergeCells = new _xmlWorksheet.XmergeCells();\n            }\n\n            sheet.mergeCells.children.push(mc);\n          }\n        }\n\n        xSheet.children.push(xRow);\n      } // Update sheet format with the freshly determined max levels\n\n\n      this.sheetFormat.outlineLevelCol = maxLevelCol;\n      this.sheetFormat.outlineLevelRow = maxLevelRow; // .. and then also apply this to the xml worksheet\n\n      sheet.sheetFormatPr.outlineLevelCol = this.sheetFormat.outlineLevelCol;\n      sheet.sheetFormatPr.outlineLevelRow = this.sheetFormat.outlineLevelRow;\n\n      if (sheet.mergeCells !== null) {\n        sheet.mergeCells.count = sheet.mergeCells.children.length;\n      }\n\n      sheet.sheetData = xSheet;\n      var dimension = new _xmlWorksheet.Xdimension({\n        ref: `A1:${(0, _lib.num2col)(maxCell)}${maxRow + 1}`\n      });\n\n      if (dimension.ref === 'A1:A1') {\n        dimension.ref = 'A1';\n      }\n\n      sheet.dimension = dimension;\n\n      if (this.afterMake) {\n        this.afterMake(sheet);\n      }\n\n      return sheet;\n    }\n  }]);\n  return Sheet;\n}();\n\nexports.Sheet = Sheet;","map":null,"metadata":{},"sourceType":"script"}
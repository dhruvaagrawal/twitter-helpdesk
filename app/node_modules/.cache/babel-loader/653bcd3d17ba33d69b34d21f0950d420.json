{"ast":null,"code":"var _jsxFileName = \"/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/ops-admin/SheetJS.js\";\nimport React, { useState } from 'react';\nimport XLSX from 'xlsx';\n\nconst FileMapper = () => {\n  const [data, setData] = useState([]);\n  const [cols, setCols] = useState([]);\n\n  const handleFile = file => {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? 'binary' : 'array'\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      /* Update state */\n\n      setData(data);\n      setCols(make_cols(ws['!ref']));\n    };\n\n    if (rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n  };\n\n  return /*#__PURE__*/React.createElement(DragDropFile, {\n    handleFile: handleFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-xs-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DataInput, {\n    handleFile: handleFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 6\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-xs-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !data.length,\n    className: \"btn btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, \"Create Transactions\"))));\n};\n/* -------------------------------------------------------------------------- */\n\n/*\n  Simple HTML5 file drag-and-drop wrapper\n  usage: <DragDropFile handleFile={handleFile}>...</DragDropFile>\n    handleFile(file:File):void;\n*/\n\n\nclass DragDropFile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  suppress(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n  }\n\n  onDrop(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    const files = evt.dataTransfer.files;\n    if (files && files[0]) this.props.handleFile(files[0]);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onDrop: this.onDrop,\n      onDragEnter: this.suppress,\n      onDragOver: this.suppress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 1\n      }\n    }, this.props.children);\n  }\n\n}\n\n;\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\n\nclass DataInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) this.props.handleFile(files[0]);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"form-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 2\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"file\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 3\n      }\n    }, \"Spreadsheet\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      className: \"form-control\",\n      id: \"file\",\n      accept: SheetJSFT,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 3\n      }\n    })));\n  }\n\n}\n/* list of supported file types */\n\n\nconst SheetJSFT = [\"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\"].map(function (x) {\n  return \".\" + x;\n}).join(\",\");\n/* generate an array of column objects */\n\nconst make_cols = refstr => {\n  let o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n  for (var i = 0; i < C; ++i) o[i] = {\n    name: XLSX.utils.encode_col(i),\n    key: i\n  };\n\n  return o;\n};\n\nexport default FileMapper;","map":{"version":3,"sources":["/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/ops-admin/SheetJS.js"],"names":["React","useState","XLSX","FileMapper","data","setData","cols","setCols","handleFile","file","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","make_cols","readAsArrayBuffer","length","DragDropFile","Component","constructor","props","onDrop","bind","suppress","evt","stopPropagation","preventDefault","files","dataTransfer","render","children","DataInput","handleChange","SheetJSFT","map","x","join","refstr","o","C","decode_range","c","i","name","encode_col","key"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport XLSX from 'xlsx'\n\nconst FileMapper = () => {\n\n\tconst [ data, setData ] = useState([])\n\tconst [ cols, setCols ] = useState([])\n\n\tconst handleFile = file => {\n\t\t/* Boilerplate to set up FileReader */\n\t\tconst reader = new FileReader();\n\t\tconst rABS = !!reader.readAsBinaryString;\n\t\treader.onload = e => {\n\t\t\t/* Parse data */\n\t\t\tconst bstr = e.target.result;\n\t\t\tconst wb = XLSX.read(bstr, {type:rABS ? 'binary' : 'array'});\n\t\t\t/* Get first worksheet */\n\t\t\tconst wsname = wb.SheetNames[0];\n\t\t\tconst ws = wb.Sheets[wsname];\n\t\t\t/* Convert array of arrays */\n\t\t\tconst data = XLSX.utils.sheet_to_json(ws, {header:1});\n\t\t\t/* Update state */\n\t\t\tsetData(data)\n\t\t\tsetCols(make_cols(ws['!ref']))\n\t\t}\n\t\tif(rABS) reader.readAsBinaryString(file); else reader.readAsArrayBuffer(file);\n\t};\n\n\treturn (\n\t\t<DragDropFile handleFile={ handleFile }>\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col-xs-12\">\n\t\t\t\t\t<DataInput handleFile={ handleFile } />\n\t\t\t\t</div></div>\n\t\t\t<div className=\"row\"><div className=\"col-xs-12\">\n\t\t\t\t<button disabled={ !data.length } className=\"btn btn-success\">Create Transactions</button>\n\t\t\t</div></div>\n\t\t</DragDropFile>\n\t);\n}\n/* -------------------------------------------------------------------------- */\n\n/*\n  Simple HTML5 file drag-and-drop wrapper\n  usage: <DragDropFile handleFile={handleFile}>...</DragDropFile>\n    handleFile(file:File):void;\n*/\nclass DragDropFile extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.onDrop = this.onDrop.bind(this);\n\t};\n\tsuppress(evt) { evt.stopPropagation(); evt.preventDefault(); };\n\tonDrop(evt) { evt.stopPropagation(); evt.preventDefault();\n\t\tconst files = evt.dataTransfer.files;\n\t\tif(files && files[0]) this.props.handleFile(files[0]);\n\t};\n\trender() { return (\n<div onDrop={this.onDrop} onDragEnter={this.suppress} onDragOver={this.suppress}>\n\t{this.props.children}\n</div>\n\t); };\n};\n\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\nclass DataInput extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t};\n\thandleChange(e) {\n\t\tconst files = e.target.files;\n\t\tif(files && files[0]) this.props.handleFile(files[0]);\n\t};\n\trender() { return (\n<form className=\"form-inline\">\n\t<div className=\"form-group\">\n\t\t<label htmlFor=\"file\">Spreadsheet</label>\n\t\t<input type=\"file\" className=\"form-control\" id=\"file\" accept={SheetJSFT} onChange={this.handleChange} />\n\t</div>\n</form>\n\t); };\n}\n\n/* list of supported file types */\nconst SheetJSFT = [ \"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\" ].map(function(x) { return \".\" + x; }).join(\",\");\n\n/* generate an array of column objects */\nconst make_cols = refstr => {\n\tlet o = [], C = XLSX.utils.decode_range(refstr).e.c + 1;\n\tfor(var i = 0; i < C; ++i) o[i] = {name:XLSX.utils.encode_col(i), key:i}\n\treturn o;\n};\n\nexport default FileMapper"]},"metadata":{},"sourceType":"module"}
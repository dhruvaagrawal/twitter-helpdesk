{"ast":null,"code":"'use strict';\n\nvar util = require(\"util\");\n\nfunction toString(val) {\n  val = val.toString(8);\n\n  while (val.length < 4) {\n    val = \"0\" + val;\n  }\n\n  return val;\n}\n\nvar defaultUmask = 18; // 0022;\n\nvar defaultUmaskString = toString(defaultUmask);\n\nfunction validate(data, k, val) {\n  // must be either an integer or an octal string.\n  if (typeof val === \"number\" && !isNaN(val)) {\n    data[k] = val;\n    return true;\n  }\n\n  if (typeof val === \"string\") {\n    if (val.charAt(0) !== \"0\") {\n      return false;\n    }\n\n    data[k] = parseInt(val, 8);\n    return true;\n  }\n\n  return false;\n}\n\nfunction convert_fromString(val, cb) {\n  if (typeof val === \"string\") {\n    // check for octal string first\n    if (val.charAt(0) === '0' && /^[0-7]+$/.test(val)) {\n      val = parseInt(val, 8);\n    } else if (val.charAt(0) !== '0' && /^[0-9]+$/.test(val)) {\n      // legacy support for decimal strings\n      val = parseInt(val, 10);\n    } else {\n      return cb(new Error(util.format(\"Expected octal string, got %j, defaulting to %j\", val, defaultUmaskString)), defaultUmask);\n    }\n  } else if (typeof val !== \"number\") {\n    return cb(new Error(util.format(\"Expected number or octal string, got %j, defaulting to %j\", val, defaultUmaskString)), defaultUmask);\n  }\n\n  val = Math.floor(val);\n\n  if (val < 0 || val > 511) {\n    return cb(new Error(util.format(\"Must be in range 0..511 (0000..0777), got %j\", val)), defaultUmask);\n  }\n\n  cb(null, val);\n}\n\nfunction fromString(val, cb) {\n  // synchronous callback, no zalgo\n  convert_fromString(val, cb || function (err, result) {\n    /*jslint unparam:true*/\n    val = result;\n  });\n  return val;\n}\n\nexports.toString = toString;\nexports.fromString = fromString;\nexports.validate = validate;","map":null,"metadata":{},"sourceType":"script"}
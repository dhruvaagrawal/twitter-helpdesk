{"ast":null,"code":"import _classCallCheck from\"/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";var Utils=/*#__PURE__*/function(){function Utils(){_classCallCheck(this,Utils);}_createClass(Utils,null,[{key:\"getNameInitial\",/**\r\n\t * Get first character from first & last sentences of a username\r\n\t * @param {String} name - Username\r\n\t * @return {String} 2 characters string\r\n\t */value:function getNameInitial(name){var initials=name.match(/\\b\\w/g)||[];return((initials.shift()||'')+(initials.pop()||'')).toUpperCase();}/**\r\n\t * Get current path related object from Navigation Tree\r\n\t * @param {Array} navTree - Navigation Tree from directory 'configs/NavigationConfig'\r\n\t * @param {String} path - Location path you looking for e.g '/app/dashboards/analytic'\r\n\t * @return {Object} object that contained the path string\r\n\t */},{key:\"getRouteInfo\",value:function getRouteInfo(navTree,path){if(navTree.path===path){return navTree;}var route;for(var p in navTree){if(navTree.hasOwnProperty(p)&&typeof navTree[p]==='object'){route=this.getRouteInfo(navTree[p],path);if(route){return route;}}}return route;}/**\r\n\t * Get accessible color contrast\r\n\t * @param {String} hex - Hex color code e.g '#3e82f7'\r\n\t * @return {String} 'dark' or 'light'\r\n\t */},{key:\"getColorContrast\",value:function getColorContrast(hex){var threshold=130;var hRed=hexToR(hex);var hGreen=hexToG(hex);var hBlue=hexToB(hex);function hexToR(h){return parseInt(cutHex(h).substring(0,2),16);}function hexToG(h){return parseInt(cutHex(h).substring(2,4),16);}function hexToB(h){return parseInt(cutHex(h).substring(4,6),16);}function cutHex(h){return h.charAt(0)==='#'?h.substring(1,7):h;}var cBrightness=(hRed*299+hGreen*587+hBlue*114)/1000;if(cBrightness>threshold){return'dark';}else{return'light';}}/**\r\n\t * Darken or lighten a hex color \r\n\t * @param {String} color - Hex color code e.g '#3e82f7'\r\n\t * @param {Number} percent - Percentage -100 to 100, positive for lighten, negative for darken\r\n\t * @return {String} Darken or lighten color \r\n\t */},{key:\"shadeColor\",value:function shadeColor(color,percent){var R=parseInt(color.substring(1,3),16);var G=parseInt(color.substring(3,5),16);var B=parseInt(color.substring(5,7),16);R=parseInt(R*(100+percent)/100);G=parseInt(G*(100+percent)/100);B=parseInt(B*(100+percent)/100);R=R<255?R:255;G=G<255?G:255;B=B<255?B:255;var RR=R.toString(16).length===1?\"0\".concat(R.toString(16)):R.toString(16);var GG=G.toString(16).length===1?\"0\".concat(G.toString(16)):G.toString(16);var BB=B.toString(16).length===1?\"0\".concat(B.toString(16)):B.toString(16);return\"#\".concat(RR).concat(GG).concat(BB);}/**\r\n\t * Returns either a positive or negative \r\n\t * @param {Number} number - number value\r\n\t * @param {any} positive - value that return when positive\r\n\t * @param {any} negative - value that return when negative\r\n\t * @return {any} positive or negative value based on param\r\n\t */},{key:\"getSignNum\",value:function getSignNum(number,positive,negative){if(number>0){return positive;}if(number<0){return negative;}return null;}/**\r\n\t * Returns either ascending or descending value\r\n\t * @param {Object} a - antd Table sorter param a\r\n\t * @param {Object} b - antd Table sorter param b\r\n\t * @param {String} key - object key for compare\r\n\t * @return {any} a value minus b value\r\n\t */},{key:\"antdTableSorter\",value:function antdTableSorter(a,b,key){if(typeof a[key]==='number'&&typeof b[key]==='number'){return a[key]-b[key];}if(typeof a[key]==='string'&&typeof b[key]==='string'){a=a[key].toLowerCase();b=b[key].toLowerCase();return a>b?-1:b>a?1:0;}return;}/**\r\n\t * Filter array of object \r\n\t * @param {Array} list - array of objects that need to filter\r\n\t * @param {String} key - object key target\r\n\t * @param {any} value  - value that excluded from filter\r\n\t * @return {Array} a value minus b value\r\n\t */},{key:\"filterArray\",value:function filterArray(list,key,value){var data=list;if(list){data=list.filter(function(item){return item[key]===value;});}return data;}/**\r\n\t * Remove object from array by value\r\n\t * @param {Array} list - array of objects\r\n\t * @param {String} key - object key target\r\n\t * @param {any} value  - target value\r\n\t * @return {Array} Array that removed target object\r\n\t */},{key:\"deleteArrayRow\",value:function deleteArrayRow(list,key,value){var data=list;if(list){data=list.filter(function(item){return item[key]!==value;});}return data;}/**\r\n\t * Wild card search on all property of the object\r\n\t * @param {Number | String} input - any value to search\r\n\t * @param {Array} list - array for search\r\n\t * @return {Array} array of object contained keyword\r\n\t */},{key:\"wildCardSearch\",value:function wildCardSearch(list,input){var searchText=function searchText(item){for(var key in item){if(item[key]==null){continue;}if(item[key].toString().toUpperCase().indexOf(input.toString().toUpperCase())!==-1){return true;}}};list=list.filter(function(value){return searchText(value);});return list;}/**\r\n\t * Get Breakpoint\r\n\t * @param {Object} screens - Grid.useBreakpoint() from antd\r\n\t * @return {Array} array of breakpoint size\r\n\t */},{key:\"getBreakPoint\",value:function getBreakPoint(screens){var breakpoints=[];for(var key in screens){if(screens.hasOwnProperty(key)){var element=screens[key];if(element){breakpoints.push(key);}}}return breakpoints;}}]);return Utils;}();export default Utils;","map":{"version":3,"sources":["/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/utils/index.js"],"names":["Utils","name","initials","match","shift","pop","toUpperCase","navTree","path","route","p","hasOwnProperty","getRouteInfo","hex","threshold","hRed","hexToR","hGreen","hexToG","hBlue","hexToB","h","parseInt","cutHex","substring","charAt","cBrightness","color","percent","R","G","B","RR","toString","length","GG","BB","number","positive","negative","a","b","key","toLowerCase","list","value","data","filter","item","input","searchText","indexOf","screens","breakpoints","element","push"],"mappings":"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","sourcesContent":["class Utils {\r\n\r\n\t/**\r\n\t * Get first character from first & last sentences of a username\r\n\t * @param {String} name - Username\r\n\t * @return {String} 2 characters string\r\n\t */\r\n\tstatic getNameInitial(name) {\r\n\t\tlet initials = name.match(/\\b\\w/g) || [];\r\n\t\treturn ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();\r\n\t}\r\n\r\n\t/**\r\n\t * Get current path related object from Navigation Tree\r\n\t * @param {Array} navTree - Navigation Tree from directory 'configs/NavigationConfig'\r\n\t * @param {String} path - Location path you looking for e.g '/app/dashboards/analytic'\r\n\t * @return {Object} object that contained the path string\r\n\t */\r\n\tstatic getRouteInfo(navTree, path) {\r\n\t\tif( navTree.path === path ){\r\n\t\t  return navTree;\r\n\t\t}\r\n\t\tlet route; \r\n\t\tfor (let p in navTree) {\r\n\t\t  if( navTree.hasOwnProperty(p) && typeof navTree[p] === 'object' ) {\r\n\t\t\t\troute = this.getRouteInfo(navTree[p], path);\r\n\t\t\t\tif(route){\r\n\t\t\t\t\treturn route;\r\n\t\t\t\t}\r\n\t\t  }\r\n\t\t}\r\n\t\treturn route;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Get accessible color contrast\r\n\t * @param {String} hex - Hex color code e.g '#3e82f7'\r\n\t * @return {String} 'dark' or 'light'\r\n\t */\r\n\tstatic getColorContrast(hex){\r\n\t\tconst threshold = 130;\r\n\t\tconst hRed = hexToR(hex);\r\n\t\tconst hGreen = hexToG(hex);\r\n\t\tconst hBlue = hexToB(hex);\r\n\t\tfunction hexToR(h) {return parseInt((cutHex(h)).substring(0,2),16)}\r\n\t\tfunction hexToG(h) {return parseInt((cutHex(h)).substring(2,4),16)}\r\n\t\tfunction hexToB(h) {return parseInt((cutHex(h)).substring(4,6),16)}\r\n\t\tfunction cutHex(h) {return (h.charAt(0) === '#') ? h.substring(1,7):h}\r\n\t\tconst cBrightness = ((hRed * 299) + (hGreen * 587) + (hBlue * 114)) / 1000;\r\n\t\tif (cBrightness > threshold){\r\n\t\t\treturn 'dark'\r\n\t\t} else { \r\n\t\t\treturn 'light'\r\n\t\t}\t\r\n\t}\r\n\r\n\t/**\r\n\t * Darken or lighten a hex color \r\n\t * @param {String} color - Hex color code e.g '#3e82f7'\r\n\t * @param {Number} percent - Percentage -100 to 100, positive for lighten, negative for darken\r\n\t * @return {String} Darken or lighten color \r\n\t */\r\n\tstatic shadeColor(color, percent) {\r\n\t\tlet R = parseInt(color.substring(1,3),16);\r\n\t\tlet G = parseInt(color.substring(3,5),16);\r\n\t\tlet B = parseInt(color.substring(5,7),16);\r\n\t\tR = parseInt(R * (100 + percent) / 100);\r\n\t\tG = parseInt(G * (100 + percent) / 100);\r\n\t\tB = parseInt(B * (100 + percent) / 100);\r\n\t\tR = (R<255)?R:255;  \r\n\t\tG = (G<255)?G:255;  \r\n\t\tB = (B<255)?B:255;  \r\n\t\tconst RR = ((R.toString(16).length === 1) ? `0${R.toString(16)}` : R.toString(16));\r\n\t\tconst GG = ((G.toString(16).length === 1) ? `0${G.toString(16)}` : G.toString(16));\r\n\t\tconst BB = ((B.toString(16).length === 1) ? `0${B.toString(16)}` : B.toString(16));\r\n\t\treturn `#${RR}${GG}${BB}`; \r\n\t}\r\n\r\n\t/**\r\n\t * Returns either a positive or negative \r\n\t * @param {Number} number - number value\r\n\t * @param {any} positive - value that return when positive\r\n\t * @param {any} negative - value that return when negative\r\n\t * @return {any} positive or negative value based on param\r\n\t */\r\n\tstatic getSignNum(number, positive, negative) {\r\n\t\tif (number > 0) {\r\n\t\t\treturn positive\r\n\t\t}\r\n\t\tif (number < 0) {\r\n\t\t\treturn negative\r\n\t\t}\r\n\t\treturn null\r\n\t}\r\n\r\n\t/**\r\n\t * Returns either ascending or descending value\r\n\t * @param {Object} a - antd Table sorter param a\r\n\t * @param {Object} b - antd Table sorter param b\r\n\t * @param {String} key - object key for compare\r\n\t * @return {any} a value minus b value\r\n\t */\r\n\tstatic antdTableSorter(a, b, key) {\r\n\t\tif(typeof a[key] === 'number' && typeof b[key] === 'number') {\r\n\t\t\treturn a[key] - b[key]\r\n\t\t}\r\n\r\n\t\tif(typeof a[key] === 'string' && typeof b[key] === 'string') {\r\n\t\t\ta = a[key].toLowerCase();\r\n\t\t\tb = b[key].toLowerCase();\r\n\t\t\treturn a > b ? -1 : b > a ? 1 : 0;\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\t/**\r\n\t * Filter array of object \r\n\t * @param {Array} list - array of objects that need to filter\r\n\t * @param {String} key - object key target\r\n\t * @param {any} value  - value that excluded from filter\r\n\t * @return {Array} a value minus b value\r\n\t */\r\n\tstatic filterArray(list, key, value) {\r\n\t\tlet data = list\r\n\t\tif(list) {\r\n\t\t\tdata = list.filter(item => item[key] === value)\r\n\t\t}\r\n\t\treturn data\r\n\t}\r\n\r\n\t/**\r\n\t * Remove object from array by value\r\n\t * @param {Array} list - array of objects\r\n\t * @param {String} key - object key target\r\n\t * @param {any} value  - target value\r\n\t * @return {Array} Array that removed target object\r\n\t */\r\n\tstatic deleteArrayRow(list, key, value) {\r\n\t\tlet data = list\r\n\t\tif(list) {\r\n\t\t\tdata = list.filter(item => item[key] !== value)\r\n\t\t}\r\n\t\treturn data\r\n\t}\r\n\r\n\t/**\r\n\t * Wild card search on all property of the object\r\n\t * @param {Number | String} input - any value to search\r\n\t * @param {Array} list - array for search\r\n\t * @return {Array} array of object contained keyword\r\n\t */\r\n\tstatic wildCardSearch(list, input) {\r\n\t\tconst searchText = (item) => {\r\n\t\t\tfor (let key in item) {\r\n\t\t\t\tif (item[key] == null) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (item[key].toString().toUpperCase().indexOf(input.toString().toUpperCase()) !== -1) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tlist = list.filter(value => searchText(value));\r\n\t\treturn list;\r\n\t}\r\n\r\n\t/**\r\n\t * Get Breakpoint\r\n\t * @param {Object} screens - Grid.useBreakpoint() from antd\r\n\t * @return {Array} array of breakpoint size\r\n\t */\r\n\tstatic getBreakPoint(screens) {\r\n\t\tlet breakpoints = []\r\n\t\tfor (const key in screens) {\r\n\t\t\tif (screens.hasOwnProperty(key)) {\r\n\t\t\t\tconst element = screens[key];\r\n\t\t\t\tif (element) {\r\n\t\t\t\t\tbreakpoints.push(key)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn breakpoints\r\n\t}\r\n}\r\n\r\nexport default Utils;"]},"metadata":{},"sourceType":"module"}
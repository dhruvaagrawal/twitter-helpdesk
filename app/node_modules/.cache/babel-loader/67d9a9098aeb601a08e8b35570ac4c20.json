{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.props = props;\nexports.Node = exports.HEAD = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nfunction attrEscape(str) {\n  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n}\n\nfunction escape(str) {\n  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n}\n\nvar HEAD = Symbol('head');\nexports.HEAD = HEAD;\n\nfunction props() {\n  for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n    keys[_key] = arguments[_key];\n  }\n\n  return function (target) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      var _loop = function _loop() {\n        var key = _step.value;\n        target.elements.push({\n          key,\n          kind: 'method',\n          placement: 'prototype',\n          descriptor: {\n            get() {\n              if (this.attributes) {\n                return this.attributes[key];\n              }\n            },\n\n            set(value) {\n              if (this.attributes === undefined) {\n                this.attributes = {};\n              }\n\n              this.attributes[key] = value;\n            },\n\n            configurable: true,\n            enumerable: true\n          }\n        });\n      };\n\n      for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        _loop();\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return target;\n  };\n}\n\nvar Node = /*#__PURE__*/function () {\n  function Node() {\n    var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var name = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _classCallCheck2.default)(this, Node);\n\n    for (var _i = 0, _Object$keys = Object.keys(attributes); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n      this[key] = attributes[key];\n    }\n\n    this.children = children;\n    this.__name = name || this.constructor.name.substring(1);\n  }\n\n  (0, _createClass2.default)(Node, [{\n    key: \"render\",\n    value: function render() {\n      function walk(tree) {\n        var name = tree.__name;\n        var attributes = tree.attributes,\n            children = tree.children;\n        var tokens = [];\n\n        if (tree[HEAD]) {\n          tokens.push(tree[HEAD]);\n        }\n\n        tokens.push(`<${name}`);\n\n        for (var _i2 = 0, _Object$keys2 = Object.keys(attributes || {}); _i2 < _Object$keys2.length; _i2++) {\n          var key = _Object$keys2[_i2];\n          var v = attributes[key];\n          if (v === undefined) continue;\n\n          if (typeof v === 'string') {\n            v = attrEscape(v);\n          }\n\n          if (typeof v === 'boolean') {\n            v = v ? 1 : 0;\n          }\n\n          tokens.push(` ${key}=\"${v}\"`);\n        }\n\n        if (!children.length) {\n          tokens.push('/>');\n          return tokens;\n        }\n\n        tokens.push('>');\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var child = _step2.value;\n\n            if (child instanceof Node) {\n              tokens.push(child.render());\n            } else if (typeof child === 'string') {\n              tokens.push(escape(child));\n            } else {\n              tokens.push(child.toString());\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        tokens.push(`</${name}>`);\n        return tokens;\n      }\n\n      return walk(this).join('');\n    }\n  }]);\n  return Node;\n}();\n\nexports.Node = Node;","map":null,"metadata":{},"sourceType":"script"}
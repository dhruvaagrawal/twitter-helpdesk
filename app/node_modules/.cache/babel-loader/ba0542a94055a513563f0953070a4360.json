{"ast":null,"code":"var _jsxFileName = \"/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/journeys/journey-ivr/userRoles/index.js\";\n// import React, { Component } from 'react'\n// import { Card, Table, Tag, Tooltip, message, Popconfirm, Button, InputNumber, Input, Form } from 'antd';\n// import { EyeOutlined, DeleteOutlined } from '@ant-design/icons';\n// import moment from 'moment';\n// import UserView from './UserView';\n// import AvatarStatus from 'components/shared-components/AvatarStatus';\n// import userData from \"assets/data/user-list.data.json\";\n// const EditableCell = ({ editing, dataIndex, title, inputType, record, index, children, ...restProps }) => {\n// \tconst inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n// \treturn (\n// \t  \t<td {...restProps}>\n// \t\t\t{editing ? (\n// \t\t  \t\t<Form.Item\n// \t\t\t\t\tname={dataIndex}\n// \t\t\t\t\tstyle={{\n// \t\t\t\t\tmargin: 0,\n// \t\t\t\t\t}}\n// \t\t\t\t\trules={[\n// \t\t\t\t\t{\n// \t\t\t\t\t\trequired: true,\n// \t\t\t\t\t\tmessage: `Please Input ${title}!`,\n// \t\t\t\t\t},\n// \t\t\t\t\t]}\n// \t\t\t\t>\n// \t\t\t\t\t{inputNode}\n// \t\t  \t\t</Form.Item>\n// \t\t\t) : ( children )\n// \t\t\t}\n// \t  \t</td>\n// \t);\n// };\n// export default class UserRoles extends Component {\n// \tstate = {\n// \t\tusers: userData,\n// \t\tuserProfileVisible: false,\n// \t\tselectedUser: null,\n// \t\tdata: originData,\n// \t\teditingKey: ''\n// \t}\n// \t[ form ] = Form.useForm();\n// \t//[ data, setData ] = useState(originData);\n// \t// [ editingKey, setEditingKey ] = useState('');\n// \tsetData = () => {\n// \t\tthis.setState({\n// \t\t})\n// \t}\n// \tsetEditingKey = () => {\n// \t\tthis.setState({\n// \t\t})\n// \t}\n// \tisEditing = record => record.key === editingKey;\n// \tedit = record => {\n// \t  \tform.setFieldsValue({\n// \t\t\tname: '',\n// \t\t\tage: '',\n// \t\t\taddress: '',\n// \t\t\t...record,\n// \t\t});\n// \t  \tsetEditingKey(record.key);\n// \t};\n// \tcancel = () => {\n// \t\tsetEditingKey('');\n// \t};\n// \tsave = async (key) => {\n// \t\ttry {\n// \t\t\tconst row = await form.validateFields();\n// \t\t\tconst newData = [...data];\n// \t\t\tconst index = newData.findIndex((item) => key === item.key);\n// \t\t\tif (index > -1) {\n// \t\t\t\tconst item = newData[index];\n// \t\t\t\tnewData.splice(index, 1, { ...item, ...row });\n// \t\t\t\tsetData(newData);\n// \t\t\t\tsetEditingKey('');\n// \t\t\t} else {\n// \t\t\t\tnewData.push(row);\n// \t\t\t\tsetData(newData);\n// \t\t\t\tsetEditingKey('');\n// \t\t\t}\n// \t\t} catch (errInfo) {\n// \t\t\tconsole.log('Validate Failed:', errInfo);\n// \t}\n// \tdeleteUser = userId => {\n// \t\tthis.setState({\n// \t\t\tusers: this.state.users.filter(item => item.id !== userId),\n// \t\t})\n// \t\tmessage.success({ content: `Deleted user ${userId}`, duration: 2 });\n// \t}\n// \tshowUserProfile = userInfo => {\n// \t\tthis.setState({\n// \t\t\tuserProfileVisible: true,\n// \t\t\tselectedUser: userInfo\n// \t\t});\n// \t};\n// \tcloseUserProfile = () => {\n// \t\tthis.setState({\n// \t\t\tuserProfileVisible: false,\n// \t\t\tselectedUser: null\n//     \t});\n// \t}\n// \trender() {\n// \t\tconst { users, userProfileVisible, selectedUser } = this.state;\n// \t\tconst tableColumns = [\n// \t\t\t{\n// \t\t\t\ttitle: 'User',\n// \t\t\t\tdataIndex: 'name',\n// \t\t\t\trender: (_, record) => (\n// \t\t\t\t\t<div className=\"d-flex\">\n// \t\t\t\t\t\t<AvatarStatus src={record.img} name={record.name} subTitle={record.email}/>\n// \t\t\t\t\t</div>\n// \t\t\t\t),\n// \t\t\t\tsorter: {\n// \t\t\t\t\tcompare: (a, b) => {\n// \t\t\t\t\t\ta = a.name.toLowerCase();\n//   \t\t\t\t\t\tb = b.name.toLowerCase();\n// \t\t\t\t\t\treturn a > b ? -1 : b > a ? 1 : 0;\n// \t\t\t\t\t},\n// \t\t\t\t},\n// \t\t\t\teditable: true\n// \t\t\t},\n// \t\t\t/// Use this code for multiple roles management later on\n// \t\t\t// {\n// \t\t\t// \ttitle: 'Role',\n// \t\t\t// \tdataIndex: 'role',\n// \t\t\t// \trender: role => (\n// \t\t\t// \t\t<Tag className =\"text-capitalize\" color={ role === 'Super Admin' ? 'red' : role === 'Developer Admin' ? 'blue' : role === 'Admin Ops' ? 'purple' : role === 'Admin Manager' ? 'orange' : 'cyan' }>{ role }</Tag>\n// \t\t\t// \t),\n// \t\t\t// \tsorter: {\n// \t\t\t// \t\tcompare: (a, b) => a.role.length - b.role.length,\n// \t\t\t// \t},\n// \t\t\t// },\n// \t\t\t{\n// \t\t\t\ttitle: 'Role',\n// \t\t\t\tdataIndex: 'role',\n// \t\t\t\trender: role => (\n// \t\t\t\t\t<Tag className =\"text-capitalize\" color={role === 'Admin' ? 'red' : role === 'Manager' ? 'blue' : 'cyan' }>{role}</Tag>\n// \t\t\t\t),\n// \t\t\t\tsorter: {\n// \t\t\t\t\tcompare: (a, b) => a.role.length - b.role.length,\n// \t\t\t\t},\n// \t\t\t\teditable: true\n// \t\t\t},\n// \t\t\t{\n// \t\t\t\ttitle: 'Last online',\n// \t\t\t\tdataIndex: 'lastOnline',\n// \t\t\t\trender: date => (\n// \t\t\t\t\t<span>{moment.unix(date).format(\"MM/DD/YYYY\")} </span>\n// \t\t\t\t),\n// \t\t\t\tsorter: (a, b) => moment(a.lastOnline).unix() - moment(b.lastOnline).unix()\n// \t\t\t},\n// \t\t\t{\n// \t\t\t\ttitle: 'operation',\n// \t\t\t\tdataIndex: 'operation',\n// \t\t\t\trender: (_, record) => {\n// \t\t\t\t  const editable = isEditing(record);\n// \t\t\t\t  return editable ? (\n// \t\t\t\t\t<span>\n// \t\t\t\t\t  <a\n// \t\t\t\t\t\thref=\"javascript:;\"\n// \t\t\t\t\t\tonClick={() => save(record.key)}\n// \t\t\t\t\t\tstyle={{\n// \t\t\t\t\t\t  marginRight: 8,\n// \t\t\t\t\t\t}}\n// \t\t\t\t\t  >\n// \t\t\t\t\t\tSave\n// \t\t\t\t\t  </a>\n// \t\t\t\t\t  <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n// \t\t\t\t\t\t<a>Cancel</a>\n// \t\t\t\t\t  </Popconfirm>\n// \t\t\t\t\t</span>\n// \t\t\t\t  ) : (\n// \t\t\t\t\t<a disabled={editingKey !== ''} onClick={() => edit(record)}>\n// \t\t\t\t\t  Edit\n// \t\t\t\t\t</a>\n// \t\t\t\t  );\n// \t\t\t\t},\n// \t\t\t},\n// \t\t\t{\n// \t\t\t\ttitle: '',\n// \t\t\t\tdataIndex: 'actions',\n// \t\t\t\trender: (_, elm) => (\n// \t\t\t\t\t<div className=\"text-right\">\n// \t\t\t\t\t\t<Tooltip title=\"View\">\n// \t\t\t\t\t\t\t<Button type=\"primary\" className=\"mr-2\" icon={<EyeOutlined />} onClick={() => {this.showUserProfile(elm)}} size=\"small\"/>\n// \t\t\t\t\t\t</Tooltip>\n// \t\t\t\t\t\t<Tooltip title=\"Delete\">\n// \t\t\t\t\t\t\t<Button danger icon={<DeleteOutlined />} onClick={()=> {this.deleteUser(elm.id)}} size=\"small\"/>\n// \t\t\t\t\t\t</Tooltip>\n// \t\t\t\t\t</div>\n// \t\t\t\t)\n// \t\t\t}\n// \t\t];\n// \t\treturn (\n// \t\t\t<Card bodyStyle={{'padding': '0px'}}>\n// \t\t\t\t<Table columns={tableColumns} dataSource={users} rowKey='id' />\n// \t\t\t\t<UserView data={selectedUser} visible={userProfileVisible} close={()=> {this.closeUserProfile()}}/>\n// \t\t\t</Card>\n// \t\t)\n// \t}\n// }\nimport React, { useState } from 'react';\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\nconst originData = [];\n\nfor (let i = 0; i < 100; i++) {\n  originData.push({\n    key: i.toString(),\n    name: `Edrward ${i}`,\n    age: 32,\n    address: `London Park no. ${i}`\n  });\n}\n\nconst EditableCell = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === 'number' ? /*#__PURE__*/React.createElement(InputNumber, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 46\n    }\n  }) : /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 64\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 5\n    }\n  }), editing ? /*#__PURE__*/React.createElement(Form.Item, {\n    name: dataIndex,\n    style: {\n      margin: 0\n    },\n    rules: [{\n      required: true,\n      message: `Please Input ${title}!`\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }\n  }, inputNode) : children);\n};\n\nconst EditableTable = () => {\n  const [form] = Form.useForm();\n  const [data, setData] = useState(originData);\n  const [editingKey, setEditingKey] = useState('');\n\n  const isEditing = record => record.key === editingKey;\n\n  const edit = record => {\n    form.setFieldsValue({\n      name: '',\n      age: '',\n      address: '',\n      ...record\n    });\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const save = async key => {\n    try {\n      const row = await form.validateFields();\n      const newData = [...data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item,\n          ...row\n        });\n        setData(newData);\n        setEditingKey('');\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey('');\n      }\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    }\n  };\n\n  const columns = [{\n    title: 'name',\n    dataIndex: 'name',\n    width: '25%',\n    editable: true\n  }, {\n    title: 'age',\n    dataIndex: 'age',\n    width: '15%',\n    editable: true\n  }, {\n    title: 'address',\n    dataIndex: 'address',\n    width: '40%',\n    editable: true\n  }, {\n    title: 'operation',\n    dataIndex: 'operation',\n    render: (_, record) => {\n      const editable = isEditing(record);\n      return editable ? /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"javascript:;\",\n        onClick: () => save(record.key),\n        style: {\n          marginRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }\n      }, \"Save\"), /*#__PURE__*/React.createElement(Popconfirm, {\n        title: \"Sure to cancel?\",\n        onConfirm: cancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 15\n        }\n      }, \"Cancel\"))) : /*#__PURE__*/React.createElement(\"a\", {\n        disabled: editingKey !== '',\n        onClick: () => edit(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }\n      }, \"Edit\");\n    }\n  }];\n  const mergedColumns = columns.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return { ...col,\n      onCell: record => ({\n        record,\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    };\n  });\n  return /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: data,\n    columns: mergedColumns,\n    rowClassName: \"editable-row\",\n    pagination: {\n      onChange: cancel\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default EditableTable;","map":{"version":3,"sources":["/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/journeys/journey-ivr/userRoles/index.js"],"names":["React","useState","Table","Input","InputNumber","Popconfirm","Form","originData","i","push","key","toString","name","age","address","EditableCell","editing","dataIndex","title","inputType","record","index","children","restProps","inputNode","margin","required","message","EditableTable","form","useForm","data","setData","editingKey","setEditingKey","isEditing","edit","setFieldsValue","cancel","save","row","validateFields","newData","findIndex","item","splice","errInfo","console","log","columns","width","editable","render","_","marginRight","mergedColumns","map","col","onCell","body","cell","onChange"],"mappingsgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,WAAvB,EAAoCC,UAApC,EAAgDC,IAAhD,QAA4D,MAA5D;AACA,MAAMC,UAAU,GAAG,EAAnB;;AAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BD,EAAAA,UAAU,CAACE,IAAX,CAAgB;AACdC,IAAAA,GAAG,EAAEF,CAAC,CAACG,QAAF,EADS;AAEdC,IAAAA,IAAI,EAAG,WAAUJ,CAAE,EAFL;AAGdK,IAAAA,GAAG,EAAE,EAHS;AAIdC,IAAAA,OAAO,EAAG,mBAAkBN,CAAE;AAJhB,GAAhB;AAMD;;AAED,MAAMO,YAAY,GAAG,CAAC;AACpBC,EAAAA,OADoB;AAEpBC,EAAAA,SAFoB;AAGpBC,EAAAA,KAHoB;AAIpBC,EAAAA,SAJoB;AAKpBC,EAAAA,MALoB;AAMpBC,EAAAA,KANoB;AAOpBC,EAAAA,QAPoB;AAQpB,KAAGC;AARiB,CAAD,KASf;AACJ,QAAMC,SAAS,GAAGL,SAAS,KAAK,QAAd,gBAAyB,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAzB,gBAA2C,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7D;AACA,sBACE,4CAAQI,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGP,OAAO,gBACN,oBAAC,IAAD,CAAM,IAAN;AACE,IAAA,IAAI,EAAEC,SADR;AAEE,IAAA,KAAK,EAAE;AACLQ,MAAAA,MAAM,EAAE;AADH,KAFT;AAKE,IAAA,KAAK,EAAE,CACL;AACEC,MAAAA,QAAQ,EAAE,IADZ;AAEEC,MAAAA,OAAO,EAAG,gBAAeT,KAAM;AAFjC,KADK,CALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYGM,SAZH,CADM,GAgBNF,QAjBJ,CADF;AAsBD,CAjCD;;AAmCA,MAAMM,aAAa,GAAG,MAAM;AAC1B,QAAM,CAACC,IAAD,IAASvB,IAAI,CAACwB,OAAL,EAAf;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB/B,QAAQ,CAACM,UAAD,CAAhC;AACA,QAAM,CAAC0B,UAAD,EAAaC,aAAb,IAA8BjC,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMkC,SAAS,GAAIf,MAAD,IAAYA,MAAM,CAACV,GAAP,KAAeuB,UAA7C;;AAEA,QAAMG,IAAI,GAAIhB,MAAD,IAAY;AACvBS,IAAAA,IAAI,CAACQ,cAAL,CAAoB;AAClBzB,MAAAA,IAAI,EAAE,EADY;AAElBC,MAAAA,GAAG,EAAE,EAFa;AAGlBC,MAAAA,OAAO,EAAE,EAHS;AAIlB,SAAGM;AAJe,KAApB;AAMAc,IAAAA,aAAa,CAACd,MAAM,CAACV,GAAR,CAAb;AACD,GARD;;AAUA,QAAM4B,MAAM,GAAG,MAAM;AACnBJ,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD,GAFD;;AAIA,QAAMK,IAAI,GAAG,MAAO7B,GAAP,IAAe;AAC1B,QAAI;AACF,YAAM8B,GAAG,GAAG,MAAMX,IAAI,CAACY,cAAL,EAAlB;AACA,YAAMC,OAAO,GAAG,CAAC,GAAGX,IAAJ,CAAhB;AACA,YAAMV,KAAK,GAAGqB,OAAO,CAACC,SAAR,CAAmBC,IAAD,IAAUlC,GAAG,KAAKkC,IAAI,CAAClC,GAAzC,CAAd;;AAEA,UAAIW,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,cAAMuB,IAAI,GAAGF,OAAO,CAACrB,KAAD,CAApB;AACAqB,QAAAA,OAAO,CAACG,MAAR,CAAexB,KAAf,EAAsB,CAAtB,EAAyB,EAAE,GAAGuB,IAAL;AAAW,aAAGJ;AAAd,SAAzB;AACAR,QAAAA,OAAO,CAACU,OAAD,CAAP;AACAR,QAAAA,aAAa,CAAC,EAAD,CAAb;AACD,OALD,MAKO;AACLQ,QAAAA,OAAO,CAACjC,IAAR,CAAa+B,GAAb;AACAR,QAAAA,OAAO,CAACU,OAAD,CAAP;AACAR,QAAAA,aAAa,CAAC,EAAD,CAAb;AACD;AACF,KAfD,CAeE,OAAOY,OAAP,EAAgB;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,OAAhC;AACD;AACF,GAnBD;;AAqBA,QAAMG,OAAO,GAAG,CACd;AACE/B,IAAAA,KAAK,EAAE,MADT;AAEED,IAAAA,SAAS,EAAE,MAFb;AAGEiC,IAAAA,KAAK,EAAE,KAHT;AAIEC,IAAAA,QAAQ,EAAE;AAJZ,GADc,EAOd;AACEjC,IAAAA,KAAK,EAAE,KADT;AAEED,IAAAA,SAAS,EAAE,KAFb;AAGEiC,IAAAA,KAAK,EAAE,KAHT;AAIEC,IAAAA,QAAQ,EAAE;AAJZ,GAPc,EAad;AACEjC,IAAAA,KAAK,EAAE,SADT;AAEED,IAAAA,SAAS,EAAE,SAFb;AAGEiC,IAAAA,KAAK,EAAE,KAHT;AAIEC,IAAAA,QAAQ,EAAE;AAJZ,GAbc,EAmBd;AACEjC,IAAAA,KAAK,EAAE,WADT;AAEED,IAAAA,SAAS,EAAE,WAFb;AAGEmC,IAAAA,MAAM,EAAE,CAACC,CAAD,EAAIjC,MAAJ,KAAe;AACrB,YAAM+B,QAAQ,GAAGhB,SAAS,CAACf,MAAD,CAA1B;AACA,aAAO+B,QAAQ,gBACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AACE,QAAA,IAAI,EAAC,cADP;AAEE,QAAA,OAAO,EAAE,MAAMZ,IAAI,CAACnB,MAAM,CAACV,GAAR,CAFrB;AAGE,QAAA,KAAK,EAAE;AACL4C,UAAAA,WAAW,EAAE;AADR,SAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE,oBAAC,UAAD;AAAY,QAAA,KAAK,EAAC,iBAAlB;AAAoC,QAAA,SAAS,EAAEhB,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CAVF,CADa,gBAgBb;AAAG,QAAA,QAAQ,EAAEL,UAAU,KAAK,EAA5B;AAAgC,QAAA,OAAO,EAAE,MAAMG,IAAI,CAAChB,MAAD,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBF;AAoBD;AAzBH,GAnBc,CAAhB;AA+CA,QAAMmC,aAAa,GAAGN,OAAO,CAACO,GAAR,CAAaC,GAAD,IAAS;AACzC,QAAI,CAACA,GAAG,CAACN,QAAT,EAAmB;AACjB,aAAOM,GAAP;AACD;;AAED,WAAO,EACL,GAAGA,GADE;AAELC,MAAAA,MAAM,EAAGtC,MAAD,KAAa;AACnBA,QAAAA,MADmB;AAEnBD,QAAAA,SAAS,EAAEsC,GAAG,CAACxC,SAAJ,KAAkB,KAAlB,GAA0B,QAA1B,GAAqC,MAF7B;AAGnBA,QAAAA,SAAS,EAAEwC,GAAG,CAACxC,SAHI;AAInBC,QAAAA,KAAK,EAAEuC,GAAG,CAACvC,KAJQ;AAKnBF,QAAAA,OAAO,EAAEmB,SAAS,CAACf,MAAD;AALC,OAAb;AAFH,KAAP;AAUD,GAfqB,CAAtB;AAgBD,sBACC,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAES,IAAZ;AAAkB,IAAA,SAAS,EAAE,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,KAAD;AACC,IAAA,UAAU,EAAE;AACZ8B,MAAAA,IAAI,EAAE;AACLC,QAAAA,IAAI,EAAE7C;AADD;AADM,KADb;AAMC,IAAA,QAAQ,MANT;AAOC,IAAA,UAAU,EAAEgB,IAPb;AAQC,IAAA,OAAO,EAAEwB,aARV;AASC,IAAA,YAAY,EAAC,cATd;AAUC,IAAA,UAAU,EAAE;AACZM,MAAAA,QAAQ,EAAEvB;AADE,KAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD;AAkBA,CA3HD;;AA6HA,eAAeV,aAAf","sourcesContent":["// import React, { Component } from 'react'\n// import { Card, Table, Tag, Tooltip, message, Popconfirm, Button, InputNumber, Input, Form } from 'antd';\n// import { EyeOutlined, DeleteOutlined } from '@ant-design/icons';\n// import moment from 'moment';\n// import UserView from './UserView';\n// import AvatarStatus from 'components/shared-components/AvatarStatus';\n// import userData from \"assets/data/user-list.data.json\";\n\n// const EditableCell = ({ editing, dataIndex, title, inputType, record, index, children, ...restProps }) => {\n// \tconst inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n// \treturn (\n// \t  \t<td {...restProps}>\n// \t\t\t{editing ? (\n// \t\t  \t\t<Form.Item\n// \t\t\t\t\tname={dataIndex}\n// \t\t\t\t\tstyle={{\n// \t\t\t\t\tmargin: 0,\n// \t\t\t\t\t}}\n// \t\t\t\t\trules={[\n// \t\t\t\t\t{\n// \t\t\t\t\t\trequired: true,\n// \t\t\t\t\t\tmessage: `Please Input ${title}!`,\n// \t\t\t\t\t},\n// \t\t\t\t\t]}\n// \t\t\t\t>\n// \t\t\t\t\t{inputNode}\n// \t\t  \t\t</Form.Item>\n// \t\t\t) : ( children )\n// \t\t\t}\n// \t  \t</td>\n// \t);\n// };\n\n// export default class UserRoles extends Component {\n\n// \tstate = {\n// \t\tusers: userData,\n// \t\tuserProfileVisible: false,\n// \t\tselectedUser: null,\n// \t\tdata: originData,\n// \t\teditingKey: ''\n// \t}\n\n// \t[ form ] = Form.useForm();\n// \t//[ data, setData ] = useState(originData);\n// \t// [ editingKey, setEditingKey ] = useState('');\n\t\n// \tsetData = () => {\n// \t\tthis.setState({\n\n// \t\t})\n// \t}\n\n// \tsetEditingKey = () => {\n// \t\tthis.setState({\n\t\t\t\n// \t\t})\n// \t}\n\n\n// \tisEditing = record => record.key === editingKey;\n  \n// \tedit = record => {\n// \t  \tform.setFieldsValue({\n// \t\t\tname: '',\n// \t\t\tage: '',\n// \t\t\taddress: '',\n// \t\t\t...record,\n// \t\t});\n// \t  \tsetEditingKey(record.key);\n// \t};\n  \n// \tcancel = () => {\n// \t\tsetEditingKey('');\n// \t};\n  \n// \tsave = async (key) => {\n// \t\ttry {\n// \t\t\tconst row = await form.validateFields();\n// \t\t\tconst newData = [...data];\n// \t\t\tconst index = newData.findIndex((item) => key === item.key);\n\t\n// \t\t\tif (index > -1) {\n// \t\t\t\tconst item = newData[index];\n// \t\t\t\tnewData.splice(index, 1, { ...item, ...row });\n// \t\t\t\tsetData(newData);\n// \t\t\t\tsetEditingKey('');\n// \t\t\t} else {\n// \t\t\t\tnewData.push(row);\n// \t\t\t\tsetData(newData);\n// \t\t\t\tsetEditingKey('');\n// \t\t\t}\n// \t\t} catch (errInfo) {\n// \t\t\tconsole.log('Validate Failed:', errInfo);\n// \t}\n\n// \tdeleteUser = userId => {\n// \t\tthis.setState({\n// \t\t\tusers: this.state.users.filter(item => item.id !== userId),\n// \t\t})\n// \t\tmessage.success({ content: `Deleted user ${userId}`, duration: 2 });\n// \t}\n\n// \tshowUserProfile = userInfo => {\n// \t\tthis.setState({\n// \t\t\tuserProfileVisible: true,\n// \t\t\tselectedUser: userInfo\n// \t\t});\n// \t};\n\t\n// \tcloseUserProfile = () => {\n// \t\tthis.setState({\n// \t\t\tuserProfileVisible: false,\n// \t\t\tselectedUser: null\n//     \t});\n// \t}\n\n// \trender() {\n// \t\tconst { users, userProfileVisible, selectedUser } = this.state;\n\n// \t\tconst tableColumns = [\n// \t\t\t{\n// \t\t\t\ttitle: 'User',\n// \t\t\t\tdataIndex: 'name',\n// \t\t\t\trender: (_, record) => (\n// \t\t\t\t\t<div className=\"d-flex\">\n// \t\t\t\t\t\t<AvatarStatus src={record.img} name={record.name} subTitle={record.email}/>\n// \t\t\t\t\t</div>\n// \t\t\t\t),\n// \t\t\t\tsorter: {\n// \t\t\t\t\tcompare: (a, b) => {\n// \t\t\t\t\t\ta = a.name.toLowerCase();\n//   \t\t\t\t\t\tb = b.name.toLowerCase();\n// \t\t\t\t\t\treturn a > b ? -1 : b > a ? 1 : 0;\n// \t\t\t\t\t},\n// \t\t\t\t},\n// \t\t\t\teditable: true\n// \t\t\t},\n// \t\t\t/// Use this code for multiple roles management later on\n// \t\t\t// {\n// \t\t\t// \ttitle: 'Role',\n// \t\t\t// \tdataIndex: 'role',\n// \t\t\t// \trender: role => (\n// \t\t\t// \t\t<Tag className =\"text-capitalize\" color={ role === 'Super Admin' ? 'red' : role === 'Developer Admin' ? 'blue' : role === 'Admin Ops' ? 'purple' : role === 'Admin Manager' ? 'orange' : 'cyan' }>{ role }</Tag>\n// \t\t\t// \t),\n// \t\t\t// \tsorter: {\n// \t\t\t// \t\tcompare: (a, b) => a.role.length - b.role.length,\n// \t\t\t// \t},\n// \t\t\t// },\n// \t\t\t{\n// \t\t\t\ttitle: 'Role',\n// \t\t\t\tdataIndex: 'role',\n// \t\t\t\trender: role => (\n// \t\t\t\t\t<Tag className =\"text-capitalize\" color={role === 'Admin' ? 'red' : role === 'Manager' ? 'blue' : 'cyan' }>{role}</Tag>\n// \t\t\t\t),\n// \t\t\t\tsorter: {\n// \t\t\t\t\tcompare: (a, b) => a.role.length - b.role.length,\n// \t\t\t\t},\n// \t\t\t\teditable: true\n// \t\t\t},\n// \t\t\t{\n// \t\t\t\ttitle: 'Last online',\n// \t\t\t\tdataIndex: 'lastOnline',\n// \t\t\t\trender: date => (\n// \t\t\t\t\t<span>{moment.unix(date).format(\"MM/DD/YYYY\")} </span>\n// \t\t\t\t),\n// \t\t\t\tsorter: (a, b) => moment(a.lastOnline).unix() - moment(b.lastOnline).unix()\n// \t\t\t},\n// \t\t\t{\n// \t\t\t\ttitle: 'operation',\n// \t\t\t\tdataIndex: 'operation',\n// \t\t\t\trender: (_, record) => {\n// \t\t\t\t  const editable = isEditing(record);\n// \t\t\t\t  return editable ? (\n// \t\t\t\t\t<span>\n// \t\t\t\t\t  <a\n// \t\t\t\t\t\thref=\"javascript:;\"\n// \t\t\t\t\t\tonClick={() => save(record.key)}\n// \t\t\t\t\t\tstyle={{\n// \t\t\t\t\t\t  marginRight: 8,\n// \t\t\t\t\t\t}}\n// \t\t\t\t\t  >\n// \t\t\t\t\t\tSave\n// \t\t\t\t\t  </a>\n// \t\t\t\t\t  <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n// \t\t\t\t\t\t<a>Cancel</a>\n// \t\t\t\t\t  </Popconfirm>\n// \t\t\t\t\t</span>\n// \t\t\t\t  ) : (\n// \t\t\t\t\t<a disabled={editingKey !== ''} onClick={() => edit(record)}>\n// \t\t\t\t\t  Edit\n// \t\t\t\t\t</a>\n// \t\t\t\t  );\n// \t\t\t\t},\n// \t\t\t},\n// \t\t\t{\n// \t\t\t\ttitle: '',\n// \t\t\t\tdataIndex: 'actions',\n// \t\t\t\trender: (_, elm) => (\n// \t\t\t\t\t<div className=\"text-right\">\n// \t\t\t\t\t\t<Tooltip title=\"View\">\n// \t\t\t\t\t\t\t<Button type=\"primary\" className=\"mr-2\" icon={<EyeOutlined />} onClick={() => {this.showUserProfile(elm)}} size=\"small\"/>\n// \t\t\t\t\t\t</Tooltip>\n// \t\t\t\t\t\t<Tooltip title=\"Delete\">\n// \t\t\t\t\t\t\t<Button danger icon={<DeleteOutlined />} onClick={()=> {this.deleteUser(elm.id)}} size=\"small\"/>\n// \t\t\t\t\t\t</Tooltip>\n// \t\t\t\t\t</div>\n// \t\t\t\t)\n// \t\t\t}\n// \t\t];\n// \t\treturn (\n// \t\t\t<Card bodyStyle={{'padding': '0px'}}>\n// \t\t\t\t<Table columns={tableColumns} dataSource={users} rowKey='id' />\n// \t\t\t\t<UserView data={selectedUser} visible={userProfileVisible} close={()=> {this.closeUserProfile()}}/>\n// \t\t\t</Card>\n// \t\t)\n// \t}\n// }\n\nimport React, { useState } from 'react';\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\nconst originData = [];\n\nfor (let i = 0; i < 100; i++) {\n  originData.push({\n    key: i.toString(),\n    name: `Edrward ${i}`,\n    age: 32,\n    address: `London Park no. ${i}`,\n  });\n}\n\nconst EditableCell = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{\n            margin: 0,\n          }}\n          rules={[\n            {\n              required: true,\n              message: `Please Input ${title}!`,\n            },\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n\nconst EditableTable = () => {\n  const [form] = Form.useForm();\n  const [data, setData] = useState(originData);\n  const [editingKey, setEditingKey] = useState('');\n\n  const isEditing = (record) => record.key === editingKey;\n\n  const edit = (record) => {\n    form.setFieldsValue({\n      name: '',\n      age: '',\n      address: '',\n      ...record,\n    });\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const save = async (key) => {\n    try {\n      const row = await form.validateFields();\n      const newData = [...data];\n      const index = newData.findIndex((item) => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item, ...row });\n        setData(newData);\n        setEditingKey('');\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey('');\n      }\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    }\n  };\n\n  const columns = [\n    {\n      title: 'name',\n      dataIndex: 'name',\n      width: '25%',\n      editable: true,\n    },\n    {\n      title: 'age',\n      dataIndex: 'age',\n      width: '15%',\n      editable: true,\n    },\n    {\n      title: 'address',\n      dataIndex: 'address',\n      width: '40%',\n      editable: true,\n    },\n    {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (_, record) => {\n        const editable = isEditing(record);\n        return editable ? (\n          <span>\n            <a\n              href=\"javascript:;\"\n              onClick={() => save(record.key)}\n              style={{\n                marginRight: 8,\n              }}\n            >\n              Save\n            </a>\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n              <a>Cancel</a>\n            </Popconfirm>\n          </span>\n        ) : (\n          <a disabled={editingKey !== ''} onClick={() => edit(record)}>\n            Edit\n          </a>\n        );\n      },\n    },\n  ];\n  const mergedColumns = columns.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return {\n      ...col,\n      onCell: (record) => ({\n        record,\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n\treturn (\n\t\t<Form form={form} component={false}>\n\t\t\t<Table\n\t\t\t\tcomponents={{\n\t\t\t\tbody: {\n\t\t\t\t\tcell: EditableCell,\n\t\t\t\t},\n\t\t\t\t}}\n\t\t\t\tbordered\n\t\t\t\tdataSource={data}\n\t\t\t\tcolumns={mergedColumns}\n\t\t\t\trowClassName=\"editable-row\"\n\t\t\t\tpagination={{\n\t\t\t\tonChange: cancel,\n\t\t\t\t}}\n\t\t\t/>\n\t\t</Form>\n\t);\n};\n\nexport default EditableTable"]},"metadata":{},"sourceType":"module"}
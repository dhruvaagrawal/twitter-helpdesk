{"ast":null,"code":"'use strict';\n\nconst LRU = require('lru-cache');\n\nconst url = require('url');\n\nlet AGENT_CACHE = new LRU({\n  max: 50\n});\nlet HttpsAgent;\nlet HttpAgent;\nmodule.exports = getAgent;\n\nfunction getAgent(uri, opts) {\n  const parsedUri = url.parse(typeof uri === 'string' ? uri : uri.url);\n  const isHttps = parsedUri.protocol === 'https:';\n  const pxuri = getProxyUri(uri, opts);\n  const key = [`https:${isHttps}`, pxuri ? `proxy:${pxuri.protocol}//${pxuri.host}:${pxuri.port}` : '>no-proxy<', `local-address:${opts.localAddress || '>no-local-address<'}`, `strict-ssl:${isHttps ? !!opts.strictSSL : '>no-strict-ssl<'}`, `ca:${isHttps && opts.ca || '>no-ca<'}`, `cert:${isHttps && opts.cert || '>no-cert<'}`, `key:${isHttps && opts.key || '>no-key<'}`].join(':');\n\n  if (opts.agent != null) {\n    // `agent: false` has special behavior!\n    return opts.agent;\n  }\n\n  if (AGENT_CACHE.peek(key)) {\n    return AGENT_CACHE.get(key);\n  }\n\n  if (pxuri) {\n    const proxy = getProxy(pxuri, opts, isHttps);\n    AGENT_CACHE.set(key, proxy);\n    return proxy;\n  }\n\n  if (isHttps && !HttpsAgent) {\n    HttpsAgent = require('agentkeepalive').HttpsAgent;\n  } else if (!isHttps && !HttpAgent) {\n    HttpAgent = require('agentkeepalive');\n  } // If opts.timeout is zero, set the agentTimeout to zero as well. A timeout\n  // of zero disables the timeout behavior (OS limits still apply). Else, if\n  // opts.timeout is a non-zero value, set it to timeout + 1, to ensure that\n  // the node-fetch-npm timeout will always fire first, giving us more\n  // consistent errors.\n\n\n  const agentTimeout = opts.timeout === 0 ? 0 : opts.timeout + 1;\n  const agent = isHttps ? new HttpsAgent({\n    maxSockets: opts.maxSockets || 15,\n    ca: opts.ca,\n    cert: opts.cert,\n    key: opts.key,\n    localAddress: opts.localAddress,\n    rejectUnauthorized: opts.strictSSL,\n    timeout: agentTimeout\n  }) : new HttpAgent({\n    maxSockets: opts.maxSockets || 15,\n    localAddress: opts.localAddress,\n    timeout: agentTimeout\n  });\n  AGENT_CACHE.set(key, agent);\n  return agent;\n}\n\nfunction checkNoProxy(uri, opts) {\n  const host = url.parse(uri).hostname.split('.').reverse();\n  let noproxy = opts.noProxy || getProcessEnv('no_proxy');\n\n  if (typeof noproxy === 'string') {\n    noproxy = noproxy.split(/\\s*,\\s*/g);\n  }\n\n  return noproxy && noproxy.some(no => {\n    const noParts = no.split('.').filter(x => x).reverse();\n\n    if (!noParts.length) {\n      return false;\n    }\n\n    for (let i = 0; i < noParts.length; i++) {\n      if (host[i] !== noParts[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n}\n\nmodule.exports.getProcessEnv = getProcessEnv;\n\nfunction getProcessEnv(env) {\n  if (!env) {\n    return;\n  }\n\n  let value;\n\n  if (Array.isArray(env)) {\n    for (let e of env) {\n      value = process.env[e] || process.env[e.toUpperCase()] || process.env[e.toLowerCase()];\n\n      if (typeof value !== 'undefined') {\n        break;\n      }\n    }\n  }\n\n  if (typeof env === 'string') {\n    value = process.env[env] || process.env[env.toUpperCase()] || process.env[env.toLowerCase()];\n  }\n\n  return value;\n}\n\nfunction getProxyUri(uri, opts) {\n  const protocol = url.parse(uri).protocol;\n  const proxy = opts.proxy || protocol === 'https:' && getProcessEnv('https_proxy') || protocol === 'http:' && getProcessEnv(['https_proxy', 'http_proxy', 'proxy']);\n\n  if (!proxy) {\n    return null;\n  }\n\n  const parsedProxy = typeof proxy === 'string' ? url.parse(proxy) : proxy;\n  return !checkNoProxy(uri, opts) && parsedProxy;\n}\n\nlet HttpProxyAgent;\nlet HttpsProxyAgent;\nlet SocksProxyAgent;\n\nfunction getProxy(proxyUrl, opts, isHttps) {\n  let popts = {\n    host: proxyUrl.hostname,\n    port: proxyUrl.port,\n    protocol: proxyUrl.protocol,\n    path: proxyUrl.path,\n    auth: proxyUrl.auth,\n    ca: opts.ca,\n    cert: opts.cert,\n    key: opts.key,\n    timeout: opts.timeout === 0 ? 0 : opts.timeout + 1,\n    localAddress: opts.localAddress,\n    maxSockets: opts.maxSockets || 15,\n    rejectUnauthorized: opts.strictSSL\n  };\n\n  if (proxyUrl.protocol === 'http:' || proxyUrl.protocol === 'https:') {\n    if (!isHttps) {\n      if (!HttpProxyAgent) {\n        HttpProxyAgent = require('http-proxy-agent');\n      }\n\n      return new HttpProxyAgent(popts);\n    } else {\n      if (!HttpsProxyAgent) {\n        HttpsProxyAgent = require('https-proxy-agent');\n      }\n\n      return new HttpsProxyAgent(popts);\n    }\n  }\n\n  if (proxyUrl.protocol.startsWith('socks')) {\n    if (!SocksProxyAgent) {\n      SocksProxyAgent = require('socks-proxy-agent');\n    }\n\n    return new SocksProxyAgent(popts);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}
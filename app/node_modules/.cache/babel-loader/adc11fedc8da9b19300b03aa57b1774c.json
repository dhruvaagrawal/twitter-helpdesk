{"ast":null,"code":"/*\nHTML escaping is the same as React's\n(on purpose.) Therefore, it has the following Copyright and Licensing:\n\nCopyright 2013-2014, Facebook, Inc.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the LICENSE\nfile in the root directory of React's source tree.\n*/\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport * as React from 'react';\nimport { IntlMessageFormat } from 'intl-messageformat';\nimport * as memoize from 'fast-memoize';\nimport { invariant } from '@formatjs/intl-utils';\nimport { UnsupportedFormatterError } from './error';\nexport function filterProps(props, whitelist, defaults) {\n  if (defaults === void 0) {\n    defaults = {};\n  }\n\n  return whitelist.reduce(function (filtered, name) {\n    if (name in props) {\n      filtered[name] = props[name];\n    } else if (name in defaults) {\n      filtered[name] = defaults[name];\n    }\n\n    return filtered;\n  }, {});\n}\nexport function invariantIntlContext(intl) {\n  invariant(intl, '[React Intl] Could not find required `intl` object. ' + '<IntlProvider> needs to exist in the component ancestry.');\n}\nexport var defaultErrorHandler = function (error) {\n  if (process.env.NODE_ENV !== 'production') {\n    console.error(error);\n  }\n};\nexport var DEFAULT_INTL_CONFIG = {\n  formats: {},\n  messages: {},\n  timeZone: undefined,\n  textComponent: React.Fragment,\n  defaultLocale: 'en',\n  defaultFormats: {},\n  onError: defaultErrorHandler\n};\nexport function createIntlCache() {\n  return {\n    dateTime: {},\n    number: {},\n    message: {},\n    relativeTime: {},\n    pluralRules: {},\n    list: {},\n    displayNames: {}\n  };\n}\n\nfunction createFastMemoizeCache(store) {\n  return {\n    create: function () {\n      return {\n        has: function (key) {\n          return key in store;\n        },\n        get: function (key) {\n          return store[key];\n        },\n        set: function (key, value) {\n          store[key] = value;\n        }\n      };\n    }\n  };\n} // @ts-ignore this is to deal with rollup's default import shenanigans\n\n\nvar _memoizeIntl = memoize.default || memoize;\n\nvar memoizeIntl = _memoizeIntl;\n/**\n * Create intl formatters and populate cache\n * @param cache explicit cache to prevent leaking memory\n */\n\nexport function createFormatters(cache) {\n  if (cache === void 0) {\n    cache = createIntlCache();\n  }\n\n  var RelativeTimeFormat = Intl.RelativeTimeFormat;\n  var ListFormat = Intl.ListFormat;\n  var DisplayNames = Intl.DisplayNames;\n  var getDateTimeFormat = memoizeIntl(function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return new ((_a = Intl.DateTimeFormat).bind.apply(_a, __spreadArrays([void 0], args)))();\n  }, {\n    cache: createFastMemoizeCache(cache.dateTime),\n    strategy: memoizeIntl.strategies.variadic\n  });\n  var getNumberFormat = memoizeIntl(function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return new ((_a = Intl.NumberFormat).bind.apply(_a, __spreadArrays([void 0], args)))();\n  }, {\n    cache: createFastMemoizeCache(cache.number),\n    strategy: memoizeIntl.strategies.variadic\n  });\n  var getPluralRules = memoizeIntl(function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return new ((_a = Intl.PluralRules).bind.apply(_a, __spreadArrays([void 0], args)))();\n  }, {\n    cache: createFastMemoizeCache(cache.pluralRules),\n    strategy: memoizeIntl.strategies.variadic\n  });\n  return {\n    getDateTimeFormat: getDateTimeFormat,\n    getNumberFormat: getNumberFormat,\n    getMessageFormat: memoizeIntl(function (message, locales, overrideFormats, opts) {\n      return new IntlMessageFormat(message, locales, overrideFormats, __assign({\n        formatters: {\n          getNumberFormat: getNumberFormat,\n          getDateTimeFormat: getDateTimeFormat,\n          getPluralRules: getPluralRules\n        }\n      }, opts || {}));\n    }, {\n      cache: createFastMemoizeCache(cache.message),\n      strategy: memoizeIntl.strategies.variadic\n    }),\n    getRelativeTimeFormat: memoizeIntl(function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return new (RelativeTimeFormat.bind.apply(RelativeTimeFormat, __spreadArrays([void 0], args)))();\n    }, {\n      cache: createFastMemoizeCache(cache.relativeTime),\n      strategy: memoizeIntl.strategies.variadic\n    }),\n    getPluralRules: getPluralRules,\n    getListFormat: memoizeIntl(function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return new (ListFormat.bind.apply(ListFormat, __spreadArrays([void 0], args)))();\n    }, {\n      cache: createFastMemoizeCache(cache.list),\n      strategy: memoizeIntl.strategies.variadic\n    }),\n    getDisplayNames: memoizeIntl(function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return new (DisplayNames.bind.apply(DisplayNames, __spreadArrays([void 0], args)))();\n    }, {\n      cache: createFastMemoizeCache(cache.displayNames),\n      strategy: memoizeIntl.strategies.variadic\n    })\n  };\n}\nexport function getNamedFormat(formats, type, name, onError) {\n  var formatType = formats && formats[type];\n  var format;\n\n  if (formatType) {\n    format = formatType[name];\n  }\n\n  if (format) {\n    return format;\n  }\n\n  onError(new UnsupportedFormatterError(\"No \" + type + \" format named: \" + name));\n}\n/**\n * Takes a `formatXMLElementFn`, and composes it in function, which passes\n * argument `parts` through, assigning unique key to each part, to prevent\n * \"Each child in a list should have a unique \"key\"\" React error.\n * @param formatXMLElementFn\n */\n\nexport function assignUniqueKeysToParts(formatXMLElementFn) {\n  return function (parts) {\n    // eslint-disable-next-line prefer-rest-params\n    return formatXMLElementFn(React.Children.toArray(parts));\n  };\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/journeys/journey-ivr/userRoles/index.js\";\nimport React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Card, Table, Tag, Tooltip, message, Popconfirm, Button, InputNumber, Input, Form } from 'antd';\nimport { EyeOutlined, DeleteOutlined } from '@ant-design/icons';\nimport moment from 'moment';\nimport UserView from './UserView';\nimport AvatarStatus from 'components/shared-components/AvatarStatus';\nimport userData from \"assets/data/user-list.data.json\";\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({\n  index,\n  ...props\n}) => {\n  const [form] = Form.useForm();\n  return /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(EditableContext.Provider, {\n    value: form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }))));\n};\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef();\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  };\n\n  const save = async e => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record,\n        ...values\n      });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? /*#__PURE__*/React.createElement(Form.Item, {\n      style: {\n        margin: 0\n      },\n      name: dataIndex,\n      rules: [{\n        required: true,\n        message: `${title} is required.`\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      ref: inputRef,\n      onPressEnter: save,\n      onBlur: save,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"editable-cell-value-wrap\",\n      style: {\n        paddingRight: 24\n      },\n      onClick: toggleEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, children);\n  }\n\n  return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 10\n    }\n  }), childNode);\n};\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    this.columns = [{\n      title: 'name',\n      dataIndex: 'name',\n      width: '30%',\n      editable: true\n    }, {\n      title: 'age',\n      dataIndex: 'age'\n    }, {\n      title: 'address',\n      dataIndex: 'address'\n    }, {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (text, record) => this.state.dataSource.length >= 1 ? /*#__PURE__*/React.createElement(Popconfirm, {\n        title: \"Sure to delete?\",\n        onConfirm: () => this.handleDelete(record.key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }\n      }, \"Delete\")) : null\n    }];\n    this.state = {\n      dataSource: [{\n        key: '0',\n        name: 'Edward King 0',\n        age: '32',\n        address: 'London, Park Lane no. 0'\n      }, {\n        key: '1',\n        name: 'Edward King 1',\n        age: '32',\n        address: 'London, Park Lane no. 1'\n      }],\n      count: 2\n    };\n  }\n\n  render() {\n    const {\n      dataSource\n    } = this.state;\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return { ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      };\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleAdd,\n      type: \"primary\",\n      style: {\n        marginBottom: 16\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }\n    }, \"Add a row\"), /*#__PURE__*/React.createElement(Table, {\n      components: components,\n      rowClassName: () => 'editable-row',\n      bordered: true,\n      dataSource: dataSource,\n      columns: columns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default EditableTable;","map":{"version":3,"sources":["/Users/dhruvaagrawal/Desktop/Work/Spocto/CMS/app/src/views/app-views/journeys/journey-ivr/userRoles/index.js"],"names":["React","useContext","useState","useEffect","useRef","Card","Table","Tag","Tooltip","message","Popconfirm","Button","InputNumber","Input","Form","EyeOutlined","DeleteOutlined","moment","UserView","AvatarStatus","userData","EditableContext","createContext","EditableRow","index","props","form","useForm","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","setFieldsValue","save","e","values","validateFields","errInfo","console","log","childNode","margin","required","paddingRight","EditableTable","Component","constructor","columns","width","render","text","state","dataSource","length","handleDelete","key","name","age","address","count","components","body","row","cell","map","col","onCell","handleAdd","marginBottom"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from 'react';\nimport {  Card, Table, Tag, Tooltip, message, Popconfirm, Button, InputNumber, Input, Form } from 'antd';\nimport { EyeOutlined, DeleteOutlined } from '@ant-design/icons';\nimport moment from 'moment';\nimport UserView from './UserView';\nimport AvatarStatus from 'components/shared-components/AvatarStatus';\nimport userData from \"assets/data/user-list.data.json\";\n\n\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef();\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex],\n    });\n  };\n\n  const save = async (e) => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{\n          margin: 0,\n        }}\n        name={dataIndex}\n        rules={[\n          {\n            required: true,\n            message: `${title} is required.`,\n          },\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{\n          paddingRight: 24,\n        }}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  return <td {...restProps}>{childNode}</td>;\n};\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n\n    this.columns = [\n      {\n        title: 'name',\n        dataIndex: 'name',\n        width: '30%',\n        editable: true,\n      },\n      {\n        title: 'age',\n        dataIndex: 'age',\n      },\n      {\n        title: 'address',\n        dataIndex: 'address',\n      },\n      {\n        title: 'operation',\n        dataIndex: 'operation',\n        render: (text, record) =>\n          this.state.dataSource.length >= 1 ? (\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.key)}>\n              <a>Delete</a>\n            </Popconfirm>\n          ) : null,\n      },\n    ];\n    this.state = {\n      dataSource: [\n        {\n          key: '0',\n          name: 'Edward King 0',\n          age: '32',\n          address: 'London, Park Lane no. 0',\n        },\n        {\n          key: '1',\n          name: 'Edward King 1',\n          age: '32',\n          address: 'London, Park Lane no. 1',\n        },\n      ],\n      count: 2,\n    };\n  }\n\n  handleDelete = (key) => {\n    const dataSource = [...this.state.dataSource];\n    this.setState({\n      dataSource: dataSource.filter((item) => item.key !== key),\n    });\n  };\n  handleAdd = () => {\n    const { count, dataSource } = this.state;\n    const newData = {\n      key: count,\n      name: `Edward King ${count}`,\n      age: 32,\n      address: `London, Park Lane no. ${count}`,\n    };\n    this.setState({\n      dataSource: [...dataSource, newData],\n      count: count + 1,\n    });\n  };\n  handleSave = (row) => {\n    const newData = [...this.state.dataSource];\n    const index = newData.findIndex((item) => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, { ...item, ...row });\n    this.setState({\n      dataSource: newData,\n    });\n  };\n\n  render() {\n    const { dataSource } = this.state;\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell,\n      },\n    };\n    const columns = this.columns.map((col) => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return {\n        ...col,\n        onCell: (record) => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave,\n        }),\n      };\n    });\n    return (\n      <div>\n        <Button\n          onClick={this.handleAdd}\n          type=\"primary\"\n          style={{\n            marginBottom: 16,\n          }}\n        >\n          Add a row\n        </Button>\n        <Table\n          components={components}\n          rowClassName={() => 'editable-row'}\n          bordered\n          dataSource={dataSource}\n          columns={columns}\n        />\n      </div>\n    );\n  }\n}\n\nexport default EditableTable"]},"metadata":{},"sourceType":"module"}